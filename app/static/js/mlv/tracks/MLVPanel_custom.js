/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lanceotron/src/lanceotron_tracks_index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../MLVPanel/css/mlv_panel.css":
/*!********************************!*\
  !*** .Panel/css/mlv_panel.css ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../MLV/node_modules/css-loader!./mlv_panel.css */ \"./node_modules/css-loader/index.js!../MLVPanel/css/mlv_panel.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../MLV/node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vTUxWUGFuZWwvY3NzL21sdl9wYW5lbC5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLlBhbmVsL2Nzcy9tbHZfcGFuZWwuY3NzPzNmNjgiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL01MVi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL21sdl9wYW5lbC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL01MVi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9NTFYvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tbHZfcGFuZWwuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vTUxWL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWx2X3BhbmVsLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../MLVPanel/css/mlv_panel.css\n");

/***/ }),

/***/ "../MLVPanel/src/bam.js":
/*!*************************!*\
  !*** .Panel/src/bam.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Coverage = exports.CoverageMap = exports.bgzBlockSize = exports.PairedAlignment = exports.AlignmentContainer = exports.BamAlignment = exports.BamFilter = exports.BamSource = exports.BamReader = exports.loadBamIndex = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nhe MIT License (MIT)\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (c) 2014 Broad Institute\r\nr\nermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nr\nhe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nr\nr\nr\nr\nr\nr\nn\nvar _igvxhr = __webpack_require__(/*! ./igvxhr.js */ \"../MLVPanel/src/igvxhr.js\");\n\nvar _bigwig = __webpack_require__(/*! ./bigwig.js */ \"../MLVPanel/src/bigwig.js\");\n\nvar _inflate = __webpack_require__(/*! ./vendor/inflate.js */ \"../MLVPanel/src/vendor/inflate.js\");\n\nvar _feature = __webpack_require__(/*! ./feature.js */ \"../MLVPanel/src/feature.js\");\n\nvar _zlib_and_gzip = __webpack_require__(/*! ./vendor/zlib_and_gzip.js */ \"../MLVPanel/src/vendor/zlib_and_gzip.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BAI_MAGIC = 21578050;\nvar TABIX_MAGIC = 21578324;\nvar MAX_HEADER_SIZE = 100000000; // IF the header is larger than this we can't read it !\nvar B_MAX_GZIP_BLOCK_SIZE = 1 << 16;\n\n/**\r\n * @param indexURL\r\n * @param config\r\n * @param tabix\r\n *\r\n * @returns a Promised for the bam or tabix index.  The fulfill function takes the index as an argument.\r\n */\nvar loadBamIndex = function loadBamIndex(indexURL, config, tabix) {\n\n    return new Promise(function (fulfill, reject) {\n\n        var genome = null;\n\n        _igvxhr.igvxhr.loadArrayBuffer(indexURL, {\n            headers: config.headers,\n            withCredentials: config.withCredentials\n        }).then(function (arrayBuffer) {\n\n            var indices = [],\n                magic,\n                nbin,\n                nintv,\n                nref,\n                parser,\n                blockMin = Number.MAX_VALUE,\n                blockMax = 0,\n                binIndex,\n                linearIndex,\n                binNumber,\n                cs,\n                ce,\n                b,\n                i,\n                ref,\n                sequenceIndexMap;\n\n            if (!arrayBuffer) {\n                fulfill(null);\n                return;\n            }\n\n            if (tabix) {\n                var inflate = new _zlib_and_gzip.Zlib.Gunzip(new Uint8Array(arrayBuffer));\n                arrayBuffer = inflate.decompress().buffer;\n            }\n\n            parser = new _bigwig.BinaryParser(new DataView(arrayBuffer));\n\n            magic = parser.getInt();\n\n            if (magic === BAI_MAGIC || tabix && magic === TABIX_MAGIC) {\n\n                nref = parser.getInt();\n\n                if (tabix) {\n                    // Tabix header parameters aren't used, but they must be read to advance the pointer\n                    var format = parser.getInt();\n                    var col_seq = parser.getInt();\n                    var col_beg = parser.getInt();\n                    var col_end = parser.getInt();\n                    var meta = parser.getInt();\n                    var skip = parser.getInt();\n                    var l_nm = parser.getInt();\n\n                    sequenceIndexMap = {};\n                    for (i = 0; i < nref; i++) {\n                        var seq_name = parser.getString();\n\n                        // Translate to \"official\" chr name.\n                        if (genome) seq_name = genome.getChromosomeName(seq_name);\n\n                        sequenceIndexMap[seq_name] = i;\n                    }\n                }\n\n                for (ref = 0; ref < nref; ++ref) {\n\n                    binIndex = {};\n                    linearIndex = [];\n\n                    nbin = parser.getInt();\n\n                    for (b = 0; b < nbin; ++b) {\n\n                        binNumber = parser.getInt();\n\n                        if (binNumber == 37450) {\n                            // This is a psuedo bin, not used but we have to consume the bytes\n                            nchnk = parser.getInt(); // # of chunks for this bin\n                            cs = parser.getVPointer(); // unmapped beg\n                            ce = parser.getVPointer(); // unmapped end\n                            var n_maped = parser.getLong();\n                            var nUnmapped = parser.getLong();\n                        } else {\n\n                            binIndex[binNumber] = [];\n                            var nchnk = parser.getInt(); // # of chunks for this bin\n\n                            for (i = 0; i < nchnk; i++) {\n                                cs = parser.getVPointer();\n                                ce = parser.getVPointer();\n                                if (cs && ce) {\n                                    if (cs.block < blockMin) {\n                                        blockMin = cs.block; // Block containing first alignment\n                                    }\n                                    if (ce.block > blockMax) {\n                                        blockMax = ce.block;\n                                    }\n                                    binIndex[binNumber].push([cs, ce]);\n                                }\n                            }\n                        }\n                    }\n\n                    nintv = parser.getInt();\n                    for (i = 0; i < nintv; i++) {\n                        cs = parser.getVPointer();\n                        linearIndex.push(cs); // Might be null\n                    }\n\n                    if (nbin > 0) {\n                        indices[ref] = {\n                            binIndex: binIndex,\n                            linearIndex: linearIndex\n                        };\n                    }\n                }\n            } else {\n                throw new Error(indexURL + \" is not a \" + (tabix ? \"tabix\" : \"bai\") + \" file\");\n            }\n            fulfill(new BamIndex(indices, blockMin, blockMax, sequenceIndexMap, tabix));\n        }).catch(reject);\n    });\n};\n\nvar BamIndex = function () {\n    function BamIndex(indices, blockMin, blockMax, sequenceIndexMap, tabix) {\n        _classCallCheck(this, BamIndex);\n\n        this.firstAlignmentBlock = blockMin;\n        this.indices = indices;\n        this.lastAlignmentBlock = blockMax;\n        this.sequenceIndexMap = sequenceIndexMap;\n        this.tabix = tabix;\n    }\n\n    /**\r\n     * Fetch blocks for a particular genomic range.  This method is public so it can be unit-tested.\r\n     *\r\n     * @param refId  the sequence dictionary index of the chromosome\r\n     * @param min  genomic start position\r\n     * @param max  genomic end position\r\n     * @param return an array of {minv: {filePointer, offset}, {maxv: {filePointer, offset}}\r\n     */\n\n\n    _createClass(BamIndex, [{\n        key: \"blocksForRange\",\n        value: function blocksForRange(refId, min, max) {\n\n            var bam = this,\n                ba = bam.indices[refId],\n                overlappingBins,\n                chunks,\n                nintv,\n                lowest,\n                minLin,\n                maxLin,\n                vp,\n                i;\n\n            if (!ba) {\n                return [];\n            } else {\n                overlappingBins = BamIndex.reg2bins(min, max);\n                chunks = []; // List of bin #s that might overlap min, max\n\n\n                overlappingBins.forEach(function (bin) {\n\n                    if (ba.binIndex[bin]) {\n                        var binChunks = ba.binIndex[bin],\n                            nchnk = binChunks.length;\n\n                        for (var c = 0; c < nchnk; ++c) {\n                            var cs = binChunks[c][0];\n                            var ce = binChunks[c][1];\n                            chunks.push({ minv: cs, maxv: ce, bin: bin });\n                        }\n                    }\n                });\n\n                // Use the linear index to find the lowest chunk that could contain alignments in the region\n                nintv = ba.linearIndex.length;\n                lowest = null;\n                minLin = Math.min(min >> 14, nintv - 1), maxLin = Math.min(max >> 14, nintv - 1);\n                for (i = minLin; i <= maxLin; ++i) {\n                    vp = ba.linearIndex[i];\n                    if (vp) {\n\n                        if (!lowest || vp.isLessThan(lowest)) {\n                            lowest = vp;\n                        }\n                    }\n                }\n                // Prune chunks that end before the lowest chunk\n                return optimizeChunks(chunks, lowest);\n            }\n        }\n    }], [{\n        key: \"reg2bins\",\n\n\n        /**\r\n         * Calculate the list of bins that may overlap with region [beg, end]\r\n         *\r\n         */\n        value: function reg2bins(beg, end) {\n            var i = 0,\n                k,\n                list = [];\n            if (end >= 1 << 29) end = 1 << 29;\n            --end;\n            list.push(0);\n            for (k = 1 + (beg >> 26); k <= 1 + (end >> 26); ++k) {\n                list.push(k);\n            }for (k = 9 + (beg >> 23); k <= 9 + (end >> 23); ++k) {\n                list.push(k);\n            }for (k = 73 + (beg >> 20); k <= 73 + (end >> 20); ++k) {\n                list.push(k);\n            }for (k = 585 + (beg >> 17); k <= 585 + (end >> 17); ++k) {\n                list.push(k);\n            }for (k = 4681 + (beg >> 14); k <= 4681 + (end >> 14); ++k) {\n                list.push(k);\n            }return list;\n        }\n    }]);\n\n    return BamIndex;\n}();\n\nfunction optimizeChunks(chunks, lowest) {\n\n    var mergedChunks = [],\n        lastChunk = null;\n\n    if (chunks.length === 0) return chunks;\n\n    chunks.sort(function (c0, c1) {\n        var dif = c0.minv.block - c1.minv.block;\n        if (dif != 0) {\n            return dif;\n        } else {\n            return c0.minv.offset - c1.minv.offset;\n        }\n    });\n\n    chunks.forEach(function (chunk) {\n\n        if (!lowest || chunk.maxv.isGreaterThan(lowest)) {\n            if (lastChunk === null) {\n                mergedChunks.push(chunk);\n                lastChunk = chunk;\n            } else {\n                if (chunk.minv.block - lastChunk.maxv.block < 65000) {\n                    // Merge chunks that are withing 65k of each other\n                    if (chunk.maxv.isGreaterThan(lastChunk.maxv)) {\n                        lastChunk.maxv = chunk.maxv;\n                    }\n                } else {\n                    mergedChunks.push(chunk);\n                    lastChunk = chunk;\n                }\n            }\n        }\n    });\n\n    return mergedChunks;\n}\n\nvar BGZFile = function () {\n    function BGZFile(config) {\n        _classCallCheck(this, BGZFile);\n\n        this.filePosition = 0;\n        this.config = config;\n    }\n\n    _createClass(BGZFile, [{\n        key: \"nextBlock\",\n        value: function nextBlock() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                _igvxhr.igvxhr.loadArrayBuffer(self.path, {\n                    headers: self.config.headers,\n                    range: { start: self.filePosition, size: BLOCK_HEADER_LENGTH },\n                    withCredentials: self.config.withCredentials\n\n                }).then(function (arrayBuffer) {\n\n                    var ba = new Uint8Array(arrayBuffer);\n                    var xlen = ba[11] << 8 | ba[10];\n                    var si1 = ba[12];\n                    var si2 = ba[13];\n                    var slen = ba[15] << 8 | ba[14];\n                    var bsize = ba[17] << 8 | ba[16] + 1;\n\n                    self.filePosition += BLOCK_HEADER_LENGTH;\n\n                    _igvxhr.igvxhr.loadArrayBuffer(self.path, {\n                        headers: self.config.headers,\n                        range: { start: self.filePosition, size: bsize },\n                        withCredentials: self.config.withCredentials\n\n                    }).then(function (arrayBuffer) {\n\n                        var unc = (0, _inflate.jszlib_inflate_buffer)(arrayBuffer);\n\n                        self.filePosition += bsize + 8; // \"8\" for CRC-32 and size of uncompressed data\n\n                        fulfill(unc);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        }\n    }]);\n\n    return BGZFile;\n}();\n\nvar BAM_MAGIC = 21840194;\nvar SECRET_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];\nvar CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];\nvar READ_STRAND_FLAG = 0x10;\nvar MATE_STRAND_FLAG = 0x20;\nvar FIRST_OF_PAIR_FLAG = 0x40;\nvar SECOND_OF_PAIR_FLAG = 0x80;\nvar READ_UNMAPPED_FLAG = 0x4;\nvar MATE_UNMAPPED_FLAG = 0x8;\nvar READ_PAIRED_FLAG = 0x1;\nvar PROPER_PAIR_FLAG = 0x2;\nvar SECONDARY_ALIGNMNET_FLAG = 0x100;\nvar SUPPLEMENTARY_ALIGNMENT_FLAG = 0x800;\n\nvar NOT_PRIMARY_ALIGNMENT_FLAG = 0x100;\nvar READ_FAILS_VENDOR_QUALITY_CHECK_FLAG = 0x200;\nvar DUPLICATE_READ_FLAG = 0x400;\nvar SUPPLEMENTARY_FLAG = 0x800;\n\nvar MAX_GZIP_BLOCK_SIZE = 65536; //  APPARENTLY.  Where is this documented???\nvar DEFAULT_SAMPLING_WINDOW_SIZE = 100;\nvar DEFAULT_SAMPLING_DEPTH = 50;\nvar MAXIMUM_SAMPLING_DEPTH = 2500;\n\n/**\r\n * Class for reading a bam file\r\n *\r\n * @param config\r\n * @constructor\r\n */\n\nvar BamReader = function () {\n    function BamReader(config, parent) {\n        _classCallCheck(this, BamReader);\n\n        this.config = config;\n        this.parent = parent;\n        this.ac_class = AlignmentContainer;\n        if (parent.ac_class) {\n            this.ac_class = parent_class;\n        }\n\n        this.filter = config.filter || new BamFilter();\n\n        this.bamPath = config.url;\n        // Todo - deal with Picard convention.  WHY DOES THERE HAVE TO BE 2?\n        this.baiPath = config.indexURL || this.bamPath + \".bai\"; // If there is an indexURL provided, use it!\n        this.headPath = config.headURL || this.bamPath;\n\n        this.samplingWindowSize = config.samplingWindowSize === undefined ? DEFAULT_SAMPLING_WINDOW_SIZE : config.samplingWindowSize;\n        this.samplingDepth = config.samplingDepth === undefined ? DEFAULT_SAMPLING_DEPTH : config.samplingDepth;\n        if (this.samplingDepth > MAXIMUM_SAMPLING_DEPTH) {\n            igv.log(\"Warning: attempt to set sampling depth > maximum value of 2500\");\n            this.samplingDepth = MAXIMUM_SAMPLING_DEPTH;\n        }\n\n        if (config.viewAsPairs) {\n            this.pairsSupported = true;\n        } else {\n            this.pairsSupported = config.pairsSupported === undefined ? true : config.pairsSupported;\n        }\n    }\n\n    _createClass(BamReader, [{\n        key: \"readAlignments\",\n        value: function readAlignments(chr, bpStart, bpEnd) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                getChrIndex(self).then(function (chrToIndex) {\n\n                    var chrId = chrToIndex[chr],\n                        alignmentContainer = new self.ac_class(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.parent);\n\n                    if (chrId === undefined) {\n                        fulfill(alignmentContainer);\n                    } else {\n\n                        getIndex(self).then(function (bamIndex) {\n\n                            var chunks = bamIndex.blocksForRange(chrId, bpStart, bpEnd),\n                                promises = [];\n\n                            if (!chunks) {\n                                fulfill(null);\n                                reject(\"Error reading bam index\");\n                                return;\n                            }\n                            if (chunks.length === 0) {\n                                fulfill(alignmentContainer);\n                                return;\n                            }\n\n                            chunks.forEach(function (c) {\n\n                                promises.push(new Promise(function (fulfill, reject) {\n\n                                    var fetchMin = c.minv.block,\n                                        fetchMax = c.maxv.block + MAX_GZIP_BLOCK_SIZE,\n                                        // Make sure we get the whole block.\n                                    range = { start: fetchMin, size: fetchMax - fetchMin + 1 };\n\n                                    _igvxhr.igvxhr.loadArrayBuffer(self.bamPath, {\n                                        headers: self.config.headers,\n                                        range: range,\n                                        withCredentials: self.config.withCredentials\n                                    }).then(function (compressed) {\n\n                                        var ba = new Uint8Array(new unbgzf(compressed)); //new Uint8Array(igv.unbgzf(compressed)); //, c.maxv.block - c.minv.block + 1));\n                                        decodeBamRecords(ba, c.minv.offset, alignmentContainer, bpStart, bpEnd, chrId, self.filter);\n\n                                        fulfill(alignmentContainer);\n                                    }).catch(function (obj) {\n                                        reject(obj);\n                                    });\n                                }));\n                            });\n\n                            Promise.all(promises).then(function (ignored) {\n                                alignmentContainer.finish();\n                                fulfill(alignmentContainer);\n                            }).catch(function (obj) {\n                                reject(obj);\n                            });\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n\n            function decodeBamRecords(ba, offset, alignmentContainer, min, max, chrId, filter) {\n\n                var blockSize, blockEnd, alignment, blocks, refID, pos, bmn, bin, mq, nl, flag_nc, flag, nc, lseq, mateRefID, matePos, readName, j, p, lengthOnRef, cigar, c, cigarArray, seq, seqBytes;\n\n                while (true) {\n\n                    blockSize = readInt(ba, offset);\n                    blockEnd = offset + blockSize + 4;\n\n                    if (blockEnd > ba.length) {\n                        return;\n                    }\n\n                    alignment = new BamAlignment();\n\n                    refID = readInt(ba, offset + 4);\n                    pos = readInt(ba, offset + 8);\n\n                    if (refID < 0) {\n                        return; // unmapped reads\n                    } else if (refID > chrId || pos > max) {\n                        return; // off right edge, we're done\n                    } else if (refID < chrId) {\n                        continue; // to left of start, not sure this is possible\n                    }\n\n                    bmn = readInt(ba, offset + 12);\n                    bin = (bmn & 0xffff0000) >> 16;\n                    mq = (bmn & 0xff00) >> 8;\n                    nl = bmn & 0xff;\n\n                    flag_nc = readInt(ba, offset + 16);\n                    flag = (flag_nc & 0xffff0000) >> 16;\n                    nc = flag_nc & 0xffff;\n\n                    alignment.flags = flag;\n                    alignment.strand = !(flag & READ_STRAND_FLAG);\n\n                    lseq = readInt(ba, offset + 20);\n\n                    mateRefID = readInt(ba, offset + 24);\n                    matePos = readInt(ba, offset + 28);\n                    alignment.fragmentLength = readInt(ba, offset + 32);\n\n                    readName = '';\n                    for (j = 0; j < nl - 1; ++j) {\n                        readName += String.fromCharCode(ba[offset + 36 + j]);\n                    }\n\n                    p = offset + 36 + nl;\n\n                    lengthOnRef = 0;\n                    cigar = '';\n\n                    cigarArray = [];\n                    for (c = 0; c < nc; ++c) {\n                        var cigop = readInt(ba, p);\n                        var opLen = cigop >> 4;\n                        var opLtr = CIGAR_DECODER[cigop & 0xf];\n                        if (opLtr == 'M' || opLtr == 'EQ' || opLtr == 'X' || opLtr == 'D' || opLtr == 'N' || opLtr == '=') lengthOnRef += opLen;\n                        cigar = cigar + opLen + opLtr;\n                        p += 4;\n\n                        cigarArray.push({ len: opLen, ltr: opLtr });\n                    }\n                    alignment.cigar = cigar;\n                    alignment.lengthOnRef = lengthOnRef;\n\n                    if (alignment.start + alignment.lengthOnRef < min) continue; // Record out-of-range \"to the left\", skip to next one\n\n\n                    seq = '';\n                    seqBytes = lseq + 1 >> 1;\n                    for (j = 0; j < seqBytes; ++j) {\n                        var sb = ba[p + j];\n                        seq += SECRET_DECODER[(sb & 0xf0) >> 4];\n                        seq += SECRET_DECODER[sb & 0x0f];\n                    }\n                    seq = seq.substring(0, lseq); // seq might have one extra character (if lseq is an odd number)\n\n                    p += seqBytes;\n                    alignment.seq = seq;\n\n                    if (lseq === 1 && String.fromCharCode(ba[p + j] + 33) === \"*\") {\n                        // TODO == how to represent this?\n                    } else {\n                        alignment.qual = [];\n                        for (j = 0; j < lseq; ++j) {\n                            alignment.qual.push(ba[p + j]);\n                        }\n                    }\n                    p += lseq;\n\n                    alignment.start = pos;\n                    alignment.mq = mq;\n                    alignment.readName = readName;\n                    alignment.chr = self.indexToChr[refID];\n\n                    if (mateRefID >= 0) {\n                        alignment.mate = {\n                            chr: self.indexToChr[mateRefID],\n                            position: matePos,\n                            strand: !(flag & MATE_STRAND_FLAG)\n                        };\n                    }\n\n                    alignment.tagBA = new Uint8Array(ba.buffer.slice(p, blockEnd)); // decode thiese on demand\n                    p += blockEnd;\n\n                    if (!min || alignment.start <= max && alignment.start + alignment.lengthOnRef >= min && filter.pass(alignment)) {\n                        if (chrId === undefined || refID == chrId) {\n                            blocks = makeBlocks(alignment, cigarArray);\n                            alignment.blocks = blocks.blocks;\n                            alignment.insertions = blocks.insertions;\n                            alignmentContainer.push(alignment);\n                        }\n                    }\n                    offset = blockEnd;\n                }\n                // Exits via top of loop.\n            }\n\n            /**\r\n             * Split the alignment record into blocks as specified in the cigarArray.  Each aligned block contains\r\n             * its portion of the read sequence and base quality strings.  A read sequence or base quality string\r\n             * of \"*\" indicates the value is not recorded.  In all other cases the length of the block sequence (block.seq)\r\n             * and quality string (block.qual) must == the block length.\r\n             *\r\n             * NOTE: Insertions are not yet treated // TODO\r\n             *\r\n             * @param record\r\n             * @param cigarArray\r\n             * @returns array of blocks\r\n             */\n            function makeBlocks(record, cigarArray) {\n\n                var blocks = [],\n                    insertions,\n                    seqOffset = 0,\n                    pos = record.start,\n                    len = cigarArray.length,\n                    blockSeq,\n                    blockQuals,\n                    gapType,\n                    minQ = 5,\n                    //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MIN)\n                maxQ = 20; //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MAX)\n\n                for (var i = 0; i < len; i++) {\n\n                    var c = cigarArray[i];\n\n                    switch (c.ltr) {\n                        case 'H':\n                            break; // ignore hard clips\n                        case 'P':\n                            break; // ignore pads\n                        case 'S':\n                            seqOffset += c.len;\n                            gapType = 'S';\n                            break; // soft clip read bases\n                        case 'N':\n                            pos += c.len;\n                            gapType = 'N';\n                            break; // reference skip\n                        case 'D':\n                            pos += c.len;\n                            gapType = 'D';\n                            break;\n                        case 'I':\n                            blockSeq = record.seq === \"*\" ? \"*\" : record.seq.substr(seqOffset, c.len);\n                            blockQuals = record.qual ? record.qual.slice(seqOffset, c.len) : undefined;\n                            if (insertions === undefined) insertions = [];\n                            insertions.push({ start: pos, len: c.len, seq: blockSeq, qual: blockQuals });\n                            seqOffset += c.len;\n                            break;\n                        case 'M':\n                        case 'EQ':\n                        case '=':\n                        case 'X':\n\n                            blockSeq = record.seq === \"*\" ? \"*\" : record.seq.substr(seqOffset, c.len);\n                            blockQuals = record.qual ? record.qual.slice(seqOffset, c.len) : undefined;\n                            blocks.push({ start: pos, len: c.len, seq: blockSeq, qual: blockQuals, gapType: gapType });\n                            seqOffset += c.len;\n                            pos += c.len;\n\n                            break;\n\n                        default:\n                            console.log(\"Error processing cigar element: \" + c.len + c.ltr);\n                    }\n                }\n\n                return { blocks: blocks, insertions: insertions };\n            }\n        }\n    }, {\n        key: \"readHeader\",\n        value: function readHeader() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                getIndex(self).then(function (index) {\n\n                    var len = index.firstAlignmentBlock + MAX_GZIP_BLOCK_SIZE; // Insure we get the complete compressed block containing the header\n\n                    _igvxhr.igvxhr.loadArrayBuffer(self.bamPath, {\n                        headers: self.config.headers,\n\n                        range: { start: 0, size: len },\n\n                        withCredentials: self.config.withCredentials\n                    }).then(function (compressedBuffer) {\n\n                        var unc = new unbgzf(compressedBuffer, len),\n                            uncba = new Uint8Array(unc),\n                            magic = readInt(uncba, 0),\n                            samHeaderLen = readInt(uncba, 4),\n                            samHeader = '',\n                            genome = null;\n\n                        for (var i = 0; i < samHeaderLen; ++i) {\n                            samHeader += String.fromCharCode(uncba[i + 8]);\n                        }\n\n                        var nRef = readInt(uncba, samHeaderLen + 8);\n                        var p = samHeaderLen + 12;\n\n                        self.chrToIndex = {};\n                        self.indexToChr = [];\n                        for (var i = 0; i < nRef; ++i) {\n                            var lName = readInt(uncba, p);\n                            var name = '';\n                            for (var j = 0; j < lName - 1; ++j) {\n                                name += String.fromCharCode(uncba[p + 4 + j]);\n                            }\n                            var lRef = readInt(uncba, p + lName + 4);\n                            //dlog(name + ': ' + lRef);\n\n                            if (genome && genome.getChromosomeName) {\n                                name = genome.getChromosomeName(name);\n                            }\n\n                            self.chrToIndex[name] = i;\n                            self.indexToChr.push(name);\n\n                            p = p + 8 + lName;\n                        }\n\n                        fulfill();\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        }\n    }]);\n\n    return BamReader;\n}();\n\nfunction getIndex(bam) {\n\n    return new Promise(function (fulfill, reject) {\n\n        if (bam.index) {\n            fulfill(bam.index);\n        } else {\n            loadBamIndex(bam.baiPath, bam.config).then(function (index) {\n                bam.index = index;\n\n                fulfill(bam.index);\n            }).catch(reject);\n        }\n    });\n}\n\nfunction getChrIndex(bam) {\n\n    return new Promise(function (fulfill, reject) {\n\n        if (bam.chrToIndex) {\n            fulfill(bam.chrToIndex);\n        } else {\n            bam.readHeader().then(function () {\n                fulfill(bam.chrToIndex);\n            }).catch(reject);\n        }\n    });\n}\n\nfunction readInt(ba, offset) {\n    return ba[offset + 3] << 24 | ba[offset + 2] << 16 | ba[offset + 1] << 8 | ba[offset];\n}\n\nfunction readShort(ba, offset) {\n    return ba[offset + 1] << 8 | ba[offset];\n}\n\nvar BamSource = function () {\n    function BamSource(config, parent) {\n        _classCallCheck(this, BamSource);\n\n        this.config = config;\n        this.alignmentContainer = undefined;\n        this.maxRows = config.maxRows || 1000;\n        if (config.seq_url) {\n            this.sequence_source = new _feature.FastaSequence(config.seq_url);\n        }\n        this.parent = parent;\n\n        this.pack_alignments = true;\n\n        if (config.sourceType === \"ga4gh\") {\n            this.bamReader = new igv.Ga4ghAlignmentReader(config);\n        } else {\n            this.bamReader = new BamReader(config, parent);\n        }\n\n        this.viewAsPairs = true;\n    }\n\n    _createClass(BamSource, [{\n        key: \"setViewAsPairs\",\n        value: function setViewAsPairs(bool) {\n            var self = this;\n\n            if (this.viewAsPairs !== bool) {\n                this.viewAsPairs = bool;\n                // TODO -- repair alignments\n                if (this.alignmentContainer) {\n                    var alignmentContainer = this.alignmentContainer,\n                        alignments;\n\n                    if (bool) {\n                        alignments = pairAlignments(alignmentContainer.packedAlignmentRows);\n                    } else {\n                        alignments = unpairAlignments(alignmentContainer.packedAlignmentRows);\n                    }\n                    alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, self.maxRows);\n                }\n            }\n        }\n    }, {\n        key: \"getAlignments\",\n        value: function getAlignments(chr, bpStart, bpEnd) {\n\n            var self = this;\n            return new Promise(function (fulfill, reject) {\n\n                if (self.alignmentContainer && self.alignmentContainer.contains(chr, bpStart, bpEnd)) {\n                    fulfill(self.alignmentContainer);\n                } else {\n\n                    self.bamReader.readAlignments(chr, bpStart, bpEnd).then(function (alignmentContainer) {\n\n                        var maxRows = self.config.maxRows || 500,\n                            alignments = alignmentContainer.alignments;\n\n                        if (!self.viewAsPairs) {\n                            alignments = unpairAlignments([{ alignments: alignments }]);\n                        }\n                        if (self.parent.display_alignments) {\n                            alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, maxRows);\n                        }\n\n                        alignmentContainer.alignments = undefined; // Don't need to hold onto these anymore\n                        self.alignmentContainer = alignmentContainer;\n                        if (self.sequence_source) {\n                            self.sequence_source.getSequence(alignmentContainer.chr, alignmentContainer.start, alignmentContainer.end).then(function (sequence) {\n\n                                if (sequence) {\n\n                                    alignmentContainer.coverageMap.refSeq = sequence; // TODO -- fix this\n                                    alignmentContainer.sequence = sequence; // TODO -- fix this\n\n\n                                    fulfill(alignmentContainer);\n                                }\n                            }).catch(reject);\n                        } else {\n                            fulfill(alignmentContainer);\n                        }\n                    }).catch(reject);\n                }\n            });\n        }\n    }]);\n\n    return BamSource;\n}();\n\nfunction pairAlignments(rows) {\n\n    var pairCache = {},\n        result = [];\n\n    rows.forEach(function (row) {\n\n        row.alignments.forEach(function (alignment) {\n\n            var pairedAlignment;\n\n            if (canBePaired(alignment)) {\n\n                pairedAlignment = pairCache[alignment.readName];\n                if (pairedAlignment) {\n                    pairedAlignment.setSecondAlignment(alignment);\n                    pairCache[alignment.readName] = undefined; // Don't need to track this anymore.\n                } else {\n                    pairedAlignment = new igv.PairedAlignment(alignment);\n                    pairCache[alignment.readName] = pairedAlignment;\n                    result.push(pairedAlignment);\n                }\n            } else {\n                result.push(alignment);\n            }\n        });\n    });\n    return result;\n}\n\nfunction unpairAlignments(rows) {\n    var result = [];\n    rows.forEach(function (row) {\n        row.alignments.forEach(function (alignment) {\n            if (alignment instanceof PairedAlignment) {\n                if (alignment.firstAlignment) result.push(alignment.firstAlignment); // shouldn't need the null test\n                if (alignment.secondAlignment) result.push(alignment.secondAlignment);\n            } else {\n                result.push(alignment);\n            }\n        });\n    });\n    return result;\n}\n\nfunction canBePaired(alignment) {\n    return alignment.isPaired() && alignment.isMateMapped() && alignment.chr === alignment.mate.chr && (alignment.isFirstOfPair() || alignment.isSecondOfPair()) && !(alignment.isSecondary() || alignment.isSupplementary());\n}\n\nfunction packAlignmentRows(alignments, start, end, maxRows) {\n\n    if (!alignments) return;\n\n    alignments.sort(function (a, b) {\n        return a.start - b.start;\n    });\n\n    if (alignments.length === 0) {\n\n        return [];\n    } else {\n\n        var bucketList = [],\n            allocatedCount = 0,\n            lastAllocatedCount = 0,\n            nextStart = start,\n            alignmentRow,\n            index,\n            bucket,\n            alignment,\n            alignmentSpace = 4 * 2,\n            packedAlignmentRows = [],\n            bucketStart = Math.max(start, alignments[0].start);\n\n        alignments.forEach(function (alignment) {\n\n            var buckListIndex = Math.max(0, alignment.start - bucketStart);\n            if (bucketList[buckListIndex] === undefined) {\n                bucketList[buckListIndex] = [];\n            }\n            bucketList[buckListIndex].push(alignment);\n        });\n\n        while (allocatedCount < alignments.length && packedAlignmentRows.length < maxRows) {\n\n            alignmentRow = new BamAlignmentRow();\n\n            while (nextStart <= end) {\n\n                bucket = undefined;\n\n                while (!bucket && nextStart <= end) {\n\n                    index = nextStart - bucketStart;\n                    if (bucketList[index] === undefined) {\n                        ++nextStart; // No alignments at this index\n                    } else {\n                        bucket = bucketList[index];\n                    }\n                } // while (bucket)\n\n                if (!bucket) {\n                    break;\n                }\n                alignment = bucket.pop();\n                if (0 === bucket.length) {\n                    bucketList[index] = undefined;\n                }\n\n                alignmentRow.alignments.push(alignment);\n                nextStart = alignment.start + alignment.lengthOnRef + alignmentSpace;\n                ++allocatedCount;\n            } // while (nextStart)\n\n            if (alignmentRow.alignments.length > 0) {\n                packedAlignmentRows.push(alignmentRow);\n            }\n\n            nextStart = bucketStart;\n\n            if (allocatedCount === lastAllocatedCount) break; // Protect from infinite loops\n\n            lastAllocatedCount = allocatedCount;\n        } // while (allocatedCount)\n\n        return packedAlignmentRows;\n    }\n}\n\nvar BamAlignment = function () {\n    function BamAlignment() {\n        _classCallCheck(this, BamAlignment);\n\n        this.hidden = false;\n    }\n\n    _createClass(BamAlignment, [{\n        key: \"isMapped\",\n        value: function isMapped() {\n            return (this.flags & READ_UNMAPPED_FLAG) == 0;\n        }\n    }, {\n        key: \"isPaired\",\n        value: function isPaired() {\n            return (this.flags & READ_PAIRED_FLAG) != 0;\n        }\n    }, {\n        key: \"isProperPair\",\n        value: function isProperPair() {\n            return (this.flags & PROPER_PAIR_FLAG) != 0;\n        }\n    }, {\n        key: \"isFirstOfPair\",\n        value: function isFirstOfPair() {\n            return (this.flags & FIRST_OF_PAIR_FLAG) != 0;\n        }\n    }, {\n        key: \"isSecondOfPair\",\n        value: function isSecondOfPair() {\n            return (this.flags & SECOND_OF_PAIR_FLAG) != 0;\n        }\n    }, {\n        key: \"isSecondary\",\n        value: function isSecondary() {\n            return (this.flags & SECONDARY_ALIGNMNET_FLAG) != 0;\n        }\n    }, {\n        key: \"isSupplementary\",\n        value: function isSupplementary() {\n            return (this.flags & SUPPLEMENTARY_ALIGNMENT_FLAG) != 0;\n        }\n    }, {\n        key: \"isFailsVendorQualityCheck\",\n        value: function isFailsVendorQualityCheck() {\n            return (this.flags & READ_FAILS_VENDOR_QUALITY_CHECK_FLAG) != 0;\n        }\n    }, {\n        key: \"isDuplicate\",\n        value: function isDuplicate() {\n            return (this.flags & DUPLICATE_READ_FLAG) != 0;\n        }\n    }, {\n        key: \"isMateMapped\",\n        value: function isMateMapped() {\n            return (this.flags & MATE_UNMAPPED_FLAG) == 0;\n        }\n    }, {\n        key: \"isNegativeStrand\",\n        value: function isNegativeStrand() {\n            return (this.flags & READ_STRAND_FLAG) != 0;\n        }\n    }, {\n        key: \"isMateNegativeStrand\",\n        value: function isMateNegativeStrand() {\n            return (this.flags & MATE_STRAND_FLAG) != 0;\n        }\n    }, {\n        key: \"tags\",\n        value: function tags() {\n\n            function decodeTags(ba) {\n\n                var p = 0,\n                    len = ba.length,\n                    tags = {};\n\n                while (p < len) {\n                    var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);\n                    var type = String.fromCharCode(ba[p + 2]);\n                    var value;\n\n                    if (type == 'A') {\n                        value = String.fromCharCode(ba[p + 3]);\n                        p += 4;\n                    } else if (type === 'i' || type === 'I') {\n                        value = readInt(ba, p + 3);\n                        p += 7;\n                    } else if (type === 'c' || type === 'C') {\n                        value = ba[p + 3];\n                        p += 4;\n                    } else if (type === 's' || type === 'S') {\n                        value = readShort(ba, p + 3);\n                        p += 5;\n                    } else if (type === 'f') {\n                        // TODO 'FIXME need floats';\n                        value = readFloat(ba, p + 3);\n                        p += 7;\n                    } else if (type === 'Z') {\n                        p += 3;\n                        value = '';\n                        for (;;) {\n                            var cc = ba[p++];\n                            if (cc === 0) {\n                                break;\n                            } else {\n                                value += String.fromCharCode(cc);\n                            }\n                        }\n                    } else {\n                        //'Unknown type ' + type;\n                        value = 'Error unknown type: ' + type;\n                        tags[tag] = value;\n                        break;\n                    }\n                    tags[tag] = value;\n                }\n                return tags;\n            }\n\n            if (!this.tagDict) {\n                if (this.tagBA) {\n                    this.tagDict = decodeTags(this.tagBA);\n                    this.tagBA = undefined;\n                } else {\n                    this.tagDict = {}; // Mark so we don't try again.  The record has not tags\n                }\n            }\n            return this.tagDict;\n        }\n    }, {\n        key: \"popupData\",\n        value: function popupData(genomicLocation) {\n\n            // if the user clicks on a base next to an insertion, show just the\n            // inserted bases in a popup (like in desktop IGV).\n            var nameValues = [],\n                isFirst,\n                tagDict;\n\n            if (this.insertions) {\n                for (var i = 0; i < this.insertions.length; i += 1) {\n                    var ins_start = this.insertions[i].start;\n                    if (genomicLocation == ins_start || genomicLocation == ins_start - 1) {\n                        nameValues.push({ name: 'Insertion', value: this.insertions[i].seq });\n                        nameValues.push({ name: 'Location', value: ins_start });\n                        return nameValues;\n                    }\n                }\n            }\n\n            nameValues.push({ name: 'Read Name', value: this.readName });\n\n            // Sample\n            // Read group\n            nameValues.push(\"<hr>\");\n\n            // Add 1 to genomic location to map from 0-based computer units to user-based units\n            nameValues.push({ name: 'Alignment Start', value: igv.numberFormatter(1 + this.start), borderTop: true });\n\n            nameValues.push({ name: 'Read Strand', value: true === this.strand ? '(+)' : '(-)', borderTop: true });\n            nameValues.push({ name: 'Cigar', value: this.cigar });\n            nameValues.push({ name: 'Mapped', value: yesNo(this.isMapped()) });\n            nameValues.push({ name: 'Mapping Quality', value: this.mq });\n            nameValues.push({ name: 'Secondary', value: yesNo(this.isSecondary()) });\n            nameValues.push({ name: 'Supplementary', value: yesNo(this.isSupplementary()) });\n            nameValues.push({ name: 'Duplicate', value: yesNo(this.isDuplicate()) });\n            nameValues.push({ name: 'Failed QC', value: yesNo(this.isFailsVendorQualityCheck()) });\n\n            if (this.isPaired()) {\n                nameValues.push(\"<hr>\");\n                nameValues.push({ name: 'First in Pair', value: !this.isSecondOfPair(), borderTop: true });\n                nameValues.push({ name: 'Mate is Mapped', value: yesNo(this.isMateMapped()) });\n                if (this.isMateMapped()) {\n                    nameValues.push({ name: 'Mate Chromosome', value: this.mate.chr });\n                    nameValues.push({ name: 'Mate Start', value: this.mate.position + 1 });\n                    nameValues.push({ name: 'Mate Strand', value: true === this.mate.strand ? '(+)' : '(-)' });\n                    nameValues.push({ name: 'Insert Size', value: this.fragmentLength });\n                    // Mate Start\n                    // Mate Strand\n                    // Insert Size\n                }\n                // First in Pair\n                // Pair Orientation\n            }\n\n            nameValues.push(\"<hr>\");\n            tagDict = this.tags();\n            isFirst = true;\n            for (var key in tagDict) {\n\n                if (tagDict.hasOwnProperty(key)) {\n\n                    if (isFirst) {\n                        nameValues.push({ name: key, value: tagDict[key], borderTop: true });\n                        isFirst = false;\n                    } else {\n                        nameValues.push({ name: key, value: tagDict[key] });\n                    }\n                }\n            }\n\n            return nameValues;\n\n            function yesNo(bool) {\n                return bool ? 'Yes' : 'No';\n            }\n        }\n    }]);\n\n    return BamAlignment;\n}();\n\nfunction readFloat(ba, offset) {\n\n    var dataView = new DataView(ba.buffer),\n        littleEndian = true;\n\n    return dataView.getFloat32(offset, littleEndian);\n}\n\nvar BamFilter = function () {\n    function BamFilter(options) {\n        _classCallCheck(this, BamFilter);\n\n        if (!options) options = {};\n        this.vendorFailed = options.vendorFailed === undefined ? true : options.vendorFailed;\n        this.duplicates = options.duplicates === undefined ? true : options.duplicates;\n        this.secondary = options.secondary || false;\n        this.supplementary = options.supplementary || false;\n        this.mqThreshold = options.mqThreshold === undefined ? 0 : options.mqThreshold;\n    }\n\n    _createClass(BamFilter, [{\n        key: \"pass\",\n        value: function pass(alignment) {\n\n            if (this.vendorFailed && alignment.isFailsVendorQualityCheck()) return false;\n            if (this.duplicates && alignment.isDuplicate()) return false;\n            if (this.secondary && alignment.isSecondary()) return false;\n            if (this.supplementary && alignment.isSupplementary()) return false;\n            if (alignment.mq < this.mqThreshold) return false;\n\n            return true;\n        }\n    }]);\n\n    return BamFilter;\n}();\n\nvar BLOCK_HEADER_LENGTH = 18;\nvar BLOCK_LENGTH_OFFSET = 16; // Location in the gzip block of the total block size (actually total block size - 1)\nvar BLOCK_FOOTER_LENGTH = 8; // Number of bytes that follow the deflated data\nvar MAX_COMPRESSED_BLOCK_SIZE = 64 * 1024; // We require that a compressed block (including header and footer, be <= this)\nvar GZIP_OVERHEAD = BLOCK_HEADER_LENGTH + BLOCK_FOOTER_LENGTH + 2; // Gzip overhead is the header, the footer, and the block size (encoded as a short).\nvar GZIP_ID1 = 31; // Magic number\nvar GZIP_ID2 = 139; // Magic number\nvar GZIP_FLG = 4; // FEXTRA flag means there are optional fields\n\n\n// Uncompress data,  assumed to be series of bgzipped blocks\n// Code is based heavily on bam.js, part of the Dalliance Genome Explorer,  (c) Thomas Down 2006-2001.\n\nvar unbgzf = function unbgzf(data, lim) {\n    _classCallCheck(this, unbgzf);\n\n    for (var a in data) {\n        console.log(a);\n    }\n    var oBlockList = [],\n        ptr = [0],\n        totalSize = 0;\n\n    lim = lim || data.byteLength - 18;\n\n    while (ptr[0] < lim) {\n\n        var ba = new Uint8Array(data, ptr[0], 18);\n\n        var xlen = ba[11] << 8 | ba[10];\n        var si1 = ba[12];\n        var si2 = ba[13];\n        var slen = ba[15] << 8 | ba[14];\n        var bsize = ba[17] << 8 | ba[16] + 1;\n\n        var start = 12 + xlen + ptr[0]; // Start of CDATA\n        var length = data.byteLength - start;\n\n        if (length < bsize + 8) break;\n\n        var unc = (0, _inflate.jszlib_inflate_buffer)(data, start, length, ptr);\n\n        ptr[0] += 8; // Skipping CRC-32 and size of uncompressed data\n\n        totalSize += unc.byteLength;\n        oBlockList.push(unc);\n    }\n\n    // Concatenate decompressed blocks\n    if (oBlockList.length == 1) {\n        return oBlockList[0];\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = new Uint8Array(oBlockList[i]);\n            (0, _inflate.arrayCopy)(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n};\n\nvar AlignmentContainer = function () {\n    function AlignmentContainer(chr, start, end, samplingWindowSize, samplingDepth, pairsSupported, parent) {\n        _classCallCheck(this, AlignmentContainer);\n\n        this.parent = parent;\n        this.chr = chr;\n        this.start = start;\n        this.end = end;\n        this.length = end - start;\n        if (!this.parent.cm_class) {\n            this.coverageMap = new CoverageMap(chr, start, end, parent);\n        } else {\n            this.coverageMap = new this.parent.cm_class(chr, start, end, parent);\n        }\n\n        this.alignments = [];\n        this.raw_alignments = [];\n        this.downsampledIntervals = [];\n\n        this.samplingWindowSize = samplingWindowSize === undefined ? 100 : samplingWindowSize;\n        this.samplingDepth = samplingDepth === undefined ? 50 : samplingDepth;\n\n        this.pairsSupported = pairsSupported;\n        this.paired = false; // false until proven otherwise\n        this.pairsCache = {}; // working cache of paired alignments by read name\n\n        this.downsampledReads = new Set();\n\n        this.currentBucket = new DownsampleBucket(this.start, this.start + this.samplingWindowSize, this);\n\n        this.filter = function filter(alignment) {\n            // TODO -- pass this in\n            return alignment.isMapped() && !alignment.isFailsVendorQualityCheck();\n        };\n    }\n\n    _createClass(AlignmentContainer, [{\n        key: \"push\",\n        value: function push(alignment) {\n\n            if (this.filter(alignment) === false) return;\n            if (alignment.tagBA) {\n                alignment.tagBA = decodeTags(alignment.tagBA);\n            }\n            if (this.parent.keep_raw_alignments) {\n                this.raw_alignments.push(alignment);\n            }\n\n            this.coverageMap.incCounts(alignment);\n            if (!this.parent.display_alignments) {\n                return;\n            }\n\n            // Count coverage before any downsampling\n\n            if (this.pairsSupported && this.downsampledReads.has(alignment.readName)) {\n                return; // Mate already downsampled -- pairs are treated as a single alignment for downsampling\n            }\n\n            if (alignment.start >= this.currentBucket.end) {\n                finishBucket.call(this);\n                this.currentBucket = new DownsampleBucket(alignment.start, alignment.start + this.samplingWindowSize, this);\n            }\n\n            this.currentBucket.addAlignment(alignment);\n        }\n    }, {\n        key: \"forEach\",\n        value: function forEach(callback) {\n            this.alignments.forEach(callback);\n        }\n    }, {\n        key: \"finish\",\n        value: function finish() {\n\n            if (this.currentBucket !== undefined) {\n                finishBucket.call(this);\n            }\n\n            // Need to remove partial pairs whose mate was downsampled\n            if (this.pairsSupported) {\n                var tmp = [],\n                    ds = this.downsampledReads;\n\n                this.alignments.forEach(function (a) {\n                    if (!ds.has(a.readName)) {\n                        tmp.push(a);\n                    }\n                });\n                this.alignments = tmp;\n            }\n\n            this.alignments.sort(function (a, b) {\n                return a.start - b.start;\n            });\n\n            this.pairsCache = undefined;\n            this.downsampledReads = undefined;\n        }\n    }, {\n        key: \"contains\",\n        value: function contains(chr, start, end) {\n            return this.chr == chr && this.start <= start && this.end >= end;\n        }\n    }, {\n        key: \"hasDownsampledIntervals\",\n        value: function hasDownsampledIntervals() {\n            return this.downsampledIntervals && this.downsampledIntervals.length > 0;\n        }\n    }]);\n\n    return AlignmentContainer;\n}();\n\nfunction finishBucket() {\n    this.alignments = this.alignments.concat(this.currentBucket.alignments);\n    if (this.currentBucket.downsampledCount > 0) {\n        this.downsampledIntervals.push(new DownsampledInterval(this.currentBucket.start, this.currentBucket.end, this.currentBucket.downsampledCount));\n    }\n    this.paired = this.paired || this.currentBucket.paired;\n}\n\nvar DownsampleBucket = function () {\n    function DownsampleBucket(start, end, alignmentContainer) {\n        _classCallCheck(this, DownsampleBucket);\n\n        this.start = start;\n        this.end = end;\n        this.alignments = [];\n        this.downsampledCount = 0;\n        this.samplingDepth = alignmentContainer.samplingDepth;\n        this.pairsSupported = alignmentContainer.pairsSupported;\n        this.downsampledReads = alignmentContainer.downsampledReads;\n        this.pairsCache = alignmentContainer.pairsCache;\n    }\n\n    _createClass(DownsampleBucket, [{\n        key: \"addAlignment\",\n        value: function addAlignment(alignment) {\n\n            var samplingProb, idx, replacedAlignment, pairedAlignment;\n\n            if (this.alignments.length < this.samplingDepth) {\n\n                if (this.pairsSupported && canBePaired(alignment)) {\n                    pairedAlignment = this.pairsCache[alignment.readName];\n                    if (pairedAlignment) {\n                        //Not subject to downsampling, just update the existing alignment\n                        pairedAlignment.setSecondAlignment(alignment);\n                        this.pairsCache[alignment.readName] = undefined; // Don't need to track this anymore. NOTE: Don't \"delete\", causes runtime performance issues\n                    } else {\n                        // First alignment in a pair\n                        pairedAlignment = new PairedAlignment(alignment);\n                        this.paired = true;\n                        this.pairsCache[alignment.readName] = pairedAlignment;\n                        this.alignments.push(pairedAlignment);\n                    }\n                } else {\n                    this.alignments.push(alignment);\n                }\n            } else {\n\n                samplingProb = this.samplingDepth / (this.samplingDepth + this.downsampledCount + 1);\n\n                if (Math.random() < samplingProb) {\n\n                    idx = Math.floor(Math.random() * (this.alignments.length - 1));\n                    replacedAlignment = this.alignments[idx]; // To be replaced\n\n                    if (this.pairsSupported && canBePaired(alignment)) {\n\n                        if (this.pairsCache[replacedAlignment.readName] !== undefined) {\n                            this.pairsCache[replacedAlignment.readName] = undefined;\n                        }\n\n                        pairedAlignment = new PairedAlignment(alignment);\n                        this.paired = true;\n                        this.pairsCache[alignment.readName] = pairedAlignment;\n                        this.alignments[idx] = pairedAlignment;\n                    } else {\n                        this.alignments[idx] = alignment;\n                    }\n                    this.downsampledReads.add(replacedAlignment.readName);\n                } else {\n                    this.downsampledReads.add(alignment.readName);\n                }\n\n                this.downsampledCount++;\n            }\n        }\n    }]);\n\n    return DownsampleBucket;\n}();\n\n// TODO -- refactor this to use an object, rather than an array,  if end-start is > some threshold\n\n\nvar CoverageMap = function () {\n    function CoverageMap(chr, start, end, parent) {\n        _classCallCheck(this, CoverageMap);\n\n        this.chr = chr;\n        this.bpStart = start;\n        this.length = end - start;\n        this.parent = parent;\n        this.coverage = new Array(this.length);\n\n        this.maximum = 0;\n    }\n\n    _createClass(CoverageMap, [{\n        key: \"incCounts\",\n        value: function incCounts(alignment) {\n\n            var self = this;\n\n            if (alignment.blocks === undefined) {\n\n                incBlockCount(alignment);\n            } else {\n                alignment.blocks.forEach(function (block) {\n                    incBlockCount(block);\n                });\n            }\n\n            function incBlockCount(block) {\n\n                var key, base, i, j, q;\n\n                for (i = block.start - self.bpStart, j = 0; j < block.len; i++, j++) {\n\n                    if (!self.coverage[i]) {\n                        self.coverage[i] = new Coverage();\n                    }\n\n                    base = block.seq.charAt(j);\n                    key = alignment.strand ? \"pos\" + base : \"neg\" + base;\n                    q = block.qual[j];\n\n                    self.coverage[i][key] += 1;\n                    self.coverage[i][\"qual\" + base] += q;\n\n                    self.coverage[i].total += 1;\n                    self.coverage[i].qual += q;\n\n                    self.maximum = Math.max(self.coverage[i].total, self.maximum);\n                }\n            }\n        }\n    }]);\n\n    return CoverageMap;\n}();\n\nCoverageMap.threshold = 0.2;\nCoverageMap.qualityWeight = true;\n\nvar Coverage = function () {\n    function Coverage() {\n        _classCallCheck(this, Coverage);\n\n        this.posA = 0;\n        this.negA = 0;\n\n        this.posT = 0;\n        this.negT = 0;\n\n        this.posC = 0;\n        this.negC = 0;\n        this.posG = 0;\n\n        this.negG = 0;\n\n        this.posN = 0;\n        this.negN = 0;\n\n        this.pos = 0;\n        this.neg = 0;\n\n        this.qualA = 0;\n        this.qualT = 0;\n        this.qualC = 0;\n        this.qualG = 0;\n        this.qualN = 0;\n\n        this.qual = 0;\n\n        this.total = 0;\n    }\n\n    _createClass(Coverage, [{\n        key: \"isMismatch\",\n        value: function isMismatch(refBase) {\n\n            var myself = this,\n                mismatchQualitySum,\n                threshold = CoverageMap.threshold * (CoverageMap.qualityWeight && this.qual ? this.qual : this.total);\n\n            mismatchQualitySum = 0;\n            [\"A\", \"T\", \"C\", \"G\"].forEach(function (base) {\n\n                if (base !== refBase) {\n                    mismatchQualitySum += CoverageMap.qualityWeight && myself.qual ? myself[\"qual\" + base] : myself[\"pos\" + base] + myself[\"neg\" + base];\n                }\n            });\n\n            return mismatchQualitySum >= threshold;\n        }\n    }]);\n\n    return Coverage;\n}();\n\nvar DownsampledInterval = function () {\n    function DownsampledInterval(start, end, counts) {\n        _classCallCheck(this, DownsampledInterval);\n\n        this.start = start;\n        this.end = end;\n        this.counts = counts;\n    }\n\n    _createClass(DownsampledInterval, [{\n        key: \"popupData\",\n        value: function popupData(genomicLocation) {\n            return [{ name: \"start\", value: this.start + 1 }, { name: \"end\", value: this.end }, { name: \"# downsampled:\", value: this.counts }];\n        }\n    }]);\n\n    return DownsampledInterval;\n}();\n\nvar PairedAlignment = function () {\n    function PairedAlignment(firstAlignment) {\n        _classCallCheck(this, PairedAlignment);\n\n        this.firstAlignment = firstAlignment;\n        this.chr = firstAlignment.chr;\n        this.readName = firstAlignment.readName;\n\n        if (firstAlignment.start < firstAlignment.mate.position) {\n            this.start = firstAlignment.start;\n            this.end = Math.max(firstAlignment.mate.position, firstAlignment.start + firstAlignment.lengthOnRef); // Approximate\n            this.connectingStart = firstAlignment.start + firstAlignment.lengthOnRef;\n            this.connectingEnd = firstAlignment.mate.position;\n        } else {\n            this.start = firstAlignment.mate.position;\n            this.end = firstAlignment.start + firstAlignment.lengthOnRef;\n            this.connectingStart = firstAlignment.mate.position;\n            this.connectingEnd = firstAlignment.start;\n        }\n        this.lengthOnRef = this.end - this.start;\n    }\n\n    _createClass(PairedAlignment, [{\n        key: \"setSecondAlignment\",\n        value: function setSecondAlignment(alignment) {\n\n            // TODO -- check the chrs are equal,  error otherwise\n            this.secondAlignment = alignment;\n\n            if (alignment.start > this.firstAlignment.start) {\n                this.end = alignment.start + alignment.lengthOnRef;\n                this.connectingEnd = alignment.start;\n            } else {\n                this.start = alignment.start;\n                this.connectingStart = alignment.start + alignment.lengthOnRef;\n            }\n            this.lengthOnRef = this.end - this.start;\n        }\n    }, {\n        key: \"popupData\",\n        value: function popupData(genomicLocation) {\n\n            var nameValues = [];\n\n            nameValues = nameValues.concat(this.firstAlignment.popupData(genomicLocation));\n\n            if (this.secondAlignment) {\n                nameValues.push(\"-------------------------------\");\n                nameValues = nameValues.concat(this.secondAlignment.popupData(genomicLocation));\n            }\n            return nameValues;\n        }\n    }, {\n        key: \"isPaired\",\n        value: function isPaired() {\n            return true; // By definition\n        }\n    }, {\n        key: \"firstOfPairStrand\",\n        value: function firstOfPairStrand() {\n            if (this.firstAlignment.isFirstOfPair()) {\n                return this.firstAlignment.strand;\n            } else if (this.secondAlignment) {\n                return this.secondAlignment.strand;\n            } else {\n                return this.firstAlignment.strand; // This assumes inward pointing pairs\n            }\n        }\n    }]);\n\n    return PairedAlignment;\n}();\n\nvar BamAlignmentRow = function () {\n    function BamAlignmentRow() {\n        _classCallCheck(this, BamAlignmentRow);\n\n        this.alignments = [];\n        this.score = undefined;\n    }\n\n    _createClass(BamAlignmentRow, [{\n        key: \"findCenterAlignment\",\n        value: function findCenterAlignment(bpStart, bpEnd) {\n\n            var centerAlignment = undefined;\n\n            // find single alignment that overlaps sort location\n            this.alignments.forEach(function (a) {\n\n                if (undefined === centerAlignment) {\n\n                    if (a.start + a.lengthOnRef < bpStart || a.start > bpEnd) {\n                        // do nothing\n                    } else {\n                        centerAlignment = a;\n                    }\n                }\n            });\n\n            return centerAlignment;\n        }\n    }, {\n        key: \"updateScore\",\n        value: function updateScore(genomicLocation, genomicInterval, sortOption) {\n\n            this.score = this.caculateScore(genomicLocation, 1 + genomicLocation, genomicInterval, sortOption);\n        }\n    }, {\n        key: \"caculateScore\",\n        value: function caculateScore(bpStart, bpEnd, genomicInterval, sortOption) {\n\n            var baseScore, alignment;\n\n            alignment = this.findCenterAlignment(bpStart, bpEnd);\n            if (undefined === alignment) {\n                return Number.MAX_VALUE;\n            }\n\n            if (\"NUCLEOTIDE\" === sortOption.sort) {\n\n                baseScore = undefined;\n\n                alignment.blocks.forEach(function (block) {\n\n                    var sequence = genomicInterval.sequence,\n                        coverageMap = genomicInterval.coverageMap,\n                        reference,\n                        base,\n                        coverage,\n                        count,\n                        phred;\n\n                    if (\"*\" !== block.seq) {\n\n                        for (var i = 0, indexReferenceSequence = block.start - genomicInterval.start, bpBlockSequence = block.start, lengthBlockSequence = block.seq.length; i < lengthBlockSequence; i++, indexReferenceSequence++, bpBlockSequence++) {\n\n                            if (bpStart === bpBlockSequence) {\n\n                                reference = sequence.charAt(indexReferenceSequence);\n                                base = block.seq.charAt(i);\n\n                                if (base === \"=\") {\n                                    base = reference;\n                                }\n\n                                if (base === 'N') {\n                                    baseScore = 2;\n                                } else if (base === reference) {\n                                    baseScore = 3;\n                                } else if (base === \"X\" || base !== reference) {\n\n                                    coverage = coverageMap.coverage[bpBlockSequence - coverageMap.bpStart];\n                                    count = coverage[\"pos\" + base] + coverage[\"neg\" + base];\n                                    phred = coverage.qual ? coverage.qual : 0;\n                                    baseScore = -(count + phred / 1000.0);\n                                } else {\n                                    console.log(\"BamAlignmentRow.caculateScore - huh?\");\n                                }\n                            } // bpStart === bpBlockSequence\n                        } // block.seq.length\n                    } else {\n                        baseScore = 3;\n                    }\n                });\n\n                return undefined === baseScore ? Number.MAX_VALUE : baseScore;\n            } else if (\"STRAND\" === sortOption.sort) {\n\n                return alignment.strand ? 1 : -1;\n            } else if (\"START\" === sortOption.sort) {\n\n                return alignment.start;\n            }\n\n            return Number.MAX_VALUE;\n        }\n    }]);\n\n    return BamAlignmentRow;\n}();\n\nvar bgzBlockSize = function bgzBlockSize(data) {\n    var ba = new Uint8Array(data);\n    var bsize = ba[17] << 8 | ba[16] + 1;\n    return bsize;\n};\n\nfunction decodeTags(ba) {\n\n    var p = 0,\n        len = ba.length,\n        tags = {};\n\n    while (p < len) {\n        var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);\n        var type = String.fromCharCode(ba[p + 2]);\n        var value;\n\n        if (type == 'A') {\n            value = String.fromCharCode(ba[p + 3]);\n            p += 4;\n        } else if (type === 'i' || type === 'I') {\n            value = readInt(ba, p + 3);\n            p += 7;\n        } else if (type === 'c' || type === 'C') {\n            value = ba[p + 3];\n            p += 4;\n        } else if (type === 's' || type === 'S') {\n            value = readShort(ba, p + 3);\n            p += 5;\n        } else if (type === 'f') {\n            // TODO 'FIXME need floats';\n            value = readFloat(ba, p + 3);\n            p += 7;\n        } else if (type === 'Z') {\n            p += 3;\n            value = '';\n            for (;;) {\n                var cc = ba[p++];\n                if (cc === 0) {\n                    break;\n                } else {\n                    value += String.fromCharCode(cc);\n                }\n            }\n        } else {\n            //'Unknown type ' + type;\n            value = 'Error unknown type: ' + type;\n            tags[tag] = value;\n            break;\n        }\n        tags[tag] = value;\n    }\n    return tags;\n}\n\nexports.loadBamIndex = loadBamIndex;\nexports.BamReader = BamReader;\nexports.BamSource = BamSource;\nexports.BamFilter = BamFilter;\nexports.BamAlignment = BamAlignment;\nexports.AlignmentContainer = AlignmentContainer;\nexports.PairedAlignment = PairedAlignment;\nexports.bgzBlockSize = bgzBlockSize;\nexports.CoverageMap = CoverageMap;\nexports.Coverage = Coverage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/bam.js\n");

/***/ }),

/***/ "../MLVPanel/src/bam_track.js":
/*!*******************************!*\
  !*** .Panel/src/bam_track.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.AlignmentTrack = exports.CoverageTrack = exports.BAMTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tracks = __webpack_require__(/*! ./tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nvar _bam = __webpack_require__(/*! ./bam.js */ \"../MLVPanel/src/bam.js\");\n\nvar _utils = __webpack_require__(/*! ./utils.js */ \"../MLVPanel/src/utils.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The MIT License (MIT)\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2014 Broad Institute\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * of this software and associated documentation files (the \"Software\"), to deal\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * in the Software without restriction, including without limitation the rights\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * copies of the Software, and to permit persons to whom the Software is\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * furnished to do so, subject to the following conditions:\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * The above copyright notice and this permission notice shall be included in\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * all copies or substantial portions of the Software.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nr\nr\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar alignmentRowYInset = 0;\nvar alignmentStartGap = 5;\nvar downsampleRowHeight = 5;\nvar DEFAULT_COVERAGE_TRACK_HEIGHT = 50;\n\nvar BAMTrack = function (_MLVTrack) {\n    _inherits(BAMTrack, _MLVTrack);\n\n    function BAMTrack(config) {\n        _classCallCheck(this, BAMTrack);\n\n        if (!config.color) {\n            config.color = \"#D3D3D3\";\n        }\n\n        var _this = _possibleConstructorReturn(this, (BAMTrack.__proto__ || Object.getPrototypeOf(BAMTrack)).call(this, config));\n\n        _this._setFeatureSource();\n        if (_this.config.bigwig) {\n            _this.bigwig_track = new _tracks.MLVWigTrack({\n                url: _this.config.bigwig,\n                type: \"bigwig\",\n                discrete: true,\n                color: \"#D3D3D3\",\n                scale: \"dynamic\",\n                height: 100\n            });\n        }\n\n        _this.config = config;\n\n        if (config.coverageTrackHeight === undefined) {\n            config.coverageTrackHeight = DEFAULT_COVERAGE_TRACK_HEIGHT;\n        }\n\n        _this.visibilityWindow = config.visibilityWindow || 30000; // 30kb default\n\n        _this.viewAsPairs = true; //config.viewAsPairs;\n\n        _this.pairsSupported = config.pairsSupported === undefined ? true : false;\n\n        _this.color = config.color || \"rgb(185, 185, 185)\";\n\n        // sort alignment rows\n        _this.sortOption = config.sortOption || { sort: \"NUCLEOTIDE\" };\n        _this.sortDirection = true;\n\n        // filter alignments\n        _this.filterOption = config.filterOption || { name: \"mappingQuality\", params: [30, undefined] };\n        _this.display_alignments = true;\n\n        return _this;\n    }\n\n    _createClass(BAMTrack, [{\n        key: \"_setFeatureSource\",\n        value: function _setFeatureSource() {\n            this.feature_source = new _bam.BamSource(this.config, this);\n            this.feature_source.setViewAsPairs(true);\n\n            this.coverageTrack = new CoverageTrack(this.config, this);\n            this.alignmentTrack = new AlignmentTrack(this.config, this);\n        }\n    }, {\n        key: \"getFeatures\",\n        value: function getFeatures(chr, bpStart, bpEnd, force, data) {\n            if (bpEnd - bpStart > 500000 && this.bigwig_track) {\n                this.draw_bigwig = true;\n                return this.bigwig_track.getFeatures(chr, bpStart, bpEnd, force, data);\n            }\n            this.draw_bigwig = false;\n            return this.feature_source.getAlignments(chr, bpStart, bpEnd);\n        }\n\n        // Alt - Click to Sort alignment rows\n\n    }, {\n        key: \"altClick\",\n        value: function altClick(genomicLocation, event) {\n\n            this.alignmentTrack.sortAlignmentRows(genomicLocation, this.sortOption);\n\n            this.trackView.redrawTile(this.featureSource.alignmentContainer);\n            $(this.trackView.viewportDiv).scrollTop(0);\n\n            this.sortDirection = !this.sortDirection;\n        }\n    }, {\n        key: \"computePixelHeight\",\n\n\n        /**\r\n         * Optional method to compute pixel height to accomodate the list of features.  The implementation below\r\n         * has side effects (modifiying the samples hash).  This is unfortunate, but harmless.\r\n         *\r\n         * @param features\r\n         * @returns {number}\r\n         */\n        value: function computePixelHeight(alignmentContainer) {\n\n            return this.coverageTrack.computePixelHeight(alignmentContainer) + this.alignmentTrack.computePixelHeight(alignmentContainer);\n        }\n    }, {\n        key: \"drawFeatures\",\n        value: function drawFeatures(options) {\n            this.top = options.top;\n            if (this.draw_zoom_in) {\n                this.bottom = this.top + this.config.height;\n                return this.bottom;\n            }\n            if (this.draw_bigwig) {\n                this.bottom = this.bigwig_track.drawFeatures(options);\n                return;\n            }\n            if (this.coverageTrack.height > 0) {\n                this.coverageTrack.draw(options);\n            }\n\n            this.bottom = this.alignmentTrack.draw(options);\n            return this.bottom;\n        }\n    }, {\n        key: \"paintAxis\",\n        value: function paintAxis(ctx, pixelWidth, pixelHeight) {\n\n            this.coverageTrack.paintAxis(ctx, pixelWidth, this.coverageTrackHeight);\n        }\n    }, {\n        key: \"getFeatureAt\",\n        value: function getFeatureAt(genomicLocation, chr, offset, bpPerPixel) {\n            if (!this.feature_source.alignmentContainer) {\n                return null;\n            }\n            var packedAlignmentRows = this.feature_source.alignmentContainer.packedAlignmentRows,\n                downsampledIntervals = this.feature_source.alignmentContainer.downsampledIntervals,\n                packedAlignmentsIndex,\n                alignmentRow,\n                clickedObject,\n                i,\n                len,\n                tmp;\n            if (!packedAlignmentRows) {\n                return null;\n            }\n            packedAlignmentsIndex = Math.floor((offset.y - this.top - this.coverageTrack.height - alignmentRowYInset) / this.config.featureHeight);\n\n            if (packedAlignmentsIndex < 0) {\n\n                for (i = 0, len = downsampledIntervals.length; i < len; i++) {\n\n                    if (downsampledIntervals[i].start <= genomicLocation && downsampledIntervals[i].end >= genomicLocation) {\n                        clickedObject = downsampledIntervals[i];\n                        break;\n                    }\n                }\n            } else if (packedAlignmentsIndex < packedAlignmentRows.length) {\n\n                alignmentRow = packedAlignmentRows[packedAlignmentsIndex];\n\n                clickedObject = undefined;\n\n                for (i = 0, len = alignmentRow.alignments.length, tmp; i < len; i++) {\n\n                    tmp = alignmentRow.alignments[i];\n\n                    if (tmp.start <= genomicLocation && tmp.start + tmp.lengthOnRef >= genomicLocation) {\n                        clickedObject = tmp;\n                        break;\n                    }\n                }\n            }\n\n            return clickedObject;\n        }\n    }, {\n        key: \"popupData\",\n        value: function popupData(genomicLocation, xOffset, yOffset) {\n\n            if (yOffset >= this.coverageTrack.top && yOffset < this.coverageTrack.height) {\n                return this.coverageTrack.popupData(genomicLocation, xOffset, this.coverageTrack.top);\n            } else {\n                return this.alignmentTrack.popupData(genomicLocation, xOffset, yOffset - this.alignmentTrack.top);\n            }\n        }\n    }, {\n        key: \"popupMenuItems\",\n        value: function popupMenuItems(popover) {\n\n            var self = this,\n                html,\n                menuItems = [],\n                colorByMenuItems = [],\n                tagLabel = 'tag' + (self.alignmentTrack.colorByTag ? ' (' + self.alignmentTrack.colorByTag + ')' : ''),\n                selected;\n\n            colorByMenuItems.push({ key: 'none', label: 'track color' });\n\n            if (!self.viewAsPairs) {\n                colorByMenuItems.push({ key: 'strand', label: 'read strand' });\n            }\n            if (self.pairsSupported && self.alignmentTrack.hasPairs) {\n                colorByMenuItems.push({ key: 'firstOfPairStrand', label: 'first-of-pair strand' });\n            }\n            colorByMenuItems.push({ key: 'tag', label: tagLabel });\n\n            menuItems.push(igv.colorPickerMenuItem(popover, this.trackView));\n\n            menuItems.push('<div class=\"igv-track-menu-category igv-track-menu-border-top\">Color by</div>');\n\n            colorByMenuItems.forEach(function (item) {\n                selected = self.alignmentTrack.colorBy === item.key;\n                menuItems.push(colorByMarkup(item, selected));\n            });\n\n            html = [];\n            if (self.pairsSupported && self.alignmentTrack.hasPairs) {\n                html.push('<div class=\"igv-track-menu-item igv-track-menu-border-top\">');\n                html.push(true === self.viewAsPairs ? '<i class=\"fa fa-check fa-check-shim\">' : '<i class=\"fa fa-check fa-check-shim fa-check-hidden\">');\n                html.push('</i>');\n                html.push('View as pairs');\n                html.push('</div>');\n                menuItems.push({\n                    object: $(html.join('')),\n                    click: function click() {\n                        var $fa = $(this).find('i');\n\n                        popover.hide();\n\n                        self.viewAsPairs = !self.viewAsPairs;\n\n                        if (true === self.viewAsPairs) {\n                            $fa.removeClass('fa-check-hidden');\n                        } else {\n                            $fa.addClass('fa-check-hidden');\n                        }\n\n                        self.featureSource.setViewAsPairs(self.viewAsPairs);\n                        self.trackView.update();\n                    }\n                });\n            }\n\n            return menuItems;\n\n            function colorByMarkup(menuItem, showCheck, index) {\n\n                var parts = [],\n                    item = {};\n\n                //parts.push((0 === index) ? '<div class=\\\"igv-track-menu-item igv-track-menu-border-top\\\">' : '<div class=\"igv-track-menu-item\">');\n                parts.push('<div class=\"igv-track-menu-item\">');\n\n                parts.push(showCheck ? '<i class=\"fa fa-check fa-check-shim\"></i>' : '<i class=\"fa fa-check fa-check-shim fa-check-hidden\"></i>');\n\n                //parts.push('<span>');\n                //parts.push('Color by: ');\n                //parts.push('</span>');\n\n                if (menuItem.key === 'tag') {\n                    parts.push('<span id=\"color-by-tag\">');\n                } else {\n                    parts.push('<span>');\n                }\n                parts.push(menuItem.label);\n                parts.push('</span>');\n\n                parts.push('</div>');\n\n                item.object = $(parts.join(''));\n\n                item.click = function () {\n\n                    igv.popover.hide();\n\n                    if ('tag' === menuItem.key) {\n\n                        igv.dialog.configure(function () {\n                            return \"Tag Name\";\n                        }, self.alignmentTrack.colorByTag ? self.alignmentTrack.colorByTag : '', function () {\n                            var tag = igv.dialog.$dialogInput.val().trim();\n                            self.alignmentTrack.colorBy = 'tag';\n\n                            if (tag !== self.alignmentTrack.colorByTag) {\n                                self.alignmentTrack.colorByTag = igv.dialog.$dialogInput.val().trim();\n                                self.alignmentTrack.tagColors = new igv.PaletteColorTable(\"Set1\");\n                                $('#color-by-tag').text(self.alignmentTrack.colorByTag);\n                            }\n\n                            self.trackView.update();\n                        });\n\n                        igv.dialog.show($(self.trackView.trackDiv));\n                    } else {\n                        self.alignmentTrack.colorBy = menuItem.key;\n                        self.trackView.update();\n                    }\n                };\n\n                return item;\n            }\n        }\n    }]);\n\n    return BAMTrack;\n}(_tracks.MLVTrack);\n\nfunction shadedBaseColor(qual, nucleotide, genomicLocation) {\n\n    var color,\n        alpha,\n        minQ = 5,\n        //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MIN),\n    maxQ = 20,\n        //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MAX);\n    foregroundColor = [0, 255, 255],\n        //nucleotideColorComponents[nucleotide],\n    backgroundColor = [255, 255, 255]; // White\n\n\n    //if (171167156 === genomicLocation) {\n    //    // NOTE: Add 1 when presenting genomic location\n    //    console.log(\"shadedBaseColor - locus \" + igv.numberFormatter(1 + genomicLocation) + \" qual \" + qual);\n    //}\n\n    if (!foregroundColor) return;\n\n    if (qual < minQ) {\n        alpha = 0.1;\n    } else {\n        alpha = Math.max(0.1, Math.min(1.0, 0.1 + 0.9 * (qual - minQ) / (maxQ - minQ)));\n    }\n    // Round alpha to nearest 0.1\n    alpha = Math.round(alpha * 10) / 10.0;\n\n    if (alpha >= 1) {\n        color = _tracks.Graphics.nucleotideColors[nucleotide];\n    } else {\n        color = \"rgba(\" + foregroundColor[0] + \",\" + foregroundColor[1] + \",\" + foregroundColor[2] + \",\" + alpha + \")\"; //igv.getCompositeColor(backgroundColor, foregroundColor, alpha);\n    }\n    return color;\n}\n\nvar CoverageTrack = function () {\n    function CoverageTrack(config, parent) {\n        _classCallCheck(this, CoverageTrack);\n\n        this.parent = parent;\n        this.featureSource = parent.featureSource;\n\n        this.height = 20; //config.coverageTrackHeight;\n        this.dataRange = { min: 0 }; // Leav max undefined\n    }\n\n    _createClass(CoverageTrack, [{\n        key: \"computePixelHeight\",\n        value: function computePixelHeight(alignmentContainer) {\n            return this.height;\n        }\n    }, {\n        key: \"draw\",\n        value: function draw(options) {\n\n            var self = this,\n                alignmentContainer = options.features,\n                ctx = options.context,\n                bpPerPixel = options.bpPerPixel,\n                bpStart = options.bpStart,\n                pixelWidth = options.pixelWidth,\n                bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\n                coverageMap = alignmentContainer.coverageMap,\n                bp,\n                x,\n                y,\n                w,\n                h,\n                refBase,\n                i,\n                len,\n                item,\n                accumulatedHeight,\n                sequence;\n\n            if (coverageMap.refSeq) sequence = coverageMap.refSeq.toUpperCase();\n\n            this.dataRange.max = coverageMap.maximum;\n            var top = options.top;\n            options.top += this.height;\n            // paint backdrop color for all coverage buckets\n            w = Math.max(1, Math.ceil(1.0 / bpPerPixel));\n            for (i = 0, len = coverageMap.coverage.length; i < len; i++) {\n\n                bp = coverageMap.bpStart + i;\n                if (bp < bpStart) continue;\n                if (bp > bpEnd) break;\n\n                item = coverageMap.coverage[i];\n                if (!item) continue;\n\n                h = Math.round(item.total / this.dataRange.max * this.height);\n                y = this.height - h;\n                x = Math.floor((bp - bpStart) / bpPerPixel);\n\n                _tracks.Graphics.setProperties(ctx, { fillStyle: this.parent.config.color, strokeStyle: this.color });\n                _tracks.Graphics.fillRect(ctx, x, y + top, w, h);\n            }\n\n            // coverage mismatch coloring -- don't try to do this in above loop, color bar will be overwritten when w<1\n            if (sequence) {\n                for (i = 0, len = coverageMap.coverage.length; i < len; i++) {\n\n                    bp = coverageMap.bpStart + i;\n                    if (bp < bpStart) continue;\n                    if (bp > bpEnd) break;\n\n                    item = coverageMap.coverage[i];\n                    if (!item) continue;\n\n                    h = item.total / this.dataRange.max * this.height;\n                    y = this.height - h;\n                    x = Math.floor((bp - bpStart) / bpPerPixel);\n\n                    refBase = sequence[i];\n                    if (item.isMismatch(refBase)) {\n\n                        _tracks.Graphics.setProperties(ctx, { fillStyle: _tracks.Graphics.nucleotideColors[refBase] });\n                        _tracks.Graphics.fillRect(ctx, x, y + top, w, h);\n\n                        accumulatedHeight = 0.0;\n                        [\"A\", \"C\", \"T\", \"G\"].forEach(function (nucleotide) {\n\n                            var count, hh;\n\n                            count = item[\"pos\" + nucleotide] + item[\"neg\" + nucleotide];\n\n                            // non-logoritmic\n                            hh = count / self.dataRange.max * self.height;\n\n                            y = self.height - hh - accumulatedHeight;\n                            accumulatedHeight += hh;\n\n                            _tracks.Graphics.setProperties(ctx, { fillStyle: _tracks.Graphics.nucleotideColors[nucleotide] });\n                            _tracks.Graphics.fillRect(ctx, x, y + top, w, hh);\n                        });\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"popupData\",\n        value: function popupData(genomicLocation, xOffset, yOffset) {\n\n            var coverageMap = this.featureSource.alignmentContainer.coverageMap,\n                coverageMapIndex,\n                coverage,\n                nameValues = [];\n\n            coverageMapIndex = genomicLocation - coverageMap.bpStart;\n            coverage = coverageMap.coverage[coverageMapIndex];\n\n            if (coverage) {\n\n                nameValues.push(igv.browser.referenceFrame.chr + \":\" + igv.numberFormatter(1 + genomicLocation));\n\n                nameValues.push({ name: 'Total Count', value: coverage.total });\n\n                // A\n                tmp = coverage.posA + coverage.negA;\n                if (tmp > 0) tmp = tmp.toString() + \" (\" + Math.floor((coverage.posA + coverage.negA) / coverage.total * 100.0) + \"%)\";\n                nameValues.push({ name: 'A', value: tmp });\n\n                // C\n                tmp = coverage.posC + coverage.negC;\n                if (tmp > 0) tmp = tmp.toString() + \" (\" + Math.floor(tmp / coverage.total * 100.0) + \"%)\";\n                nameValues.push({ name: 'C', value: tmp });\n\n                // G\n                tmp = coverage.posG + coverage.negG;\n                if (tmp > 0) tmp = tmp.toString() + \" (\" + Math.floor(tmp / coverage.total * 100.0) + \"%)\";\n                nameValues.push({ name: 'G', value: tmp });\n\n                // T\n                tmp = coverage.posT + coverage.negT;\n                if (tmp > 0) tmp = tmp.toString() + \" (\" + Math.floor(tmp / coverage.total * 100.0) + \"%)\";\n                nameValues.push({ name: 'T', value: tmp });\n\n                // N\n                tmp = coverage.posN + coverage.negN;\n                if (tmp > 0) tmp = tmp.toString() + \" (\" + Math.floor(tmp / coverage.total * 100.0) + \"%)\";\n                nameValues.push({ name: 'N', value: tmp });\n            }\n\n            return nameValues;\n        }\n    }]);\n\n    return CoverageTrack;\n}();\n\nvar AlignmentTrack = function () {\n    function AlignmentTrack(config, parent) {\n        _classCallCheck(this, AlignmentTrack);\n\n        this.config = config;\n\n        this.parent = parent;\n        this.featureSource = parent.feature_source;\n\n        this.alignmentRowHeight = config.alignmentRowHeight || 6;\n\n        this.negStrandColor = config.negStrandColor || \"rgba(150, 150, 230, 0.75)\";\n        this.posStrandColor = config.posStrandColor || \"rgba(230, 150, 150, 0.75)\";\n        this.insertionColor = config.insertionColor || \"rgb(138, 94, 161)\";\n        this.deletionColor = config.deletionColor || \"black\";\n        this.skippedColor = config.skippedColor || \"rgb(150, 170, 170)\";\n\n        this.colorBy = config.colorBy || \"none\";\n        this.colorByTag = config.colorByTag;\n        this.bamColorTag = config.bamColorTag === undefined ? \"YC\" : config.bamColorTag;\n\n        // sort alignment rows\n        this.sortOption = config.sortOption || { sort: \"NUCLEOTIDE\" };\n\n        this.sortDirection = true;\n\n        this.hasPairs = false; // Until proven otherwise\n    }\n\n    _createClass(AlignmentTrack, [{\n        key: \"computePixelHeight\",\n        value: function computePixelHeight(alignmentContainer) {\n\n            if (alignmentContainer.packedAlignmentRows) {\n                var h = 0;\n                if (alignmentContainer.hasDownsampledIntervals()) {\n                    h += downsampleRowHeight + alignmentStartGap;\n                }\n                return h + this.config.featureHeight * alignmentContainer.packedAlignmentRows.length + 5;\n            } else {\n                return this.height;\n            }\n        }\n    }, {\n        key: \"draw\",\n        value: function draw(options) {\n\n            var self = this,\n                alignmentContainer = options.features,\n                ctx = options.context,\n                bpPerPixel = options.bpPerPixel,\n                bpStart = options.bpStart,\n                pixelWidth = options.pixelWidth,\n                bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\n                packedAlignmentRows = alignmentContainer.packedAlignmentRows,\n                sequence = alignmentContainer.sequence,\n                base_text = \"normal \" + (this.config.featureHeight - 2) + \"px Arial\";\n            if (!packedAlignmentRows) {\n                return;\n            }\n            var top = options.top;\n            if (sequence) {\n                sequence = sequence.toUpperCase();\n            }\n\n            if (false /*alignmentContainer.hasDownsampledIntervals()*/) {} else {\n                alignmentRowYInset = 3;\n            }\n\n            if (packedAlignmentRows) {\n\n                packedAlignmentRows.forEach(function renderAlignmentRow(alignmentRow, i) {\n\n                    var yRect = alignmentRowYInset + self.config.featureHeight * i + top,\n                        alignmentHeight = self.config.featureHeight - 2,\n                        i,\n                        b,\n                        alignment;\n\n                    for (i = 0; i < alignmentRow.alignments.length; i++) {\n\n                        alignment = alignmentRow.alignments[i];\n\n                        self.hasPairs = self.hasPairs || alignment.isPaired();\n\n                        if (alignment.start + alignment.lengthOnRef < bpStart) continue;\n                        if (alignment.start > bpEnd) break;\n\n                        if (true === alignment.hidden) {\n                            continue;\n                        }\n\n                        if (alignment instanceof _bam.PairedAlignment) {\n\n                            drawPairConnector(alignment, yRect, alignmentHeight);\n\n                            drawSingleAlignment(alignment.firstAlignment, yRect, alignmentHeight);\n\n                            if (alignment.secondAlignment) {\n                                drawSingleAlignment(alignment.secondAlignment, yRect, alignmentHeight);\n                            }\n                        } else {\n                            drawSingleAlignment(alignment, yRect, alignmentHeight);\n                        }\n                    }\n                });\n            }\n\n            // alignment is a PairedAlignment\n            function drawPairConnector(alignment, yRect, alignmentHeight) {\n\n                var alignmentColor = self.getAlignmentColor(alignment.firstAlignment),\n                    outlineColor = alignmentColor,\n                    xBlockStart = (alignment.connectingStart - bpStart) / bpPerPixel,\n                    xBlockEnd = (alignment.connectingEnd - bpStart) / bpPerPixel,\n                    yStrokedLine = yRect + alignmentHeight / 2;\n\n                if (alignment.connectingEnd < bpStart || alignment.connectingStart > bpEnd) return;\n\n                if (alignment.mq <= 0) {\n                    alignmentColor = _utils.Utils.addAlphaToRGB(alignmentColor, \"0.15\");\n                }\n\n                _tracks.Graphics.setProperties(ctx, { fillStyle: alignmentColor, strokeStyle: outlineColor });\n\n                _tracks.Graphics.strokeLine(ctx, xBlockStart, yStrokedLine, xBlockEnd, yStrokedLine);\n            }\n\n            function drawSingleAlignment(alignment, yRect, alignmentHeight) {\n\n                var alignmentColor = self.getAlignmentColor(alignment),\n                    outlineColor = alignmentColor,\n                    lastBlockEnd,\n                    blocks = alignment.blocks,\n                    block,\n                    b;\n\n                if (alignment.start + alignment.lengthOnRef < bpStart || alignment.start > bpEnd) return;\n\n                if (alignment.mq <= 0) {\n                    alignmentColor = _utils.Utils.addAlphaToRGB(alignmentColor, \"0.15\");\n                }\n\n                _tracks.Graphics.setProperties(ctx, { fillStyle: alignmentColor, strokeStyle: outlineColor });\n\n                for (b = 0; b < blocks.length; b++) {\n                    // Can't use forEach here -- we need ability to break\n\n                    block = blocks[b];\n\n                    if (block.start + block.len < bpStart) continue;\n\n                    drawBlock(block);\n\n                    if (block.start + block.len > bpEnd) break; // Do this after drawBlock to insure gaps are drawn\n\n\n                    if (alignment.insertions) {\n                        alignment.insertions.forEach(function (block) {\n                            var refOffset = block.start - bpStart,\n                                xBlockStart = refOffset / bpPerPixel - 1,\n                                widthBlock = 3;\n                            _tracks.Graphics.fillRect(ctx, xBlockStart, yRect - 1, widthBlock, alignmentHeight + 2, { fillStyle: self.insertionColor });\n                        });\n                    }\n                }\n\n                function drawBlock(block) {\n                    var seqOffset = block.start - alignmentContainer.start,\n                        xBlockStart = (block.start - bpStart) / bpPerPixel,\n                        xBlockEnd = (block.start + block.len - bpStart) / bpPerPixel,\n                        widthBlock = Math.max(1, xBlockEnd - xBlockStart),\n                        widthArrowHead = self.config.featureHeight / 2.0,\n                        blockSeq = block.seq.toUpperCase(),\n                        skippedColor = self.skippedColor,\n                        deletionColor = self.deletionColor,\n                        refChar,\n                        readChar,\n                        readQual,\n                        xBase,\n                        widthBase,\n                        colorBase,\n                        x,\n                        y,\n                        i,\n                        yStrokedLine = yRect + alignmentHeight / 2;\n\n                    if (block.gapType !== undefined && xBlockEnd !== undefined && lastBlockEnd !== undefined) {\n                        if (\"D\" === block.gapType) {\n                            _tracks.Graphics.strokeLine(ctx, lastBlockEnd, yStrokedLine, xBlockStart, yStrokedLine, { strokeStyle: deletionColor });\n                        } else {\n                            _tracks.Graphics.strokeLine(ctx, lastBlockEnd, yStrokedLine, xBlockStart, yStrokedLine, { strokeStyle: skippedColor });\n                        }\n                    }\n                    lastBlockEnd = xBlockEnd;\n\n                    if (true === alignment.strand && b === blocks.length - 1) {\n                        // Last block on + strand\n                        x = [xBlockStart, xBlockEnd, xBlockEnd + widthArrowHead, xBlockEnd, xBlockStart, xBlockStart];\n                        y = [yRect, yRect, yRect + alignmentHeight / 2.0, yRect + alignmentHeight, yRect + alignmentHeight, yRect];\n                        _tracks.Graphics.fillPolygon(ctx, x, y, { fillStyle: alignmentColor });\n                        if (alignment.mq <= 0) {\n                            _tracks.Graphics.strokePolygon(ctx, x, y, { strokeStyle: outlineColor });\n                        }\n                    } else if (false === alignment.strand && b === 0) {\n                        // First block on - strand\n                        x = [xBlockEnd, xBlockStart, xBlockStart - widthArrowHead, xBlockStart, xBlockEnd, xBlockEnd];\n                        y = [yRect, yRect, yRect + alignmentHeight / 2.0, yRect + alignmentHeight, yRect + alignmentHeight, yRect];\n                        _tracks.Graphics.fillPolygon(ctx, x, y, { fillStyle: alignmentColor });\n                        if (alignment.mq <= 0) {\n                            _tracks.Graphics.strokePolygon(ctx, x, y, { strokeStyle: outlineColor });\n                        }\n                    } else {\n                        //      igv.graphics.fillRect(ctx, xBlockStart, yRect, widthBlock, height, {fillStyle: \"white\"});\n                        _tracks.Graphics.fillRect(ctx, xBlockStart, yRect, widthBlock, alignmentHeight, { fillStyle: alignmentColor });\n                        if (alignment.mq <= 0) {\n                            ctx.save();\n                            ctx.strokeStyle = outlineColor;\n                            ctx.strokeRect(xBlockStart, yRect, widthBlock, alignmentHeight);\n                            ctx.restore();\n                        }\n                    }\n                    // Only do mismatch coloring if a refseq exists to do the comparison\n                    if (sequence && blockSeq !== \"*\") {\n                        for (var i = 0, len = blockSeq.length; i < len; i++) {\n                            readChar = blockSeq.charAt(i);\n                            refChar = sequence.charAt(seqOffset + i);\n                            if (readChar === \"=\") {\n                                readChar = refChar;\n                            }\n                            if (readChar === \"X\" || refChar !== readChar) {\n                                if (block.qual && block.qual.length > i) {\n                                    readQual = block.qual[i];\n                                    colorBase = shadedBaseColor(readQual, readChar, i + block.start);\n                                } else {\n                                    colorBase = _tracks.Graphics.nucleotideColors[readChar];\n                                }\n                                if (colorBase) {\n                                    xBase = (block.start + i - bpStart) / bpPerPixel;\n                                    widthBase = Math.max(1, 1 / bpPerPixel);\n                                    if (bpPerPixel < 0.15) {\n                                        _tracks.Graphics.strokeText(ctx, readChar, xBase + widthBase / 2, yRect + 2, {\n                                            strokeStyle: colorBase,\n                                            font: base_text,\n                                            textAlign: 'center',\n                                            textBaseline: 'hanging'\n                                        });\n                                    } else {\n                                        _tracks.Graphics.fillRect(ctx, xBase, yRect, widthBase, alignmentHeight, { fillStyle: colorBase });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return alignmentRowYInset + self.config.featureHeight * packedAlignmentRows.length + top;\n        }\n    }, {\n        key: \"sortAlignmentRows\",\n        value: function sortAlignmentRows(genomicLocation, sortOption) {\n\n            var self = this,\n                alignmentContainer = this.featureSource.alignmentContainer,\n                alignmentRows = alignmentContainer.packedAlignmentRows;\n\n            alignmentRows.forEach(function (alignmentRow) {\n                alignmentRow.updateScore(genomicLocation, alignmentContainer, sortOption);\n            });\n\n            alignmentRows.sort(function (a, b) {\n                return self.sortDirection ? a.score - b.score : b.score - a.score;\n            });\n        }\n    }, {\n        key: \"popupData\",\n        value: function popupData(genomicLocation, xOffset, yOffset) {\n\n            var packedAlignmentRows = this.featureSource.alignmentContainer.packedAlignmentRows,\n                downsampledIntervals = this.featureSource.alignmentContainer.downsampledIntervals,\n                packedAlignmentsIndex,\n                alignmentRow,\n                clickedObject,\n                i,\n                len,\n                tmp;\n\n            packedAlignmentsIndex = Math.floor((yOffset - alignmentRowYInset) / this.config.featureHeight);\n\n            if (packedAlignmentsIndex < 0) {\n\n                for (i = 0, len = downsampledIntervals.length; i < len; i++) {\n\n                    if (downsampledIntervals[i].start <= genomicLocation && downsampledIntervals[i].end >= genomicLocation) {\n                        clickedObject = downsampledIntervals[i];\n                        break;\n                    }\n                }\n            } else if (packedAlignmentsIndex < packedAlignmentRows.length) {\n\n                alignmentRow = packedAlignmentRows[packedAlignmentsIndex];\n\n                clickedObject = undefined;\n\n                for (i = 0, len = alignmentRow.alignments.length, tmp; i < len; i++) {\n\n                    tmp = alignmentRow.alignments[i];\n\n                    if (tmp.start <= genomicLocation && tmp.start + tmp.lengthOnRef >= genomicLocation) {\n                        clickedObject = tmp;\n                        break;\n                    }\n                }\n            }\n\n            if (clickedObject) {\n                return clickedObject.popupData(genomicLocation);\n            } else {\n                return [];\n            }\n        }\n    }, {\n        key: \"getAlignmentColor\",\n        value: function getAlignmentColor(alignment) {\n\n            var alignmentTrack = this,\n                option = alignmentTrack.colorBy,\n                tagValue,\n                color,\n                strand;\n\n            color = alignmentTrack.parent.config.color; // default\n\n            switch (option) {\n\n                case \"strand\":\n                    color = alignment.strand ? alignmentTrack.posStrandColor : alignmentTrack.negStrandColor;\n                    break;\n                case \"firstOfPairStrand\":\n\n                    if (alignment instanceof _bam.PairedAlignment) {\n                        color = alignment.firstOfPairStrand() ? alignmentTrack.posStrandColor : alignmentTrack.negStrandColor;\n                    } else if (alignment.isPaired()) {\n\n                        if (alignment.isFirstOfPair()) {\n                            color = alignment.strand ? alignmentTrack.posStrandColor : alignmentTrack.negStrandColor;\n                        } else if (alignment.isSecondOfPair()) {\n                            color = alignment.strand ? alignmentTrack.negStrandColor : alignmentTrack.posStrandColor;\n                        } else {\n                            console.log(\"ERROR. Paired alignments are either first or second.\");\n                        }\n                    }\n                    break;\n\n                case \"tag\":\n\n                    tagValue = alignment.tags()[alignmentTrack.colorByTag];\n                    if (tagValue !== undefined) {\n\n                        if (alignmentTrack.bamColorTag === alignmentTrack.colorByTag) {\n                            // UCSC style color option\n                            color = \"rgb(\" + tagValue + \")\";\n                        } else {\n                            color = alignmentTrack.tagColors.getColor(tagValue);\n                        }\n                    }\n                    break;\n                default:\n                    color = alignmentTrack.parent.config.color;\n            }\n            return color;\n        }\n    }], [{\n        key: \"doSortAlignmentRows\",\n        value: function doSortAlignmentRows(genomicLocation, genomicInterval, sortOption, sortDirection) {\n\n            var alignmentRows = genomicInterval.packedAlignmentRows,\n                sequence = genomicInterval.sequence;\n\n            if (sequence) {\n                sequence = sequence.toUpperCase();\n            } else {\n                console.log(\"No sequence, no traversal. No discussion!\");\n                return;\n            }\n\n            alignmentRows.forEach(function (alignmentRow) {\n                alignmentRow.updateScore(genomicLocation, genomicInterval, sortOption);\n            });\n\n            alignmentRows.sort(function (a, b) {\n                return sortDirection ? a.score - b.score : b.score - a.score;\n            });\n        }\n    }]);\n\n    return AlignmentTrack;\n}();\n\nBAMTrack.filters = {\n\n    noop: function noop() {\n        return function (alignment) {\n            return false;\n        };\n    },\n\n    strand: function strand(_strand) {\n        return function (alignment) {\n            return alignment.strand === _strand;\n        };\n    },\n\n    mappingQuality: function mappingQuality(lower, upper) {\n        return function (alignment) {\n\n            if (lower && alignment.mq < lower) {\n                return true;\n            }\n\n            if (upper && alignment.mq > upper) {\n                return true;\n            }\n\n            return false;\n        };\n    }\n};\n\n_tracks.MLVTrack.custom_tracks[\"bam\"] = BAMTrack;\n\n_tracks.MLVTrack.track_types[\"bam\"] = {\n    \"class\": BAMTrack,\n    name: \"BAM\"\n};\n\nexports.BAMTrack = BAMTrack;\nexports.CoverageTrack = CoverageTrack;\nexports.AlignmentTrack = AlignmentTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/bam_track.js\n");

/***/ }),

/***/ "../MLVPanel/src/bigwig.js":
/*!****************************!*\
  !*** .Panel/src/bigwig.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BinaryParser = exports.BWSource = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nhe MIT License (MIT)\r\nr\nopyright (c) 2014 Broad Institute\r\nr\nermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nr\nhe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\nr\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nr\nr\nr\nr\nr\nn\n//import {pako} from \"./vendor/pako_inflate.js\";\n\n\nvar _igvxhr = __webpack_require__(/*! ./igvxhr.js */ \"../MLVPanel/src/igvxhr.js\");\n\nvar _zlib_and_gzip = __webpack_require__(/*! ./vendor/zlib_and_gzip.js */ \"../MLVPanel/src/vendor/zlib_and_gzip.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//***********js/bigwig/bufferedReader.js*****************\nvar BufferedReader = function () {\n    function BufferedReader(config, contentLength, bufferSize) {\n        _classCallCheck(this, BufferedReader);\n\n        this.path = config.url;\n        this.contentLength = contentLength;\n        this.bufferSize = bufferSize ? bufferSize : 512000;\n        this.range = { start: -1, size: -1 };\n        this.config = config;\n    }\n\n    /**\r\n     *\r\n     * @param requestedRange - byte rangeas {start, size}\r\n     * @param fulfill - function to receive result\r\n     * @param asUint8 - optional flag to return result as an UInt8Array\r\n     */\n\n\n    _createClass(BufferedReader, [{\n        key: \"dataViewForRange\",\n        value: function dataViewForRange(requestedRange, asUint8) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                var hasData = self.data && self.range.start <= requestedRange.start && self.range.start + self.range.size >= requestedRange.start + requestedRange.size,\n                    bufferSize,\n                    loadRange;\n\n                if (hasData) {\n                    subbuffer(self, requestedRange, asUint8);\n                } else {\n                    // Expand buffer size if needed, but not beyond content length\n                    bufferSize = Math.max(self.bufferSize, requestedRange.size);\n\n                    if (self.contentLength > 0 && requestedRange.start + bufferSize > self.contentLength) {\n                        loadRange = { start: requestedRange.start };\n                    } else {\n                        loadRange = { start: requestedRange.start, size: bufferSize };\n                    }\n\n                    _igvxhr.igvxhr.loadArrayBuffer(self.path, Object.assign(self.config, { range: loadRange })).then(function (arrayBuffer) {\n                        self.data = arrayBuffer;\n                        self.range = loadRange;\n                        subbuffer(self, requestedRange, asUint8);\n                    }).catch(reject);\n                }\n\n                function subbuffer(bufferedReader, requestedRange, asUint8) {\n\n                    var len = bufferedReader.data.byteLength,\n                        bufferStart = requestedRange.start - bufferedReader.range.start,\n                        result = asUint8 ? new Uint8Array(bufferedReader.data, bufferStart, len - bufferStart) : new DataView(bufferedReader.data, bufferStart, len - bufferStart);\n                    fulfill(result);\n                }\n            });\n        }\n    }]);\n\n    return BufferedReader;\n}();\n\n//**********js/bigwig/bwSource.js***************\n\n\nvar BWSource = function () {\n    function BWSource(config, create_feature_function) {\n        _classCallCheck(this, BWSource);\n\n        this.reader = new BWReader(config);\n        this.bufferedReader = new BufferedReader(config);\n        if (!create_feature_function) {\n            this.create_feature = BWSource.createFeature;\n        } else {\n            this.create_feature = create_feature_function;\n        }\n    }\n\n    /**\r\n    * Creates a panel\r\n    * @param {string} chr - The chromosome\r\n    * @param {int} bpStart The starting postition \r\n    * @param {int} bpEnd - The end of the region to show\r\n    * @param {boolean} use_existing - If true then the cached feature will be used- only used\r\n    * if the co-oridinates have not changed. Although, the BWreader has a cache, it is sometimes\r\n    * ignored and features are re-fetched for the same region\r\n    * @param {object} data - Should contain pixelWidth- the width of the entire canvas and \r\n    * bpPerPixel.\r\n    */\n\n\n    _createClass(BWSource, [{\n        key: \"getFeatures\",\n        value: function getFeatures(chr, bpStart, bpEnd, use_existing, data) {\n            this.st = new Date().getTime();\n            var self = this;\n            return new Promise(function (fulfill, reject) {\n                if (self.features && use_existing) {\n                    fulfill(self.features);\n                    return;\n                }\n                self.reader.getZoomHeaders().then(function (zoomLevelHeaders) {\n\n                    // Select a biwig \"zoom level\" appropriate for the current resolution\n                    var bwReader = self.reader,\n                        bufferedReader = self.bufferedReader,\n                        bpp = data.bpPerPixel,\n                        zoomLevelHeader = BWSource.zoomLevelForScale(bpp, zoomLevelHeaders),\n                        treeOffset;\n\n                    if (zoomLevelHeader && bwReader.type === \"BigWig\") {\n                        treeOffset = zoomLevelHeader.indexOffset;\n                        self.decodeFunction = BWSource.decodeZoomData;\n                    } else {\n                        treeOffset = bwReader.header.fullIndexOffset;\n                        if (bwReader.type === \"BigWig\") {\n                            self.decodeFunction = BWSource.decodeWigData;\n                        } else {\n                            self.decodeFunction = self.decodeBedData;\n                        }\n                    }\n\n                    bwReader.loadRPTree(treeOffset).then(function (rpTree) {\n\n                        var chrIdx = self.reader.chromTree.dictionary[chr];\n                        if (chrIdx === undefined) {\n                            fulfill(null);\n                        } else {\n\n                            rpTree.findLeafItemsOverlapping(chrIdx, bpStart, bpEnd).then(function (leafItems) {\n\n                                var promises = [];\n\n                                if (!leafItems || leafItems.length == 0) fulfill([]);\n\n                                leafItems.forEach(function (item) {\n\n                                    promises.push(new Promise(function (fulfill, reject) {\n                                        var features = [];\n\n                                        bufferedReader.dataViewForRange({\n                                            start: item.dataOffset,\n                                            size: item.dataSize\n                                        }, true).then(function (uint8Array) {\n\n                                            var inflate = new _zlib_and_gzip.Zlib.Inflate(uint8Array);\n                                            var plain = inflate.decompress();\n\n                                            //var plain = pako.inflate(uint8Array);\n                                            self.decodeFunction(new DataView(plain.buffer), chr, chrIdx, bpStart, bpEnd, features);\n\n                                            fulfill(features);\n                                        }).catch(reject);\n                                    }));\n                                });\n\n                                Promise.all(promises).then(function (featureArrays) {\n                                    var en = new Date().getTime();\n                                    var e = en - self.st;\n                                    var a = bpp;\n                                    //console.log(e);\n                                    var i,\n                                        allFeatures = featureArrays[0];\n                                    if (featureArrays.length > 1) {\n                                        for (i = 1; i < featureArrays.length; i++) {\n                                            allFeatures = allFeatures.concat(featureArrays[i]);\n                                        }\n                                    }\n                                    allFeatures.sort(function (a, b) {\n                                        return a.start - b.start;\n                                    });\n                                    self.features = allFeatures;\n                                    fulfill(allFeatures);\n                                }).catch(reject);\n                            }).catch(function (error) {\n                                reject(error);\n                            });\n                        }\n                    }).catch(function (error) {\n                        reject(error);\n                    });\n                }).catch(function (error) {\n                    reject(error);\n                });\n            });\n        }\n    }, {\n        key: \"getDefaultRange\",\n        value: function getDefaultRange() {\n\n            if (this.reader.totalSummary != undefined) {\n                return this.reader.totalSummary.defaultRange;\n            } else {\n                return undefined;\n            }\n        }\n    }, {\n        key: \"decodeBedData\",\n        value: function decodeBedData(data, chr, chrIdx, bpStart, bpEnd, featureArray) {\n\n            var binaryParser = new BinaryParser(data),\n                minSize = 3 * 4 + 1,\n                // Minimum # of bytes required for a bed record\n            chromId,\n                chromStart,\n                chromEnd,\n                rest,\n                tokens,\n                feature,\n                exonCount,\n                exonSizes,\n                exonStarts,\n                exons,\n                eStart,\n                eEnd;\n\n            while (binaryParser.remLength() >= minSize) {\n\n                chromId = binaryParser.getInt();\n                if (chromId != chrIdx) continue;\n\n                chromStart = binaryParser.getInt();\n                chromEnd = binaryParser.getInt();\n                rest = binaryParser.getString();\n\n                feature = { chr: chr, start: chromStart, end: chromEnd };\n\n                if (chromStart < bpEnd && chromEnd >= bpStart) {\n                    featureArray.push(feature);\n\n                    tokens = rest.split(\"\\t\");\n                    this.create_feature(tokens, feature);\n                }\n            }\n        }\n    }], [{\n        key: \"zoomLevelForScale\",\n        value: function zoomLevelForScale(bpPerPixel, zoomLevelHeaders) {\n\n            var level = null,\n                i,\n                zl;\n\n            for (i = 0; i < zoomLevelHeaders.length; i++) {\n\n                zl = zoomLevelHeaders[i];\n\n                if (zl.reductionLevel > bpPerPixel) {\n                    level = zl;\n                    break;\n                }\n            }\n\n            if (null == level) {\n                level = zoomLevelHeaders[zoomLevelHeaders.length - 1];\n            }\n\n            return level && level.reductionLevel < 4 * bpPerPixel ? level : null;\n        }\n    }, {\n        key: \"decodeWigData\",\n        value: function decodeWigData(data, chr, chrIdx, bpStart, bpEnd, featureArray) {\n\n            var binaryParser = new BinaryParser(data),\n                chromId = binaryParser.getInt(),\n                chromStart = binaryParser.getInt(),\n                chromEnd = binaryParser.getInt(),\n                itemStep = binaryParser.getInt(),\n                itemSpan = binaryParser.getInt(),\n                type = binaryParser.getByte(),\n                reserved = binaryParser.getByte(),\n                itemCount = binaryParser.getUShort(),\n                value;\n\n            if (chromId === chrIdx) {\n\n                while (itemCount-- > 0) {\n\n                    switch (type) {\n                        case 1:\n                            chromStart = binaryParser.getInt();\n                            chromEnd = binaryParser.getInt();\n                            value = binaryParser.getFloat();\n                            break;\n                        case 2:\n                            chromStart = binaryParser.getInt();\n                            value = binaryParser.getFloat();\n                            chromEnd = chromStart + itemSpan;\n                            break;\n                        case 3:\n                            // Fixed step\n                            value = binaryParser.getFloat();\n                            chromEnd = chromStart + itemSpan;\n                            chromStart += itemStep;\n                            break;\n\n                    }\n\n                    if (chromStart >= bpEnd) {\n                        break; // Out of interval\n                    } else if (chromEnd > bpStart && Number.isFinite(value)) {\n                        featureArray.push({ chr: chr, start: chromStart, end: chromEnd, value: value });\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"decodeZoomData\",\n        value: function decodeZoomData(data, chr, chrIdx, bpStart, bpEnd, featureArray) {\n\n            var binaryParser = new BinaryParser(data),\n                minSize = 8 * 4,\n                // Minimum # of bytes required for a zoom record\n            chromId,\n                chromStart,\n                chromEnd,\n                validCount,\n                minVal,\n                maxVal,\n                sumData,\n                sumSquares,\n                value;\n\n            while (binaryParser.remLength() >= minSize) {\n                chromId = binaryParser.getInt();\n                if (chromId === chrIdx) {\n\n                    chromStart = binaryParser.getInt();\n                    chromEnd = binaryParser.getInt();\n                    validCount = binaryParser.getInt();\n                    minVal = binaryParser.getFloat();\n                    maxVal = binaryParser.getFloat();\n                    sumData = binaryParser.getFloat();\n                    sumSquares = binaryParser.getFloat();\n                    value = validCount == 0 ? 0 : sumData / validCount;\n\n                    if (chromStart >= bpEnd && chromStart < 1000000000) {\n                        console.log(\"should have broken\");\n\n                        break; // Out of interval\n                    } else if (chromEnd > bpStart && Number.isFinite(value)) {\n                        featureArray.push({ chr: chr, start: chromStart, end: chromEnd, value: value });\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"createFeature\",\n        value: function createFeature(tokens, feature) {\n            if (tokens.length > 0) {\n                feature.name = tokens[0];\n            }\n\n            if (tokens.length > 1) {\n                feature.score = parseFloat(tokens[1]);\n            }\n            if (tokens.length > 2) {\n                feature.strand = tokens[2];\n            }\n            if (tokens.length > 3) {\n                feature.cdStart = parseInt(tokens[3]);\n            }\n            if (tokens.length > 4) {\n                feature.cdEnd = parseInt(tokens[4]);\n            }\n            if (tokens.length > 5) {\n                //if (tokens[5] !== \".\" && tokens[5] !== \"0\")\n                //feature.color = igv.createColorString(tokens[5]);\n            }\n            if (tokens.length > 8) {\n                exonCount = parseInt(tokens[6]);\n                exonSizes = tokens[7].split(',');\n                exonStarts = tokens[8].split(',');\n                exons = [];\n\n                for (var i = 0; i < exonCount; i++) {\n                    eStart = start + parseInt(exonStarts[i]);\n                    eEnd = eStart + parseInt(exonSizes[i]);\n                    exons.push({ start: eStart, end: eEnd });\n                }\n\n                feature.exons = exons;\n            }\n        }\n    }]);\n\n    return BWSource;\n}();\n\n//************js/bigwig/bwReader.js*****************\n\n\nvar BIGWIG_MAGIC_LTH = 0x888FFC26; // BigWig Magic Low to High\nvar BIGWIG_MAGIC_HTL = 0x26FC8F66; // BigWig Magic High to Low\nvar BIGBED_MAGIC_LTH = 0x8789F2EB; // BigBed Magic Low to High\nvar BIGBED_MAGIC_HTL = 0xEBF28987; // BigBed Magic High to Low\nvar BBFILE_HEADER_SIZE = 64;\n\nvar BWReader = function () {\n    function BWReader(config) {\n        _classCallCheck(this, BWReader);\n\n        this.path = config.url;\n        this.headPath = config.headURL || this.path;\n        this.rpTreeCache = {};\n        this.config = $.extend({}, config, true);\n    }\n\n    _createClass(BWReader, [{\n        key: \"getZoomHeaders\",\n        value: function getZoomHeaders() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                if (self.zoomLevelHeaders) {\n                    fulfill(self.zoomLevelHeaders);\n                } else {\n                    self.loadHeader().then(function () {\n                        fulfill(self.zoomLevelHeaders);\n                    }).catch(function (error) {\n                        reject(error);\n                    });\n                }\n            });\n        }\n    }, {\n        key: \"loadHeader\",\n        value: function loadHeader() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                _igvxhr.igvxhr.loadArrayBuffer(self.path, Object.assign(self.config, { range: { start: 0, size: BBFILE_HEADER_SIZE } })).then(function (data) {\n\n                    if (!data) return;\n\n                    // Assume low-to-high unless proven otherwise\n                    self.littleEndian = true;\n\n                    var binaryParser = new BinaryParser(new DataView(data));\n\n                    var magic = binaryParser.getUInt();\n\n                    if (magic === BIGWIG_MAGIC_LTH) {\n                        self.type = \"BigWig\";\n                    } else if (magic == BIGBED_MAGIC_LTH) {\n                        self.type = \"BigBed\";\n                    } else {\n                        //Try big endian order\n                        self.littleEndian = false;\n\n                        binaryParser.littleEndian = false;\n                        binaryParser.position = 0;\n                        var magic = binaryParser.getUInt();\n\n                        if (magic === BIGWIG_MAGIC_HTL) {\n                            self.type = \"BigWig\";\n                        } else if (magic == BIGBED_MAGIC_HTL) {\n                            self.type = \"BigBed\";\n                        } else {\n                            // TODO -- error, unknown file type  or BE\n                        }\n                    }\n                    // Table 5  \"Common header for BigWig and BigBed files\"\n                    self.header = {};\n                    self.header.bwVersion = binaryParser.getUShort();\n                    self.header.nZoomLevels = binaryParser.getUShort();\n                    self.header.chromTreeOffset = binaryParser.getLong();\n                    self.header.fullDataOffset = binaryParser.getLong();\n                    self.header.fullIndexOffset = binaryParser.getLong();\n                    self.header.fieldCount = binaryParser.getUShort();\n                    self.header.definedFieldCount = binaryParser.getUShort();\n                    self.header.autoSqlOffset = binaryParser.getLong();\n                    self.header.totalSummaryOffset = binaryParser.getLong();\n                    self.header.uncompressBuffSize = binaryParser.getInt();\n                    self.header.reserved = binaryParser.getLong();\n\n                    self.loadZoomHeadersAndChrTree().then(fulfill).catch(reject);\n                }).catch(function (error) {\n                    reject(error);\n                });\n            });\n        }\n    }, {\n        key: \"loadZoomHeadersAndChrTree\",\n        value: function loadZoomHeadersAndChrTree() {\n\n            var startOffset = BBFILE_HEADER_SIZE,\n                self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                var range = { start: startOffset, size: self.header.fullDataOffset - startOffset + 5 };\n\n                _igvxhr.igvxhr.loadArrayBuffer(self.path, Object.assign(self.config, { range: range })).then(function (data) {\n\n                    var nZooms = self.header.nZoomLevels,\n                        binaryParser = new BinaryParser(new DataView(data)),\n                        i,\n                        len,\n                        zoomNumber,\n                        zlh;\n\n                    self.zoomLevelHeaders = [];\n\n                    self.firstZoomDataOffset = Number.MAX_VALUE;\n                    for (i = 0; i < nZooms; i++) {\n                        zoomNumber = nZooms - i;\n                        zlh = new ZoomLevelHeader(zoomNumber, binaryParser);\n                        self.firstZoomDataOffset = Math.min(zlh.dataOffset, self.firstZoomDataOffset);\n                        self.zoomLevelHeaders.push(zlh);\n                    }\n\n                    // Autosql\n                    if (self.header.autoSqlOffset > 0) {\n                        binaryParser.position = self.header.autoSqlOffset - startOffset;\n                        self.autoSql = binaryParser.getString();\n                    }\n\n                    // Total summary\n                    if (self.header.totalSummaryOffset > 0) {\n                        binaryParser.position = self.header.totalSummaryOffset - startOffset;\n                        self.totalSummary = new BWTotalSummary(binaryParser);\n                    }\n\n                    // Chrom data index\n                    if (self.header.chromTreeOffset > 0) {\n                        binaryParser.position = self.header.chromTreeOffset - startOffset;\n                        self.chromTree = new BPTree(binaryParser, startOffset);\n                    } else {}\n                    // TODO -- this is an error, not expected\n\n\n                    //Finally total data count\n                    binaryParser.position = self.header.fullDataOffset - startOffset;\n                    self.dataCount = binaryParser.getInt();\n\n                    fulfill();\n                }).catch(function (error) {\n                    reject(error);\n                });\n            });\n        }\n    }, {\n        key: \"loadRPTree\",\n        value: function loadRPTree(offset) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                var rpTree = self.rpTreeCache[offset];\n                if (rpTree) {\n                    fulfill(rpTree);\n                } else {\n                    rpTree = new RPTree(offset, self.contentLength, self.config, self.littleEndian);\n                    self.rpTreeCache[offset] = rpTree;\n                    rpTree.load().then(function () {\n                        fulfill(rpTree);\n                    }).catch(reject);\n                }\n            });\n        }\n    }]);\n\n    return BWReader;\n}();\n\nvar ZoomLevelHeader = function ZoomLevelHeader(index, byteBuffer) {\n    _classCallCheck(this, ZoomLevelHeader);\n\n    this.index = index;\n    this.reductionLevel = byteBuffer.getInt();\n    this.reserved = byteBuffer.getInt();\n    this.dataOffset = byteBuffer.getLong();\n    this.indexOffset = byteBuffer.getLong();\n};\n\nvar RPTREE_MAGIC_LTH = 0x2468ACE0;\nvar RPTREE_MAGIC_HTL = 0xE0AC6824;\nvar RPTREE_HEADER_SIZE = 48;\nvar RPTREE_NODE_LEAF_ITEM_SIZE = 32; // leaf item size\nvar RPTREE_NODE_CHILD_ITEM_SIZE = 24; // child item size\nvar BUFFER_SIZE = 512000;\n\n//***********js/bigwig/RPTree*******************\n\n\n//  buffer\n\nvar RPTree = function () {\n    function RPTree(fileOffset, contentLength, config, littleEndian) {\n        _classCallCheck(this, RPTree);\n\n        this.config = config;\n        this.filesize = contentLength;\n        this.fileOffset = fileOffset; // File offset to beginning of tree\n        this.path = config.url;\n        this.littleEndian = littleEndian;\n    }\n\n    _createClass(RPTree, [{\n        key: \"load\",\n        value: function load() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                var rootNodeOffset = self.fileOffset + RPTREE_HEADER_SIZE,\n                    bufferedReader = new BufferedReader(self.config, self.filesize, BUFFER_SIZE);\n\n                self.readNode(rootNodeOffset, bufferedReader).then(function (node) {\n                    self.rootNode = node;\n                    fulfill(self);\n                }).catch(reject);\n            });\n        }\n    }, {\n        key: \"readNode\",\n        value: function readNode(filePosition, bufferedReader) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                bufferedReader.dataViewForRange({ start: filePosition, size: 4 }, false).then(function (dataView) {\n                    var binaryParser = new BinaryParser(dataView, self.littleEndian);\n\n                    var type = binaryParser.getByte();\n                    var isLeaf = type === 1 ? true : false;\n                    var reserved = binaryParser.getByte();\n                    var count = binaryParser.getUShort();\n\n                    filePosition += 4;\n\n                    var bytesRequired = count * (isLeaf ? RPTREE_NODE_LEAF_ITEM_SIZE : RPTREE_NODE_CHILD_ITEM_SIZE);\n                    var range2 = { start: filePosition, size: bytesRequired };\n\n                    bufferedReader.dataViewForRange(range2, false).then(function (dataView) {\n\n                        var i,\n                            items = new Array(count),\n                            binaryParser = new BinaryParser(dataView);\n\n                        if (isLeaf) {\n                            for (i = 0; i < count; i++) {\n                                var item = {\n                                    isLeaf: true,\n                                    startChrom: binaryParser.getInt(),\n                                    startBase: binaryParser.getInt(),\n                                    endChrom: binaryParser.getInt(),\n                                    endBase: binaryParser.getInt(),\n                                    dataOffset: binaryParser.getLong(),\n                                    dataSize: binaryParser.getLong()\n                                };\n                                items[i] = item;\n                            }\n                            fulfill(new RPTreeNode(items));\n                        } else {\n                            // non-leaf\n                            for (i = 0; i < count; i++) {\n\n                                var item = {\n                                    isLeaf: false,\n                                    startChrom: binaryParser.getInt(),\n                                    startBase: binaryParser.getInt(),\n                                    endChrom: binaryParser.getInt(),\n                                    endBase: binaryParser.getInt(),\n                                    childOffset: binaryParser.getLong()\n                                };\n                                items[i] = item;\n                            }\n\n                            fulfill(new RPTreeNode(items));\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        }\n    }, {\n        key: \"findLeafItemsOverlapping\",\n        value: function findLeafItemsOverlapping(chrIdx, startBase, endBase) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                var leafItems = [],\n                    processing = new Set(),\n                    bufferedReader = new BufferedReader(self.config, self.filesize, BUFFER_SIZE);\n\n                processing.add(0); // Zero represents the root node\n                findLeafItems(self.rootNode, 0);\n\n                function findLeafItems(node, nodeId) {\n\n                    if (RPTree.overlaps(node, chrIdx, startBase, endBase)) {\n\n                        var items = node.items;\n\n                        items.forEach(function (item) {\n\n                            if (RPTree.overlaps(item, chrIdx, startBase, endBase)) {\n\n                                if (item.isLeaf) {\n                                    leafItems.push(item);\n                                } else {\n                                    if (item.childNode) {\n                                        findLeafItems(item.childNode);\n                                    } else {\n                                        processing.add(item.childOffset); // Represent node to-be-loaded by its file position\n                                        self.readNode(item.childOffset, bufferedReader).then(function (node) {\n                                            item.childNode = node;\n                                            findLeafItems(node, item.childOffset);\n                                        }).catch(reject);\n                                    }\n                                }\n                            }\n                        });\n                    }\n\n                    if (nodeId != undefined) processing.delete(nodeId);\n\n                    // Wait until all nodes are processed\n                    if (processing.size === 0) {\n                        fulfill(leafItems);\n                    }\n                }\n            });\n        }\n\n        /**\r\n         * Return true if {chrIdx:startBase-endBase} overlaps item's interval\r\n         * @returns {boolean}\r\n         */\n\n    }], [{\n        key: \"overlaps\",\n        value: function overlaps(item, chrIdx, startBase, endBase) {\n\n            //  if (chrIdx > item.endChrom || chrIdx < item.startChrom) return false;\n\n            if (!item) {\n                console.log(\"null item\");\n                return false;\n            }\n\n            return (chrIdx > item.startChrom || chrIdx == item.startChrom && endBase >= item.startBase) && (chrIdx < item.endChrom || chrIdx == item.endChrom && startBase < item.endBase);\n        }\n    }]);\n\n    return RPTree;\n}();\n\nvar RPTreeNode = function RPTreeNode(items) {\n    _classCallCheck(this, RPTreeNode);\n\n    this.items = items;\n\n    var minChromId = Number.MAX_VALUE,\n        maxChromId = 0,\n        minStartBase = Number.MAX_VALUE,\n        maxEndBase = 0,\n        i,\n        item;\n\n    for (i = 0; i < items.length; i++) {\n        item = items[i];\n        minChromId = Math.min(minChromId, item.startChrom);\n        maxChromId = Math.max(maxChromId, item.endChrom);\n        minStartBase = Math.min(minStartBase, item.startBase);\n        maxEndBase = Math.max(maxEndBase, item.endBase);\n    }\n\n    this.startChrom = minChromId;\n    this.endChrom = maxChromId;\n    this.startBase = minStartBase;\n    this.endBase = maxEndBase;\n};\n\n//*******************js/binary.js******************\n\n\nvar BinaryParser = function () {\n    function BinaryParser(dataView, littleEndian) {\n        _classCallCheck(this, BinaryParser);\n\n        this.littleEndian = littleEndian ? littleEndian : true;\n        this.position = 0;\n        this.view = dataView;\n        this.length = dataView.byteLength;\n    }\n\n    _createClass(BinaryParser, [{\n        key: \"available\",\n        value: function available() {\n            return this.length - this.position;\n        }\n    }, {\n        key: \"remLength\",\n        value: function remLength() {\n            return this.length - this.position;\n        }\n    }, {\n        key: \"hasNext\",\n        value: function hasNext() {\n            return this.position < this.length - 1;\n        }\n    }, {\n        key: \"getByte\",\n        value: function getByte() {\n            var retValue = this.view.getUint8(this.position, this.littleEndian);\n            this.position++;\n            return retValue;\n        }\n    }, {\n        key: \"getShort\",\n        value: function getShort() {\n\n            var retValue = this.view.getInt16(this.position, this.littleEndian);\n            this.position += 2;\n            return retValue;\n        }\n    }, {\n        key: \"getUShort\",\n        value: function getUShort() {\n\n            // var byte1 = this.getByte(),\n            //     byte2 = this.getByte(),\n            //     retValue = ((byte2 << 24 >>> 16) + (byte1 << 24 >>> 24));\n            //     return retValue;\n\n            //\n            var retValue = this.view.getUint16(this.position, this.littleEndian);\n            this.position += 2;\n            return retValue;\n        }\n    }, {\n        key: \"getInt\",\n        value: function getInt() {\n\n            var retValue = this.view.getInt32(this.position, this.littleEndian);\n            this.position += 4;\n            return retValue;\n        }\n    }, {\n        key: \"getUInt\",\n        value: function getUInt() {\n            var retValue = this.view.getUint32(this.position, this.littleEndian);\n            this.position += 4;\n            return retValue;\n        }\n    }, {\n        key: \"getLong\",\n        value: function getLong() {\n\n            // DataView doesn't support long. So we'll try manually\n\n            var b = [];\n            b[0] = this.view.getUint8(this.position);\n            b[1] = this.view.getUint8(this.position + 1);\n            b[2] = this.view.getUint8(this.position + 2);\n            b[3] = this.view.getUint8(this.position + 3);\n            b[4] = this.view.getUint8(this.position + 4);\n            b[5] = this.view.getUint8(this.position + 5);\n            b[6] = this.view.getUint8(this.position + 6);\n            b[7] = this.view.getUint8(this.position + 7);\n\n            var value = 0;\n            if (this.littleEndian) {\n                for (var i = b.length - 1; i >= 0; i--) {\n                    value = value * 256 + b[i];\n                }\n            } else {\n                for (var i = 0; i < b.length; i++) {\n                    value = value * 256 + b[i];\n                }\n            }\n\n            this.position += 8;\n            return value;\n        }\n    }, {\n        key: \"getString\",\n        value: function getString(len) {\n\n            var s = \"\";\n            var c;\n            while ((c = this.view.getUint8(this.position++)) != 0) {\n                s += String.fromCharCode(c);\n                if (len && s.length == len) break;\n            }\n            return s;\n        }\n    }, {\n        key: \"getFixedLengthString\",\n        value: function getFixedLengthString(len) {\n\n            var s = \"\";\n            var i;\n            var c;\n            for (i = 0; i < len; i++) {\n                c = this.view.getUint8(this.position++);\n                if (c > 0) {\n                    s += String.fromCharCode(c);\n                }\n            }\n            return s;\n        }\n    }, {\n        key: \"getFixedLengthTrimmedString\",\n        value: function getFixedLengthTrimmedString(len) {\n\n            var s = \"\";\n            var i;\n            var c;\n            for (i = 0; i < len; i++) {\n                c = this.view.getUint8(this.position++);\n                if (c > 32) {\n                    s += String.fromCharCode(c);\n                }\n            }\n            return s;\n        }\n    }, {\n        key: \"getFloat\",\n        value: function getFloat() {\n\n            var retValue = this.view.getFloat32(this.position, this.littleEndian);\n            this.position += 4;\n            return retValue;\n        }\n    }, {\n        key: \"getDouble\",\n        value: function getDouble() {\n\n            var retValue = this.view.getFloat64(this.position, this.littleEndian);\n            this.position += 8;\n            return retValue;\n        }\n    }, {\n        key: \"skip\",\n        value: function skip(n) {\n\n            this.position += n;\n            return this.position;\n        }\n\n        /**\r\n         * Return a bgzip (bam and tabix) virtual pointer\r\n         * TODO -- why isn't 8th byte used ?\r\n         * @returns {*}\r\n         */\n\n    }, {\n        key: \"getVPointer\",\n        value: function getVPointer() {\n\n            var position = this.position,\n                offset = this.view.getUint8(position + 1) << 8 | this.view.getUint8(position),\n                byte6 = (this.view.getUint8(position + 6) & 0xff) * 0x100000000,\n                byte5 = (this.view.getUint8(position + 5) & 0xff) * 0x1000000,\n                byte4 = (this.view.getUint8(position + 4) & 0xff) * 0x10000,\n                byte3 = (this.view.getUint8(position + 3) & 0xff) * 0x100,\n                byte2 = this.view.getUint8(position + 2) & 0xff,\n                block = byte6 + byte5 + byte4 + byte3 + byte2;\n            this.position += 8;\n\n            //       if (block == 0 && offset == 0) {\n            //           return null;\n            //       } else {\n            return new VPointer(block, offset);\n            //       }\n        }\n    }]);\n\n    return BinaryParser;\n}();\n\nvar VPointer = function () {\n    function VPointer(block, offset) {\n        _classCallCheck(this, VPointer);\n\n        this.block = block;\n        this.offset = offset;\n    }\n\n    _createClass(VPointer, [{\n        key: \"isLessThan\",\n        value: function isLessThan(vp) {\n            return this.block < vp.block || this.block === vp.block && this.offset < vp.offset;\n        }\n    }, {\n        key: \"isGreaterThan\",\n        value: function isGreaterThan(vp) {\n            return this.block > vp.block || this.block === vp.block && this.offset > vp.offset;\n        }\n    }, {\n        key: \"print\",\n        value: function print() {\n            return \"\" + this.block + \":\" + this.offset;\n        }\n    }]);\n\n    return VPointer;\n}();\n\n//*******js/bigwig/bwTotalSummary.js*************\n\n\nvar BWTotalSummary = function () {\n    function BWTotalSummary(byteBuffer) {\n        _classCallCheck(this, BWTotalSummary);\n\n        if (byteBuffer) {\n\n            this.basesCovered = byteBuffer.getLong();\n            this.minVal = byteBuffer.getDouble();\n            this.maxVal = byteBuffer.getDouble();\n            this.sumData = byteBuffer.getDouble();\n            this.sumSquares = byteBuffer.getDouble();\n\n            this.computeStats();\n        } else {\n            this.basesCovered = 0;\n            this.minVal = 0;\n            this.maxVal = 0;\n            this.sumData = 0;\n            this.sumSquares = 0;\n            this.mean = 0;\n            this.stddev = 0;\n        }\n    }\n\n    _createClass(BWTotalSummary, [{\n        key: \"computeStats\",\n        value: function computeStats() {\n            var n = this.basesCovered;\n            if (n > 0) {\n                this.mean = this.sumData / n;\n                this.stddev = Math.sqrt(this.sumSquares / (n - 1));\n\n                var min = this.minVal < 0 ? this.mean - 2 * this.stddev : 0,\n                    max = this.maxVal > 0 ? this.mean + 2 * this.stddev : 0;\n\n                this.defaultRange = {\n                    min: 0,\n                    max: this.mean + 3 * this.stddev\n                };\n            }\n        }\n    }, {\n        key: \"updateStats\",\n        value: function updateStats(stats) {\n\n            this.basesCovered += stats.count;\n            this.sumData += status.sumData;\n            this.sumSquares += sumSquares;\n            this.minVal = MIN(_minVal, min);\n            this.maxVal = MAX(_maxVal, max);\n\n            computeStats.call(this);\n        }\n    }]);\n\n    return BWTotalSummary;\n}();\n\n//***************js/bigwig/bwBPTree.js**************\n\n\nvar BPTREE_MAGIC_LTH = 0x78CA8C91;\nvar BPTREE_MAGIC_HTL = 0x918CCA78;\nvar BPTREE_HEADER_SIZE = 32;\n\nvar BPTree = function BPTree(binaryParser, startOffset) {\n    _classCallCheck(this, BPTree);\n\n    var self = this,\n        genome = null;\n\n    this.header = {};\n    this.header.magic = binaryParser.getInt();\n    this.header.blockSize = binaryParser.getInt();\n    this.header.keySize = binaryParser.getInt();\n    this.header.valSize = binaryParser.getInt();\n    this.header.itemCount = binaryParser.getLong();\n    this.header.reserved = binaryParser.getLong();\n\n    this.dictionary = {};\n\n    // Recursively walk tree to populate dictionary\n    readTreeNode(binaryParser, -1, this.header.keySize, this.dictionary);\n\n    var itemSize = 8 + this.header.keySize;\n    var minSize = 4 + itemSize; // Bytes for a node with 1 item\n\n    function readTreeNode(byteBuffer, offset, keySize, dictionary) {\n\n        if (offset >= 0) byteBuffer.position = offset;\n\n        var type = byteBuffer.getByte(),\n            reserved = byteBuffer.getByte(),\n            count = byteBuffer.getUShort(),\n            i,\n            key,\n            chromId,\n            chromSize,\n            childOffset,\n            bufferOffset,\n            currOffset;\n\n        if (type == 1) {\n\n            for (i = 0; i < count; i++) {\n\n                key = byteBuffer.getFixedLengthTrimmedString(keySize);\n                chromId = byteBuffer.getInt();\n                chromSize = byteBuffer.getInt();\n\n                if (genome) key = genome.getChromosomeName(key); // Translate to canonical chr name\n                dictionary[key] = chromId;\n            }\n        } else {\n            // non-leaf\n\n            for (i = 0; i < count; i++) {\n\n                key = byteBuffer.getFixedLengthTrimmedString(keySize);\n                childOffset = byteBuffer.getLong();\n                bufferOffset = childOffset - startOffset;\n                currOffset = byteBuffer.position;\n                readTreeNode(byteBuffer, bufferOffset, keySize, dictionary);\n                byteBuffer.position = currOffset;\n            }\n        }\n    }\n};\n\nexports.BWSource = BWSource;\nexports.BinaryParser = BinaryParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vTUxWUGFuZWwvc3JjL2JpZ3dpZy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9NTFZQYW5lbC9zcmMvYmlnd2lnLmpzPzExZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNCBCcm9hZCBJbnN0aXR1dGVcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuICogVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7aWd2eGhyfSBmcm9tIFwiLi9pZ3Z4aHIuanNcIjtcclxuLy9pbXBvcnQge3Bha299IGZyb20gXCIuL3ZlbmRvci9wYWtvX2luZmxhdGUuanNcIjtcclxuaW1wb3J0IHtabGlifSBmcm9tIFwiLi92ZW5kb3IvemxpYl9hbmRfZ3ppcC5qc1wiO1xyXG5cclxuXHJcbi8vKioqKioqKioqKipqcy9iaWd3aWcvYnVmZmVyZWRSZWFkZXIuanMqKioqKioqKioqKioqKioqKlxyXG5jbGFzcyBCdWZmZXJlZFJlYWRlcntcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZywgY29udGVudExlbmd0aCwgYnVmZmVyU2l6ZSkge1xyXG4gICAgICAgIHRoaXMucGF0aCA9IGNvbmZpZy51cmw7XHJcbiAgICAgICAgdGhpcy5jb250ZW50TGVuZ3RoID0gY29udGVudExlbmd0aDtcclxuICAgICAgICB0aGlzLmJ1ZmZlclNpemUgPSBidWZmZXJTaXplID8gYnVmZmVyU2l6ZSA6IDUxMjAwMDtcclxuICAgICAgICB0aGlzLnJhbmdlID0ge3N0YXJ0OiAtMSwgc2l6ZTogLTF9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0ZWRSYW5nZSAtIGJ5dGUgcmFuZ2VhcyB7c3RhcnQsIHNpemV9XHJcbiAgICAgKiBAcGFyYW0gZnVsZmlsbCAtIGZ1bmN0aW9uIHRvIHJlY2VpdmUgcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0gYXNVaW50OCAtIG9wdGlvbmFsIGZsYWcgdG8gcmV0dXJuIHJlc3VsdCBhcyBhbiBVSW50OEFycmF5XHJcbiAgICAgKi9cclxuICAgIGRhdGFWaWV3Rm9yUmFuZ2UocmVxdWVzdGVkUmFuZ2UsIGFzVWludDgpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGZ1bGZpbGwsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgaGFzRGF0YSA9IChzZWxmLmRhdGEgJiYgKHNlbGYucmFuZ2Uuc3RhcnQgPD0gcmVxdWVzdGVkUmFuZ2Uuc3RhcnQpICYmXHJcbiAgICAgICAgICAgICAgICAoKHNlbGYucmFuZ2Uuc3RhcnQgKyBzZWxmLnJhbmdlLnNpemUpID49IChyZXF1ZXN0ZWRSYW5nZS5zdGFydCArIHJlcXVlc3RlZFJhbmdlLnNpemUpKSksXHJcbiAgICAgICAgICAgICAgICBidWZmZXJTaXplLFxyXG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGhhc0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHN1YmJ1ZmZlcihzZWxmLCByZXF1ZXN0ZWRSYW5nZSwgYXNVaW50OCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBFeHBhbmQgYnVmZmVyIHNpemUgaWYgbmVlZGVkLCBidXQgbm90IGJleW9uZCBjb250ZW50IGxlbmd0aFxyXG4gICAgICAgICAgICAgICAgYnVmZmVyU2l6ZSA9IE1hdGgubWF4KHNlbGYuYnVmZmVyU2l6ZSwgcmVxdWVzdGVkUmFuZ2Uuc2l6ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29udGVudExlbmd0aCA+IDAgJiYgcmVxdWVzdGVkUmFuZ2Uuc3RhcnQgKyBidWZmZXJTaXplID4gc2VsZi5jb250ZW50TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZFJhbmdlID0ge3N0YXJ0OiByZXF1ZXN0ZWRSYW5nZS5zdGFydH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSB7c3RhcnQ6IHJlcXVlc3RlZFJhbmdlLnN0YXJ0LCBzaXplOiBidWZmZXJTaXplfTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZ3Z4aHIubG9hZEFycmF5QnVmZmVyKHNlbGYucGF0aCwgT2JqZWN0LmFzc2lnbihzZWxmLmNvbmZpZywge3JhbmdlOiBsb2FkUmFuZ2V9KSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXJyYXlCdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGEgPSBhcnJheUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJhbmdlID0gbG9hZFJhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YmJ1ZmZlcihzZWxmLCByZXF1ZXN0ZWRSYW5nZSwgYXNVaW50OCk7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1YmJ1ZmZlcihidWZmZXJlZFJlYWRlciwgcmVxdWVzdGVkUmFuZ2UsIGFzVWludDgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gYnVmZmVyZWRSZWFkZXIuZGF0YS5ieXRlTGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlclN0YXJ0ID0gcmVxdWVzdGVkUmFuZ2Uuc3RhcnQgLSBidWZmZXJlZFJlYWRlci5yYW5nZS5zdGFydCxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhc1VpbnQ4ID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoYnVmZmVyZWRSZWFkZXIuZGF0YSwgYnVmZmVyU3RhcnQsIGxlbiAtIGJ1ZmZlclN0YXJ0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRhVmlldyhidWZmZXJlZFJlYWRlci5kYXRhLCBidWZmZXJTdGFydCwgbGVuIC0gYnVmZmVyU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgZnVsZmlsbChyZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vKioqKioqKioqKmpzL2JpZ3dpZy9id1NvdXJjZS5qcyoqKioqKioqKioqKioqKlxyXG5jbGFzcyBCV1NvdXJjZXtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsY3JlYXRlX2ZlYXR1cmVfZnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnJlYWRlciA9IG5ldyBCV1JlYWRlcihjb25maWcpO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyZWRSZWFkZXIgPSBuZXcgQnVmZmVyZWRSZWFkZXIoY29uZmlnKTtcclxuICAgICAgICBpZiAoIWNyZWF0ZV9mZWF0dXJlX2Z1bmN0aW9uKXtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVfZmVhdHVyZT1CV1NvdXJjZS5jcmVhdGVGZWF0dXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZV9mZWF0dXJlPWNyZWF0ZV9mZWF0dXJlX2Z1bmN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcblx0KiBDcmVhdGVzIGEgcGFuZWxcclxuXHQqIEBwYXJhbSB7c3RyaW5nfSBjaHIgLSBUaGUgY2hyb21vc29tZVxyXG5cdCogQHBhcmFtIHtpbnR9IGJwU3RhcnQgVGhlIHN0YXJ0aW5nIHBvc3RpdGlvbiBcclxuXHQqIEBwYXJhbSB7aW50fSBicEVuZCAtIFRoZSBlbmQgb2YgdGhlIHJlZ2lvbiB0byBzaG93XHJcblx0KiBAcGFyYW0ge2Jvb2xlYW59IHVzZV9leGlzdGluZyAtIElmIHRydWUgdGhlbiB0aGUgY2FjaGVkIGZlYXR1cmUgd2lsbCBiZSB1c2VkLSBvbmx5IHVzZWRcclxuXHQqIGlmIHRoZSBjby1vcmlkaW5hdGVzIGhhdmUgbm90IGNoYW5nZWQuIEFsdGhvdWdoLCB0aGUgQldyZWFkZXIgaGFzIGEgY2FjaGUsIGl0IGlzIHNvbWV0aW1lc1xyXG5cdCogaWdub3JlZCBhbmQgZmVhdHVyZXMgYXJlIHJlLWZldGNoZWQgZm9yIHRoZSBzYW1lIHJlZ2lvblxyXG5cdCogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBTaG91bGQgY29udGFpbiBwaXhlbFdpZHRoLSB0aGUgd2lkdGggb2YgdGhlIGVudGlyZSBjYW52YXMgYW5kIFxyXG5cdCogYnBQZXJQaXhlbC5cclxuXHQqL1xyXG4gICAgZ2V0RmVhdHVyZXMoY2hyLCBicFN0YXJ0LCBicEVuZCx1c2VfZXhpc3RpbmcsZGF0YSkge1xyXG4gICAgICAgIHRoaXMuc3QgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuZmVhdHVyZXMgJiYgdXNlX2V4aXN0aW5nKXtcclxuICAgICAgICAgICAgICAgIGZ1bGZpbGwoc2VsZi5mZWF0dXJlcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5yZWFkZXIuZ2V0Wm9vbUhlYWRlcnMoKS50aGVuKGZ1bmN0aW9uICh6b29tTGV2ZWxIZWFkZXJzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0IGEgYml3aWcgXCJ6b29tIGxldmVsXCIgYXBwcm9wcmlhdGUgZm9yIHRoZSBjdXJyZW50IHJlc29sdXRpb25cclxuICAgICAgICAgICAgICAgIHZhciBid1JlYWRlciA9IHNlbGYucmVhZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmVkUmVhZGVyID0gc2VsZi5idWZmZXJlZFJlYWRlcixcclxuICAgICAgICAgICAgICAgICAgICBicHAgPWRhdGEuYnBQZXJQaXhlbCxcclxuICAgICAgICAgICAgICAgICAgICB6b29tTGV2ZWxIZWFkZXI9QldTb3VyY2Uuem9vbUxldmVsRm9yU2NhbGUoYnBwLCB6b29tTGV2ZWxIZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgICAgICB0cmVlT2Zmc2V0XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoem9vbUxldmVsSGVhZGVyICYmIGJ3UmVhZGVyLnR5cGU9PT1cIkJpZ1dpZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJlZU9mZnNldCA9IHpvb21MZXZlbEhlYWRlci5pbmRleE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRlY29kZUZ1bmN0aW9uID0gQldTb3VyY2UuZGVjb2RlWm9vbURhdGE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyZWVPZmZzZXQgPSBid1JlYWRlci5oZWFkZXIuZnVsbEluZGV4T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChid1JlYWRlci50eXBlID09PSBcIkJpZ1dpZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVjb2RlRnVuY3Rpb24gPUJXU291cmNlLmRlY29kZVdpZ0RhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlY29kZUZ1bmN0aW9uID1zZWxmLmRlY29kZUJlZERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJ3UmVhZGVyLmxvYWRSUFRyZWUodHJlZU9mZnNldCkudGhlbihmdW5jdGlvbiAocnBUcmVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHJJZHggPSBzZWxmLnJlYWRlci5jaHJvbVRyZWUuZGljdGlvbmFyeVtjaHJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaHJJZHggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJwVHJlZS5maW5kTGVhZkl0ZW1zT3ZlcmxhcHBpbmcoY2hySWR4LCBicFN0YXJ0LCBicEVuZCkudGhlbihmdW5jdGlvbiAobGVhZkl0ZW1zKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsZWFmSXRlbXMgfHwgbGVhZkl0ZW1zLmxlbmd0aCA9PSAwKSBmdWxmaWxsKFtdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWFmSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJlZFJlYWRlci5kYXRhVmlld0ZvclJhbmdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBpdGVtLmRhdGFPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBpdGVtLmRhdGFTaXplXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpLnRoZW4oZnVuY3Rpb24gKHVpbnQ4QXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5mbGF0ZSA9IG5ldyBabGliLkluZmxhdGUodWludDhBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwbGFpbj0gaW5mbGF0ZS5kZWNvbXByZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgcGxhaW4gPSBwYWtvLmluZmxhdGUodWludDhBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlY29kZUZ1bmN0aW9uKG5ldyBEYXRhVmlldyhwbGFpbi5idWZmZXIpLCBjaHIsIGNocklkeCwgYnBTdGFydCwgYnBFbmQsIGZlYXR1cmVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGZlYXR1cmVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChmZWF0dXJlQXJyYXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBlbi1zZWxmLnN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gYnBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIGFsbEZlYXR1cmVzID0gZmVhdHVyZUFycmF5c1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihmZWF0dXJlQXJyYXlzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoaT0xOyBpPGZlYXR1cmVBcnJheXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRmVhdHVyZXMgPSBhbGxGZWF0dXJlcy5jb25jYXQoZmVhdHVyZUFycmF5c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEZlYXR1cmVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuc3RhcnQgLSBiLnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mZWF0dXJlcz1hbGxGZWF0dXJlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGFsbEZlYXR1cmVzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgZ2V0RGVmYXVsdFJhbmdlKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMucmVhZGVyLnRvdGFsU3VtbWFyeSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLnRvdGFsU3VtbWFyeS5kZWZhdWx0UmFuZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIHpvb21MZXZlbEZvclNjYWxlKGJwUGVyUGl4ZWwsIHpvb21MZXZlbEhlYWRlcnMpIHtcclxuXHJcbiAgICAgICAgdmFyIGxldmVsID0gbnVsbCwgaSwgemw7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB6b29tTGV2ZWxIZWFkZXJzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICB6bCA9IHpvb21MZXZlbEhlYWRlcnNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoemwucmVkdWN0aW9uTGV2ZWwgPiBicFBlclBpeGVsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbCA9IHpsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChudWxsID09IGxldmVsKSB7XHJcbiAgICAgICAgICAgIGxldmVsID0gem9vbUxldmVsSGVhZGVyc1t6b29tTGV2ZWxIZWFkZXJzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChsZXZlbCAmJiBsZXZlbC5yZWR1Y3Rpb25MZXZlbCA8IDQgKiBicFBlclBpeGVsKSA/IGxldmVsIDogbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGRlY29kZVdpZ0RhdGEoZGF0YSwgY2hyLCBjaHJJZHgsIGJwU3RhcnQsIGJwRW5kLCBmZWF0dXJlQXJyYXkpIHtcclxuXHJcbiAgICAgICAgdmFyIGJpbmFyeVBhcnNlciA9IG5ldyBCaW5hcnlQYXJzZXIoZGF0YSksXHJcbiAgICAgICAgICAgIGNocm9tSWQgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgIGNocm9tU3RhcnQgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgIGNocm9tRW5kID0gYmluYXJ5UGFyc2VyLmdldEludCgpLFxyXG4gICAgICAgICAgICBpdGVtU3RlcCA9IGJpbmFyeVBhcnNlci5nZXRJbnQoKSxcclxuICAgICAgICAgICAgaXRlbVNwYW4gPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgIHR5cGUgPSBiaW5hcnlQYXJzZXIuZ2V0Qnl0ZSgpLFxyXG4gICAgICAgICAgICByZXNlcnZlZCA9IGJpbmFyeVBhcnNlci5nZXRCeXRlKCksXHJcbiAgICAgICAgICAgIGl0ZW1Db3VudCA9IGJpbmFyeVBhcnNlci5nZXRVU2hvcnQoKSxcclxuICAgICAgICAgICAgdmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChjaHJvbUlkID09PSBjaHJJZHgpIHtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChpdGVtQ291bnQtLSA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tU3RhcnQgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kID0gYmluYXJ5UGFyc2VyLmdldEludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGJpbmFyeVBhcnNlci5nZXRGbG9hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tU3RhcnQgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYmluYXJ5UGFyc2VyLmdldEZsb2F0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kID0gY2hyb21TdGFydCArIGl0ZW1TcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6ICAvLyBGaXhlZCBzdGVwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYmluYXJ5UGFyc2VyLmdldEZsb2F0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tRW5kID0gY2hyb21TdGFydCArIGl0ZW1TcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHJvbVN0YXJ0ICs9IGl0ZW1TdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNocm9tU3RhcnQgPj0gYnBFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gT3V0IG9mIGludGVydmFsXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNocm9tRW5kID4gYnBTdGFydCAmJiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5LnB1c2goe2NocjogY2hyLCBzdGFydDogY2hyb21TdGFydCwgZW5kOiBjaHJvbUVuZCwgdmFsdWU6IHZhbHVlfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRlY29kZVpvb21EYXRhKGRhdGEsIGNociwgY2hySWR4LCBicFN0YXJ0LCBicEVuZCwgZmVhdHVyZUFycmF5KSB7XHJcblxyXG4gICAgICAgIHZhciBiaW5hcnlQYXJzZXIgPSBuZXcgQmluYXJ5UGFyc2VyKGRhdGEpLFxyXG4gICAgICAgICAgICBtaW5TaXplID0gOCAqIDQsICAgLy8gTWluaW11bSAjIG9mIGJ5dGVzIHJlcXVpcmVkIGZvciBhIHpvb20gcmVjb3JkXHJcbiAgICAgICAgICAgIGNocm9tSWQsXHJcbiAgICAgICAgICAgIGNocm9tU3RhcnQsXHJcbiAgICAgICAgICAgIGNocm9tRW5kLFxyXG4gICAgICAgICAgICB2YWxpZENvdW50LFxyXG4gICAgICAgICAgICBtaW5WYWwsXHJcbiAgICAgICAgICAgIG1heFZhbCxcclxuICAgICAgICAgICAgc3VtRGF0YSxcclxuICAgICAgICAgICAgc3VtU3F1YXJlcyxcclxuICAgICAgICAgICAgdmFsdWU7XHJcblxyXG4gICAgICAgIHdoaWxlIChiaW5hcnlQYXJzZXIucmVtTGVuZ3RoKCkgPj0gbWluU2l6ZSkge1xyXG4gICAgICAgICAgICBjaHJvbUlkID0gYmluYXJ5UGFyc2VyLmdldEludCgpO1xyXG4gICAgICAgICAgICBpZiAoY2hyb21JZCA9PT0gY2hySWR4KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2hyb21TdGFydCA9IGJpbmFyeVBhcnNlci5nZXRJbnQoKTtcclxuICAgICAgICAgICAgICAgIGNocm9tRW5kID0gYmluYXJ5UGFyc2VyLmdldEludCgpO1xyXG4gICAgICAgICAgICAgICAgdmFsaWRDb3VudCA9IGJpbmFyeVBhcnNlci5nZXRJbnQoKTtcclxuICAgICAgICAgICAgICAgIG1pblZhbCA9IGJpbmFyeVBhcnNlci5nZXRGbG9hdCgpO1xyXG4gICAgICAgICAgICAgICAgbWF4VmFsID0gYmluYXJ5UGFyc2VyLmdldEZsb2F0KCk7XHJcbiAgICAgICAgICAgICAgICBzdW1EYXRhID0gYmluYXJ5UGFyc2VyLmdldEZsb2F0KCk7XHJcbiAgICAgICAgICAgICAgICBzdW1TcXVhcmVzID0gYmluYXJ5UGFyc2VyLmdldEZsb2F0KCk7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbGlkQ291bnQgPT0gMCA/IDAgOiBzdW1EYXRhIC8gdmFsaWRDb3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21TdGFydCA+PSBicEVuZCAmJiBjaHJvbVN0YXJ0PDEwMDAwMDAwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzaG91bGQgaGF2ZSBicm9rZW5cIilcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIE91dCBvZiBpbnRlcnZhbFxyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNocm9tRW5kID4gYnBTdGFydCAmJiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUFycmF5LnB1c2goe2NocjogY2hyLCBzdGFydDogY2hyb21TdGFydCwgZW5kOiBjaHJvbUVuZCwgdmFsdWU6IHZhbHVlfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICBkZWNvZGVCZWREYXRhKGRhdGEsIGNociwgY2hySWR4LCBicFN0YXJ0LCBicEVuZCwgZmVhdHVyZUFycmF5KSB7XHJcblxyXG4gICAgICAgIHZhciBiaW5hcnlQYXJzZXIgPSBuZXcgQmluYXJ5UGFyc2VyKGRhdGEpLFxyXG4gICAgICAgICAgICBtaW5TaXplID0gMyAqIDQgKyAxLCAgIC8vIE1pbmltdW0gIyBvZiBieXRlcyByZXF1aXJlZCBmb3IgYSBiZWQgcmVjb3JkXHJcbiAgICAgICAgICAgIGNocm9tSWQsXHJcbiAgICAgICAgICAgIGNocm9tU3RhcnQsXHJcbiAgICAgICAgICAgIGNocm9tRW5kLFxyXG4gICAgICAgICAgICByZXN0LFxyXG4gICAgICAgICAgICB0b2tlbnMsXHJcbiAgICAgICAgICAgIGZlYXR1cmUsXHJcbiAgICAgICAgICAgIGV4b25Db3VudCwgZXhvblNpemVzLCBleG9uU3RhcnRzLCBleG9ucywgZVN0YXJ0LCBlRW5kO1xyXG5cclxuXHJcbiAgICAgICAgd2hpbGUgKGJpbmFyeVBhcnNlci5yZW1MZW5ndGgoKSA+PSBtaW5TaXplKSB7XHJcblxyXG4gICAgICAgICAgICBjaHJvbUlkID0gYmluYXJ5UGFyc2VyLmdldEludCgpO1xyXG4gICAgICAgICAgICBpZiAoY2hyb21JZCAhPSBjaHJJZHgpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgY2hyb21TdGFydCA9IGJpbmFyeVBhcnNlci5nZXRJbnQoKTtcclxuICAgICAgICAgICAgY2hyb21FbmQgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgICAgIHJlc3QgPSBiaW5hcnlQYXJzZXIuZ2V0U3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICBmZWF0dXJlID0ge2NocjogY2hyLCBzdGFydDogY2hyb21TdGFydCwgZW5kOiBjaHJvbUVuZH07XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hyb21TdGFydCA8IGJwRW5kICYmIGNocm9tRW5kID49IGJwU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIGZlYXR1cmVBcnJheS5wdXNoKGZlYXR1cmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRva2VucyA9IHJlc3Quc3BsaXQoXCJcXHRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZV9mZWF0dXJlKHRva2VucyxmZWF0dXJlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBjcmVhdGVGZWF0dXJlKHRva2VucyxmZWF0dXJlKXtcclxuICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLm5hbWUgPSB0b2tlbnNbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zY29yZSA9IHBhcnNlRmxvYXQodG9rZW5zWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc3RyYW5kID0gdG9rZW5zWzJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5jZFN0YXJ0ID0gcGFyc2VJbnQodG9rZW5zWzNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuY2RFbmQgPSBwYXJzZUludCh0b2tlbnNbNF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAodG9rZW5zWzVdICE9PSBcIi5cIiAmJiB0b2tlbnNbNV0gIT09IFwiMFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZlYXR1cmUuY29sb3IgPSBpZ3YuY3JlYXRlQ29sb3JTdHJpbmcodG9rZW5zWzVdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4b25Db3VudCA9IHBhcnNlSW50KHRva2Vuc1s2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhvblNpemVzID0gdG9rZW5zWzddLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhvblN0YXJ0cyA9IHRva2Vuc1s4XS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4b25zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhvbkNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZVN0YXJ0ID0gc3RhcnQgKyBwYXJzZUludChleG9uU3RhcnRzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZUVuZCA9IGVTdGFydCArIHBhcnNlSW50KGV4b25TaXplc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4b25zLnB1c2goe3N0YXJ0OiBlU3RhcnQsIGVuZDogZUVuZH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5leG9ucyA9IGV4b25zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vLyoqKioqKioqKioqKmpzL2JpZ3dpZy9id1JlYWRlci5qcyoqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuY29uc3QgQklHV0lHX01BR0lDX0xUSCA9IDB4ODg4RkZDMjY7IC8vIEJpZ1dpZyBNYWdpYyBMb3cgdG8gSGlnaFxyXG5jb25zdCBCSUdXSUdfTUFHSUNfSFRMID0gMHgyNkZDOEY2NjsgLy8gQmlnV2lnIE1hZ2ljIEhpZ2ggdG8gTG93XHJcbmNvbnN0IEJJR0JFRF9NQUdJQ19MVEggPSAweDg3ODlGMkVCOyAvLyBCaWdCZWQgTWFnaWMgTG93IHRvIEhpZ2hcclxuY29uc3QgQklHQkVEX01BR0lDX0hUTCA9IDB4RUJGMjg5ODc7IC8vIEJpZ0JlZCBNYWdpYyBIaWdoIHRvIExvd1xyXG5jb25zdCBCQkZJTEVfSEVBREVSX1NJWkUgPSA2NDtcclxuXHJcblxyXG5jbGFzcyBCV1JlYWRlcntcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucGF0aCA9IGNvbmZpZy51cmw7XHJcbiAgICAgICAgdGhpcy5oZWFkUGF0aCA9IGNvbmZpZy5oZWFkVVJMIHx8IHRoaXMucGF0aDtcclxuICAgICAgICB0aGlzLnJwVHJlZUNhY2hlID0ge307XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSAkLmV4dGVuZCh7fSxjb25maWcsdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldFpvb21IZWFkZXJzKCkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoZnVsZmlsbCwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnpvb21MZXZlbEhlYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGZ1bGZpbGwoc2VsZi56b29tTGV2ZWxIZWFkZXJzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubG9hZEhlYWRlcigpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoc2VsZi56b29tTGV2ZWxIZWFkZXJzKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWRIZWFkZXIoKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWd2eGhyLmxvYWRBcnJheUJ1ZmZlcihzZWxmLnBhdGgsIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIHtyYW5nZToge3N0YXJ0OiAwLCBzaXplOiBCQkZJTEVfSEVBREVSX1NJWkV9fSkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFzc3VtZSBsb3ctdG8taGlnaCB1bmxlc3MgcHJvdmVuIG90aGVyd2lzZVxyXG4gICAgICAgICAgICAgICAgc2VsZi5saXR0bGVFbmRpYW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBiaW5hcnlQYXJzZXIgPSBuZXcgQmluYXJ5UGFyc2VyKG5ldyBEYXRhVmlldyhkYXRhKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1hZ2ljID0gYmluYXJ5UGFyc2VyLmdldFVJbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobWFnaWMgPT09IEJJR1dJR19NQUdJQ19MVEgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnR5cGUgPSBcIkJpZ1dpZ1wiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWFnaWMgPT0gQklHQkVEX01BR0lDX0xUSCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudHlwZSA9IFwiQmlnQmVkXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1RyeSBiaWcgZW5kaWFuIG9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5saXR0bGVFbmRpYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYmluYXJ5UGFyc2VyLmxpdHRsZUVuZGlhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpbmFyeVBhcnNlci5wb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hZ2ljID0gYmluYXJ5UGFyc2VyLmdldFVJbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hZ2ljID09PSBCSUdXSUdfTUFHSUNfSFRMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHlwZSA9IFwiQmlnV2lnXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hZ2ljID09IEJJR0JFRF9NQUdJQ19IVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50eXBlID0gXCJCaWdCZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gLS0gZXJyb3IsIHVua25vd24gZmlsZSB0eXBlICBvciBCRVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBUYWJsZSA1ICBcIkNvbW1vbiBoZWFkZXIgZm9yIEJpZ1dpZyBhbmQgQmlnQmVkIGZpbGVzXCJcclxuICAgICAgICAgICAgICAgIHNlbGYuaGVhZGVyID0ge307XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhlYWRlci5id1ZlcnNpb24gPSBiaW5hcnlQYXJzZXIuZ2V0VVNob3J0KCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhlYWRlci5uWm9vbUxldmVscyA9IGJpbmFyeVBhcnNlci5nZXRVU2hvcnQoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuaGVhZGVyLmNocm9tVHJlZU9mZnNldCA9IGJpbmFyeVBhcnNlci5nZXRMb25nKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhlYWRlci5mdWxsRGF0YU9mZnNldCA9IGJpbmFyeVBhcnNlci5nZXRMb25nKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhlYWRlci5mdWxsSW5kZXhPZmZzZXQgPSBiaW5hcnlQYXJzZXIuZ2V0TG9uZygpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5oZWFkZXIuZmllbGRDb3VudCA9IGJpbmFyeVBhcnNlci5nZXRVU2hvcnQoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuaGVhZGVyLmRlZmluZWRGaWVsZENvdW50ID0gYmluYXJ5UGFyc2VyLmdldFVTaG9ydCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5oZWFkZXIuYXV0b1NxbE9mZnNldCA9IGJpbmFyeVBhcnNlci5nZXRMb25nKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmhlYWRlci50b3RhbFN1bW1hcnlPZmZzZXQgPSBiaW5hcnlQYXJzZXIuZ2V0TG9uZygpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5oZWFkZXIudW5jb21wcmVzc0J1ZmZTaXplID0gYmluYXJ5UGFyc2VyLmdldEludCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5oZWFkZXIucmVzZXJ2ZWQgPSBiaW5hcnlQYXJzZXIuZ2V0TG9uZygpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYubG9hZFpvb21IZWFkZXJzQW5kQ2hyVHJlZSgpLnRoZW4oZnVsZmlsbCkuY2F0Y2gocmVqZWN0KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICBsb2FkWm9vbUhlYWRlcnNBbmRDaHJUcmVlKCkge1xyXG5cclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gQkJGSUxFX0hFQURFUl9TSVpFLFxyXG4gICAgICAgICAgICBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsLCByZWplY3QpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHtzdGFydDogc3RhcnRPZmZzZXQsIHNpemU6IChzZWxmLmhlYWRlci5mdWxsRGF0YU9mZnNldCAtIHN0YXJ0T2Zmc2V0ICsgNSl9O1xyXG5cclxuICAgICAgICAgICAgaWd2eGhyLmxvYWRBcnJheUJ1ZmZlcihzZWxmLnBhdGgsIE9iamVjdC5hc3NpZ24oc2VsZi5jb25maWcsIHtyYW5nZTogcmFuZ2V9KSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG5ab29tcyA9IHNlbGYuaGVhZGVyLm5ab29tTGV2ZWxzLFxyXG4gICAgICAgICAgICAgICAgICAgIGJpbmFyeVBhcnNlciA9IG5ldyBCaW5hcnlQYXJzZXIobmV3IERhdGFWaWV3KGRhdGEpKSxcclxuICAgICAgICAgICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlbixcclxuICAgICAgICAgICAgICAgICAgICB6b29tTnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHpsaDtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnpvb21MZXZlbEhlYWRlcnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLmZpcnN0Wm9vbURhdGFPZmZzZXQgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5ab29tczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgem9vbU51bWJlciA9IG5ab29tcyAtIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgemxoID0gbmV3IFpvb21MZXZlbEhlYWRlcih6b29tTnVtYmVyLCBiaW5hcnlQYXJzZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZmlyc3Rab29tRGF0YU9mZnNldCA9IE1hdGgubWluKHpsaC5kYXRhT2Zmc2V0LCBzZWxmLmZpcnN0Wm9vbURhdGFPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuem9vbUxldmVsSGVhZGVycy5wdXNoKHpsaCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQXV0b3NxbFxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuaGVhZGVyLmF1dG9TcWxPZmZzZXQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluYXJ5UGFyc2VyLnBvc2l0aW9uID0gc2VsZi5oZWFkZXIuYXV0b1NxbE9mZnNldCAtIHN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYXV0b1NxbCA9IGJpbmFyeVBhcnNlci5nZXRTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUb3RhbCBzdW1tYXJ5XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5oZWFkZXIudG90YWxTdW1tYXJ5T2Zmc2V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJpbmFyeVBhcnNlci5wb3NpdGlvbiA9IHNlbGYuaGVhZGVyLnRvdGFsU3VtbWFyeU9mZnNldCAtIHN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudG90YWxTdW1tYXJ5ID0gbmV3IEJXVG90YWxTdW1tYXJ5KGJpbmFyeVBhcnNlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hyb20gZGF0YSBpbmRleFxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuaGVhZGVyLmNocm9tVHJlZU9mZnNldCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBiaW5hcnlQYXJzZXIucG9zaXRpb24gPSBzZWxmLmhlYWRlci5jaHJvbVRyZWVPZmZzZXQgLSBzdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNocm9tVHJlZSA9IG5ldyBCUFRyZWUoYmluYXJ5UGFyc2VyLCBzdGFydE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0tIHRoaXMgaXMgYW4gZXJyb3IsIG5vdCBleHBlY3RlZFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vRmluYWxseSB0b3RhbCBkYXRhIGNvdW50XHJcbiAgICAgICAgICAgICAgICBiaW5hcnlQYXJzZXIucG9zaXRpb24gPSBzZWxmLmhlYWRlci5mdWxsRGF0YU9mZnNldCAtIHN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgc2VsZi5kYXRhQ291bnQgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZnVsZmlsbCgpO1xyXG5cclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFJQVHJlZShvZmZzZXQpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGZ1bGZpbGwsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgcnBUcmVlID0gc2VsZi5ycFRyZWVDYWNoZVtvZmZzZXRdO1xyXG4gICAgICAgICAgICBpZiAocnBUcmVlKSB7XHJcbiAgICAgICAgICAgICAgICBmdWxmaWxsKHJwVHJlZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBycFRyZWUgPSBuZXcgUlBUcmVlKG9mZnNldCwgc2VsZi5jb250ZW50TGVuZ3RoLCBzZWxmLmNvbmZpZywgc2VsZi5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ycFRyZWVDYWNoZVtvZmZzZXRdID0gcnBUcmVlO1xyXG4gICAgICAgICAgICAgICAgcnBUcmVlLmxvYWQoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKHJwVHJlZSk7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiBjbGFzcyBab29tTGV2ZWxIZWFkZXJ7XHJcbiAgICAgY29uc3RydWN0b3IoaW5kZXgsIGJ5dGVCdWZmZXIpIHtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5yZWR1Y3Rpb25MZXZlbCA9IGJ5dGVCdWZmZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgdGhpcy5yZXNlcnZlZCA9IGJ5dGVCdWZmZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgdGhpcy5kYXRhT2Zmc2V0ID0gYnl0ZUJ1ZmZlci5nZXRMb25nKCk7XHJcbiAgICAgICAgdGhpcy5pbmRleE9mZnNldCA9IGJ5dGVCdWZmZXIuZ2V0TG9uZygpO1xyXG4gICAgfVxyXG4gfVxyXG5cclxuXHJcbmNvbnN0IFJQVFJFRV9NQUdJQ19MVEggPSAweDI0NjhBQ0UwO1xyXG5jb25zdCBSUFRSRUVfTUFHSUNfSFRMID0gMHhFMEFDNjgyNDtcclxuY29uc3QgUlBUUkVFX0hFQURFUl9TSVpFID0gNDg7XHJcbmNvbnN0IFJQVFJFRV9OT0RFX0xFQUZfSVRFTV9TSVpFID0gMzI7ICAgLy8gbGVhZiBpdGVtIHNpemVcclxuY29uc3QgUlBUUkVFX05PREVfQ0hJTERfSVRFTV9TSVpFID0gMjQ7ICAvLyBjaGlsZCBpdGVtIHNpemVcclxuY29uc3QgQlVGRkVSX1NJWkUgPSA1MTIwMDA7IFxyXG5cclxuLy8qKioqKioqKioqKmpzL2JpZ3dpZy9SUFRyZWUqKioqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuICAgICAvLyAgYnVmZmVyXHJcblxyXG5jbGFzcyBSUFRyZWV7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGZpbGVPZmZzZXQsIGNvbnRlbnRMZW5ndGgsIGNvbmZpZywgbGl0dGxlRW5kaWFuKSB7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMuZmlsZXNpemUgPSBjb250ZW50TGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuZmlsZU9mZnNldCA9IGZpbGVPZmZzZXQ7IC8vIEZpbGUgb2Zmc2V0IHRvIGJlZ2lubmluZyBvZiB0cmVlXHJcbiAgICAgICAgdGhpcy5wYXRoID0gY29uZmlnLnVybDtcclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IGxpdHRsZUVuZGlhbjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbG9hZCgpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGZ1bGZpbGwsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgcm9vdE5vZGVPZmZzZXQgPSBzZWxmLmZpbGVPZmZzZXQgKyBSUFRSRUVfSEVBREVSX1NJWkUsXHJcbiAgICAgICAgICAgICAgICBidWZmZXJlZFJlYWRlciA9IG5ldyBCdWZmZXJlZFJlYWRlcihzZWxmLmNvbmZpZywgc2VsZi5maWxlc2l6ZSwgQlVGRkVSX1NJWkUpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5yZWFkTm9kZShyb290Tm9kZU9mZnNldCwgYnVmZmVyZWRSZWFkZXIpLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYucm9vdE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgZnVsZmlsbChzZWxmKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVhZE5vZGUoZmlsZVBvc2l0aW9uLCBidWZmZXJlZFJlYWRlcikge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoZnVsZmlsbCwgcmVqZWN0KSB7XHJcblxyXG4gICAgICAgICAgICBidWZmZXJlZFJlYWRlci5kYXRhVmlld0ZvclJhbmdlKHtzdGFydDogZmlsZVBvc2l0aW9uLCBzaXplOiA0fSwgZmFsc2UpLnRoZW4oZnVuY3Rpb24gKGRhdGFWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluYXJ5UGFyc2VyID0gbmV3IEJpbmFyeVBhcnNlcihkYXRhVmlldywgc2VsZi5saXR0bGVFbmRpYW4pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gYmluYXJ5UGFyc2VyLmdldEJ5dGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc0xlYWYgPSAodHlwZSA9PT0gMSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzZXJ2ZWQgPSBiaW5hcnlQYXJzZXIuZ2V0Qnl0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gYmluYXJ5UGFyc2VyLmdldFVTaG9ydCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZpbGVQb3NpdGlvbiArPSA0O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBieXRlc1JlcXVpcmVkID0gY291bnQgKiAoaXNMZWFmID8gUlBUUkVFX05PREVfTEVBRl9JVEVNX1NJWkUgOiBSUFRSRUVfTk9ERV9DSElMRF9JVEVNX1NJWkUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlMiA9IHtzdGFydDogZmlsZVBvc2l0aW9uLCBzaXplOiBieXRlc1JlcXVpcmVkfTtcclxuXHJcbiAgICAgICAgICAgICAgICBidWZmZXJlZFJlYWRlci5kYXRhVmlld0ZvclJhbmdlKHJhbmdlMiwgZmFsc2UpLnRoZW4oZnVuY3Rpb24gKGRhdGFWaWV3KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IG5ldyBBcnJheShjb3VudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmFyeVBhcnNlciA9IG5ldyBCaW5hcnlQYXJzZXIoZGF0YVZpZXcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNMZWFmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xlYWY6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDaHJvbTogYmluYXJ5UGFyc2VyLmdldEludCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QmFzZTogYmluYXJ5UGFyc2VyLmdldEludCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZENocm9tOiBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQmFzZTogYmluYXJ5UGFyc2VyLmdldEludCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFPZmZzZXQ6IGJpbmFyeVBhcnNlci5nZXRMb25nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNpemU6IGJpbmFyeVBhcnNlci5nZXRMb25nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpXSA9IGl0ZW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwobmV3IFJQVHJlZU5vZGUoaXRlbXMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIG5vbi1sZWFmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMZWFmOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydENocm9tOiBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRCYXNlOiBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ2hyb206IGJpbmFyeVBhcnNlci5nZXRJbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRCYXNlOiBiaW5hcnlQYXJzZXIuZ2V0SW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRPZmZzZXQ6IGJpbmFyeVBhcnNlci5nZXRMb25nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpXSA9IGl0ZW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKG5ldyBSUFRyZWVOb2RlKGl0ZW1zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZmluZExlYWZJdGVtc092ZXJsYXBwaW5nKGNocklkeCwgc3RhcnRCYXNlLCBlbmRCYXNlKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsLCByZWplY3QpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBsZWFmSXRlbXMgPSBbXSxcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NpbmcgPSBuZXcgU2V0KCksXHJcbiAgICAgICAgICAgICAgICBidWZmZXJlZFJlYWRlciA9IG5ldyBCdWZmZXJlZFJlYWRlcihzZWxmLmNvbmZpZywgc2VsZi5maWxlc2l6ZSwgQlVGRkVSX1NJWkUpO1xyXG5cclxuICAgICAgICAgICAgcHJvY2Vzc2luZy5hZGQoMCk7ICAvLyBaZXJvIHJlcHJlc2VudHMgdGhlIHJvb3Qgbm9kZVxyXG4gICAgICAgICAgICBmaW5kTGVhZkl0ZW1zKHNlbGYucm9vdE5vZGUsIDApO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZExlYWZJdGVtcyhub2RlLCBub2RlSWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoUlBUcmVlLm92ZXJsYXBzKG5vZGUsIGNocklkeCwgc3RhcnRCYXNlLCBlbmRCYXNlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBub2RlLml0ZW1zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoUlBUcmVlLm92ZXJsYXBzKGl0ZW0sIGNocklkeCwgc3RhcnRCYXNlLCBlbmRCYXNlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzTGVhZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlYWZJdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kTGVhZkl0ZW1zKGl0ZW0uY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NpbmcuYWRkKGl0ZW0uY2hpbGRPZmZzZXQpOyAgLy8gUmVwcmVzZW50IG5vZGUgdG8tYmUtbG9hZGVkIGJ5IGl0cyBmaWxlIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVhZE5vZGUoaXRlbS5jaGlsZE9mZnNldCwgYnVmZmVyZWRSZWFkZXIpLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGROb2RlID0gbm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRMZWFmSXRlbXMobm9kZSwgaXRlbS5jaGlsZE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChub2RlSWQgIT0gdW5kZWZpbmVkKSBwcm9jZXNzaW5nLmRlbGV0ZShub2RlSWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFdhaXQgdW50aWwgYWxsIG5vZGVzIGFyZSBwcm9jZXNzZWRcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzaW5nLnNpemU9PT0wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChsZWFmSXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB7Y2hySWR4OnN0YXJ0QmFzZS1lbmRCYXNlfSBvdmVybGFwcyBpdGVtJ3MgaW50ZXJ2YWxcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgb3ZlcmxhcHMoaXRlbSwgY2hySWR4LCBzdGFydEJhc2UsIGVuZEJhc2UpIHtcclxuXHJcbiAgICAgICAgLy8gIGlmIChjaHJJZHggPiBpdGVtLmVuZENocm9tIHx8IGNocklkeCA8IGl0ZW0uc3RhcnRDaHJvbSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJudWxsIGl0ZW1cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoKGNocklkeCA+IGl0ZW0uc3RhcnRDaHJvbSkgfHwgKGNocklkeCA9PSBpdGVtLnN0YXJ0Q2hyb20gJiYgZW5kQmFzZSA+PSBpdGVtLnN0YXJ0QmFzZSkpICYmXHJcbiAgICAgICAgICAgICgoY2hySWR4IDwgaXRlbS5lbmRDaHJvbSkgfHwgKGNocklkeCA9PSBpdGVtLmVuZENocm9tICYmIHN0YXJ0QmFzZSA8IGl0ZW0uZW5kQmFzZSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgUlBUcmVlTm9kZXtcclxuICAgIGNvbnN0cnVjdG9yKGl0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xyXG5cclxuICAgICAgICB2YXIgbWluQ2hyb21JZCA9IE51bWJlci5NQVhfVkFMVUUsXHJcbiAgICAgICAgICAgIG1heENocm9tSWQgPSAwLFxyXG4gICAgICAgICAgICBtaW5TdGFydEJhc2UgPSBOdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgICAgICAgICBtYXhFbmRCYXNlID0gMCxcclxuICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgaXRlbTtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgICAgICAgbWluQ2hyb21JZCA9IE1hdGgubWluKG1pbkNocm9tSWQsIGl0ZW0uc3RhcnRDaHJvbSk7XHJcbiAgICAgICAgICAgIG1heENocm9tSWQgPSBNYXRoLm1heChtYXhDaHJvbUlkLCBpdGVtLmVuZENocm9tKTtcclxuICAgICAgICAgICAgbWluU3RhcnRCYXNlID0gTWF0aC5taW4obWluU3RhcnRCYXNlLCBpdGVtLnN0YXJ0QmFzZSk7XHJcbiAgICAgICAgICAgIG1heEVuZEJhc2UgPSBNYXRoLm1heChtYXhFbmRCYXNlLCBpdGVtLmVuZEJhc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGFydENocm9tID0gbWluQ2hyb21JZDtcclxuICAgICAgICB0aGlzLmVuZENocm9tID0gbWF4Q2hyb21JZDtcclxuICAgICAgICB0aGlzLnN0YXJ0QmFzZSA9IG1pblN0YXJ0QmFzZTtcclxuICAgICAgICB0aGlzLmVuZEJhc2UgPSBtYXhFbmRCYXNlO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuLy8qKioqKioqKioqKioqKioqKioqanMvYmluYXJ5LmpzKioqKioqKioqKioqKioqKioqXHJcbmNsYXNzIEJpbmFyeVBhcnNlcntcclxuICAgIGNvbnN0cnVjdG9yKGRhdGFWaWV3LCBsaXR0bGVFbmRpYW4pIHtcclxuXHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSAobGl0dGxlRW5kaWFuID8gbGl0dGxlRW5kaWFuIDogdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gZGF0YVZpZXc7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBkYXRhVmlldy5ieXRlTGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGF2YWlsYWJsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbUxlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc05leHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24gPCB0aGlzLmxlbmd0aCAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Qnl0ZSgpIHtcclxuICAgICAgICB2YXIgcmV0VmFsdWUgPSB0aGlzLnZpZXcuZ2V0VWludDgodGhpcy5wb3NpdGlvbiwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24rKztcclxuICAgICAgICByZXR1cm4gcmV0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2hvcnQoKSB7XHJcblxyXG4gICAgICAgIHZhciByZXRWYWx1ZSA9IHRoaXMudmlldy5nZXRJbnQxNih0aGlzLnBvc2l0aW9uLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAyXHJcbiAgICAgICAgcmV0dXJuIHJldFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVTaG9ydCgpe1xyXG5cclxuICAgICAgICAvLyB2YXIgYnl0ZTEgPSB0aGlzLmdldEJ5dGUoKSxcclxuICAgICAgICAvLyAgICAgYnl0ZTIgPSB0aGlzLmdldEJ5dGUoKSxcclxuICAgICAgICAvLyAgICAgcmV0VmFsdWUgPSAoKGJ5dGUyIDw8IDI0ID4+PiAxNikgKyAoYnl0ZTEgPDwgMjQgPj4+IDI0KSk7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiByZXRWYWx1ZTtcclxuXHJcbiAgICAgICAvL1xyXG4gICAgICAgIHZhciByZXRWYWx1ZSA9IHRoaXMudmlldy5nZXRVaW50MTYgKHRoaXMucG9zaXRpb24sIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDJcclxuICAgICAgICByZXR1cm4gcmV0VmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldEludCgpIHtcclxuXHJcbiAgICAgICAgdmFyIHJldFZhbHVlID0gdGhpcy52aWV3LmdldEludDMyKHRoaXMucG9zaXRpb24sIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDQ7XHJcbiAgICAgICAgcmV0dXJuIHJldFZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRVSW50KCkge1xyXG4gICAgICAgIHZhciByZXRWYWx1ZSA9IHRoaXMudmlldy5nZXRVaW50MzIodGhpcy5wb3NpdGlvbiwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcclxuICAgICAgICByZXR1cm4gcmV0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TG9uZygpIHtcclxuXHJcbiAgICAgICAgLy8gRGF0YVZpZXcgZG9lc24ndCBzdXBwb3J0IGxvbmcuIFNvIHdlJ2xsIHRyeSBtYW51YWxseVxyXG5cclxuICAgICAgICB2YXIgYiA9IFtdO1xyXG4gICAgICAgIGJbMF0gPSB0aGlzLnZpZXcuZ2V0VWludDgodGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgYlsxXSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgMSk7XHJcbiAgICAgICAgYlsyXSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgMik7XHJcbiAgICAgICAgYlszXSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgMyk7XHJcbiAgICAgICAgYls0XSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgNCk7XHJcbiAgICAgICAgYls1XSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgNSk7XHJcbiAgICAgICAgYls2XSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgNik7XHJcbiAgICAgICAgYls3XSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgNyk7XHJcblxyXG4gICAgICAgIHZhciB2YWx1ZSA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMubGl0dGxlRW5kaWFuKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBiLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAqIDI1NikgKyBiW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAqIDI1NikgKyBiW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSA4O1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdHJpbmcobGVuKSB7XHJcblxyXG4gICAgICAgIHZhciBzID0gXCJcIjtcclxuICAgICAgICB2YXIgYztcclxuICAgICAgICB3aGlsZSAoKGMgPSB0aGlzLnZpZXcuZ2V0VWludDgodGhpcy5wb3NpdGlvbisrKSkgIT0gMCkge1xyXG4gICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XHJcbiAgICAgICAgICAgIGlmIChsZW4gJiYgcy5sZW5ndGggPT0gbGVuKSBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Rml4ZWRMZW5ndGhTdHJpbmcobGVuKSB7XHJcblxyXG4gICAgICAgIHZhciBzID0gXCJcIjtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgYztcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgYyA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uKyspO1xyXG4gICAgICAgICAgICBpZiAoYyA+IDApIHtcclxuICAgICAgICAgICAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRGaXhlZExlbmd0aFRyaW1tZWRTdHJpbmcobGVuKSB7XHJcblxyXG4gICAgICAgIHZhciBzID0gXCJcIjtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgYztcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgYyA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvc2l0aW9uKyspO1xyXG4gICAgICAgICAgICBpZiAoYyA+IDMyKSB7XHJcbiAgICAgICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmxvYXQoKSB7XHJcblxyXG4gICAgICAgIHZhciByZXRWYWx1ZSA9IHRoaXMudmlldy5nZXRGbG9hdDMyKHRoaXMucG9zaXRpb24sIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDQ7XHJcbiAgICAgICAgcmV0dXJuIHJldFZhbHVlO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RG91YmxlKCkge1xyXG5cclxuICAgICAgICB2YXIgcmV0VmFsdWUgPSB0aGlzLnZpZXcuZ2V0RmxvYXQ2NCh0aGlzLnBvc2l0aW9uLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSA4O1xyXG4gICAgICAgIHJldHVybiByZXRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBza2lwKG4pIHtcclxuXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBuO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhIGJnemlwIChiYW0gYW5kIHRhYml4KSB2aXJ0dWFsIHBvaW50ZXJcclxuICAgICAqIFRPRE8gLS0gd2h5IGlzbid0IDh0aCBieXRlIHVzZWQgP1xyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKi9cclxuICAgIGdldFZQb2ludGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAodGhpcy52aWV3LmdldFVpbnQ4KHBvc2l0aW9uICsgMSkgPDwgOCkgfCAodGhpcy52aWV3LmdldFVpbnQ4KHBvc2l0aW9uKSksXHJcbiAgICAgICAgICAgIGJ5dGU2ID0gKCh0aGlzLnZpZXcuZ2V0VWludDgocG9zaXRpb24gKyA2KSAmIDB4ZmYpICogMHgxMDAwMDAwMDApLFxyXG4gICAgICAgICAgICBieXRlNSA9ICgodGhpcy52aWV3LmdldFVpbnQ4KHBvc2l0aW9uICsgNSkgJiAweGZmKSAqIDB4MTAwMDAwMCksXHJcbiAgICAgICAgICAgIGJ5dGU0ID0gKCh0aGlzLnZpZXcuZ2V0VWludDgocG9zaXRpb24gKyA0KSAmIDB4ZmYpICogMHgxMDAwMCksXHJcbiAgICAgICAgICAgIGJ5dGUzID0gKCh0aGlzLnZpZXcuZ2V0VWludDgocG9zaXRpb24gKyAzKSAmIDB4ZmYpICogMHgxMDApLFxyXG4gICAgICAgICAgICBieXRlMiA9ICgodGhpcy52aWV3LmdldFVpbnQ4KHBvc2l0aW9uICsgMikgJiAweGZmKSksXHJcbiAgICAgICAgICAgIGJsb2NrID0gYnl0ZTYgKyBieXRlNSArIGJ5dGU0ICsgYnl0ZTMgKyBieXRlMjtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDg7XHJcblxyXG4gICAgICAgIC8vICAgICAgIGlmIChibG9jayA9PSAwICYmIG9mZnNldCA9PSAwKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIC8vICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWUG9pbnRlcihibG9jaywgb2Zmc2V0KTtcclxuICAgICAgICAvLyAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFZQb2ludGVye1xyXG4gICAgY29uc3RydWN0b3IoYmxvY2ssIG9mZnNldCkge1xyXG4gICAgICAgIHRoaXMuYmxvY2sgPSBibG9jaztcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgIH1cclxuXHJcbiAgICBpc0xlc3NUaGFuKHZwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2sgPCB2cC5ibG9jayB8fFxyXG4gICAgICAgICAgICAodGhpcy5ibG9jayA9PT0gdnAuYmxvY2sgJiYgdGhpcy5vZmZzZXQgPCB2cC5vZmZzZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzR3JlYXRlclRoYW4odnApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ibG9jayA+IHZwLmJsb2NrIHx8XHJcbiAgICAgICAgICAgICh0aGlzLmJsb2NrID09PSB2cC5ibG9jayAmJiB0aGlzLm9mZnNldCA+IHZwLm9mZnNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyB0aGlzLmJsb2NrICsgXCI6XCIgKyB0aGlzLm9mZnNldDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vKioqKioqKmpzL2JpZ3dpZy9id1RvdGFsU3VtbWFyeS5qcyoqKioqKioqKioqKipcclxuXHJcblxyXG5cclxuY2xhc3MgQldUb3RhbFN1bW1hcnl7XHJcbiAgICBjb25zdHJ1Y3RvcihieXRlQnVmZmVyKSB7XHJcblxyXG4gICAgICAgIGlmIChieXRlQnVmZmVyKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJhc2VzQ292ZXJlZCA9IGJ5dGVCdWZmZXIuZ2V0TG9uZygpO1xyXG4gICAgICAgICAgICB0aGlzLm1pblZhbCA9IGJ5dGVCdWZmZXIuZ2V0RG91YmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4VmFsID0gYnl0ZUJ1ZmZlci5nZXREb3VibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zdW1EYXRhID0gYnl0ZUJ1ZmZlci5nZXREb3VibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zdW1TcXVhcmVzID0gYnl0ZUJ1ZmZlci5nZXREb3VibGUoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZVN0YXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VzQ292ZXJlZCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubWluVmFsID0gMDtcclxuICAgICAgICAgICAgdGhpcy5tYXhWYWwgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnN1bURhdGEgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnN1bVNxdWFyZXMgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm1lYW4gPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnN0ZGRldiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAgY29tcHV0ZVN0YXRzKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5iYXNlc0NvdmVyZWQ7XHJcbiAgICAgICAgaWYgKG4gPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVhbiA9IHRoaXMuc3VtRGF0YSAvIG47XHJcbiAgICAgICAgICAgIHRoaXMuc3RkZGV2ID0gTWF0aC5zcXJ0KHRoaXMuc3VtU3F1YXJlcyAvIChuIC0gMSkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIG1pbiA9IHRoaXMubWluVmFsIDwgMCA/IHRoaXMubWVhbiAtIDIgKiB0aGlzLnN0ZGRldiA6IDAsXHJcbiAgICAgICAgICAgICAgICBtYXggPSB0aGlzLm1heFZhbCA+IDAgPyB0aGlzLm1lYW4gKyAyICogdGhpcy5zdGRkZXYgOiAwO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0UmFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IHRoaXMubWVhbiArIDMgKiB0aGlzLnN0ZGRldlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVN0YXRzKHN0YXRzKSB7XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZXNDb3ZlcmVkICs9IHN0YXRzLmNvdW50O1xyXG4gICAgICAgIHRoaXMuc3VtRGF0YSArPSBzdGF0dXMuc3VtRGF0YTtcclxuICAgICAgICB0aGlzLnN1bVNxdWFyZXMgKz0gc3VtU3F1YXJlcztcclxuICAgICAgICB0aGlzLm1pblZhbCA9IE1JTihfbWluVmFsLCBtaW4pO1xyXG4gICAgICAgIHRoaXMubWF4VmFsID0gTUFYKF9tYXhWYWwsIG1heCk7XHJcblxyXG4gICAgICAgIGNvbXB1dGVTdGF0cy5jYWxsKHRoaXMpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuLy8qKioqKioqKioqKioqKipqcy9iaWd3aWcvYndCUFRyZWUuanMqKioqKioqKioqKioqKlxyXG5cclxuXHJcbmNvbnN0IEJQVFJFRV9NQUdJQ19MVEggPSAweDc4Q0E4QzkxO1xyXG5jb25zdCBCUFRSRUVfTUFHSUNfSFRMID0gMHg5MThDQ0E3ODtcclxuY29uc3QgQlBUUkVFX0hFQURFUl9TSVpFID0gMzI7XHJcblxyXG5cclxuIGNsYXNzIEJQVHJlZXtcclxuICAgICBjb25zdHJ1Y3RvcihiaW5hcnlQYXJzZXIsIHN0YXJ0T2Zmc2V0KSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgZ2Vub21lID0gIG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuaGVhZGVyID0ge307XHJcbiAgICAgICAgdGhpcy5oZWFkZXIubWFnaWMgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIuYmxvY2tTaXplID0gYmluYXJ5UGFyc2VyLmdldEludCgpO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyLmtleVNpemUgPSBiaW5hcnlQYXJzZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIudmFsU2l6ZSA9IGJpbmFyeVBhcnNlci5nZXRJbnQoKTtcclxuICAgICAgICB0aGlzLmhlYWRlci5pdGVtQ291bnQgPSBiaW5hcnlQYXJzZXIuZ2V0TG9uZygpO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyLnJlc2VydmVkID0gYmluYXJ5UGFyc2VyLmdldExvbmcoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0ge307XHJcblxyXG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHdhbGsgdHJlZSB0byBwb3B1bGF0ZSBkaWN0aW9uYXJ5XHJcbiAgICAgICAgcmVhZFRyZWVOb2RlKGJpbmFyeVBhcnNlciwgLTEsIHRoaXMuaGVhZGVyLmtleVNpemUsIHRoaXMuZGljdGlvbmFyeSk7XHJcblxyXG4gICAgICAgIHZhciBpdGVtU2l6ZSA9IDggKyB0aGlzLmhlYWRlci5rZXlTaXplO1xyXG4gICAgICAgIHZhciBtaW5TaXplID0gNCArIGl0ZW1TaXplOyAgIC8vIEJ5dGVzIGZvciBhIG5vZGUgd2l0aCAxIGl0ZW1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZFRyZWVOb2RlKGJ5dGVCdWZmZXIsIG9mZnNldCwga2V5U2l6ZSwgZGljdGlvbmFyeSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKG9mZnNldCA+PSAwKSBieXRlQnVmZmVyLnBvc2l0aW9uID0gb2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgdmFyIHR5cGUgPSBieXRlQnVmZmVyLmdldEJ5dGUoKSxcclxuICAgICAgICAgICAgICAgIHJlc2VydmVkID0gYnl0ZUJ1ZmZlci5nZXRCeXRlKCksXHJcbiAgICAgICAgICAgICAgICBjb3VudCA9IGJ5dGVCdWZmZXIuZ2V0VVNob3J0KCksXHJcbiAgICAgICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICAgICAgY2hyb21JZCxcclxuICAgICAgICAgICAgICAgIGNocm9tU2l6ZSxcclxuICAgICAgICAgICAgICAgIGNoaWxkT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgYnVmZmVyT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgY3Vyck9mZnNldDtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gYnl0ZUJ1ZmZlci5nZXRGaXhlZExlbmd0aFRyaW1tZWRTdHJpbmcoa2V5U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hyb21JZCA9IGJ5dGVCdWZmZXIuZ2V0SW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hyb21TaXplID0gYnl0ZUJ1ZmZlci5nZXRJbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZ2Vub21lKSBrZXkgPSBnZW5vbWUuZ2V0Q2hyb21vc29tZU5hbWUoa2V5KTsgIC8vIFRyYW5zbGF0ZSB0byBjYW5vbmljYWwgY2hyIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV0gPSBjaHJvbUlkO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgLy8gbm9uLWxlYWZcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBieXRlQnVmZmVyLmdldEZpeGVkTGVuZ3RoVHJpbW1lZFN0cmluZyhrZXlTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZE9mZnNldCA9IGJ5dGVCdWZmZXIuZ2V0TG9uZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlck9mZnNldCA9IGNoaWxkT2Zmc2V0IC0gc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyck9mZnNldCA9IGJ5dGVCdWZmZXIucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZFRyZWVOb2RlKGJ5dGVCdWZmZXIsIGJ1ZmZlck9mZnNldCwga2V5U2l6ZSwgZGljdGlvbmFyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZUJ1ZmZlci5wb3NpdGlvbiA9IGN1cnJPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQge0JXU291cmNlLEJpbmFyeVBhcnNlcn07XHJcblxyXG5cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkE7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBS0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7O0FBcUhBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUZBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBOzs7QUFwSkE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQkE7QUFDQTtBQWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFGQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOzs7QUF5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../MLVPanel/src/bigwig.js\n");

/***/ }),

/***/ "../MLVPanel/src/extra/sca_bam_track.js":
/*!*****************************************!*\
  !*** .Panel/src/extra/sca_bam_track.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SCABAMTrack = undefined;\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _bam_track = __webpack_require__(/*! ../bam_track.js */ \"../MLVPanel/src/bam_track.js\");\n\nvar _bam = __webpack_require__(/*! ../bam.js */ \"../MLVPanel/src/bam.js\");\n\nvar _tracks = __webpack_require__(/*! ../tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SCACoverageMap = function () {\n    function SCACoverageMap(chr, start, end, parent) {\n        _classCallCheck(this, SCACoverageMap);\n\n        this.chr = chr;\n        this.bpStart = start;\n        this.length = end - start;\n        this.parent = parent;\n        this.reset();\n    }\n\n    _createClass(SCACoverageMap, [{\n        key: \"reset\",\n        value: function reset() {\n            this.coverages = { \"selected\": null };\n\n            for (var c in this.parent.categories) {\n                var a = new Array(this.length);\n                a.maximum = 0;\n                a.count = this.parent.category_counts[c];\n                this.coverages[c] = a;\n            }\n            this.resetSelected();\n        }\n    }, {\n        key: \"resetSelected\",\n        value: function resetSelected() {\n            var a = new Array(this.length);\n            a.maximum = 0;\n            a.count = this.parent.selected_count;\n            this.coverages[\"selected\"] = a;\n        }\n    }, {\n        key: \"incCounts\",\n        value: function incCounts(alignment, sel_only) {\n            var self = this;\n            if (!sel_only) {\n\n                var _cat = this.parent.category_function(alignment.tagBA.CB);\n\n                if (alignment.blocks === undefined) {\n\n                    incBlockCount(alignment, _cat);\n                } else {\n                    alignment.blocks.forEach(function (block) {\n                        incBlockCount(block, _cat);\n                    });\n                }\n            }\n\n            var cat = \"selected\";\n\n            if (this.parent.selected) {\n                if (!this.parent.selected[alignment.tagBA.CB]) {\n                    return;\n                }\n            }\n\n            if (alignment.blocks === undefined) {\n\n                incBlockCount(alignment, cat);\n            } else {\n                alignment.blocks.forEach(function (block) {\n                    incBlockCount(block, cat);\n                });\n            }\n\n            function incBlockCount(block, cat) {\n                var coverage = self.coverages[cat];\n                if (!coverage) {\n                    return;\n                }\n\n                var //key,\n                //base,\n                i, j, q;\n\n                for (i = block.start - self.bpStart, j = 0; j < block.len; i++, j++) {\n\n                    if (!coverage[i]) {\n                        coverage[i] = { total: 0, maximum: 0 }; //new Coverage();\n                    }\n\n                    //base = block.seq.charAt(j);\n                    //key = (alignment.strand) ? \"pos\" + base : \"neg\" + base;\n                    //q = block.qual[j];\n\n                    //coverage[i][key] += 1;\n                    //coverage[i][\"qual\" + base] += q;\n\n                    coverage[i].total += 1;\n                    //coverage[i].qual += q;\n\n                    coverage.maximum = Math.max(coverage[i].total, coverage.maximum);\n                }\n            }\n        }\n    }]);\n\n    return SCACoverageMap;\n}();\n\nvar SCACoverageTrack = function (_CoverageTrack) {\n    _inherits(SCACoverageTrack, _CoverageTrack);\n\n    function SCACoverageTrack(coverage, height) {\n        _classCallCheck(this, SCACoverageTrack);\n\n        return _possibleConstructorReturn(this, (SCACoverageTrack.__proto__ || Object.getPrototypeOf(SCACoverageTrack)).call(this, coverage, height));\n    }\n\n    _createClass(SCACoverageTrack, [{\n        key: \"drawScale\",\n        value: function drawScale(ctx) {\n            var top = this.parent.top;\n            var cms = this.parent.feature_source.alignmentContainer.coverageMap;\n            var ind_track_height = this.parent.config.ind_track_height ? this.parent.config.ind_track_height : 50;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this.parent.cat_order[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var name = _step.value;\n\n                    var c = cms.coverages[name];\n                    var bot = top + ind_track_height;\n                    ctx.beginPath();\n                    ctx.moveTo(0, top);\n                    ctx.lineTo(0, bot);\n                    ctx.moveTo(0, top);\n                    ctx.lineTo(20, top);\n                    ctx.moveTo(0, bot);\n                    ctx.lineTo(20, bot);\n                    ctx.font = \"12px Arial\";\n                    ctx.stroke();\n                    ctx.textBaseline = \"top\";\n                    ctx.fillStyle = \"black\";\n                    var num = c.maximum / c.count;\n                    if (isNaN(num)) {\n                        num = 0;\n                    }\n                    ctx.fillText(num.toFixed(2), 20, top);\n                    ctx.font = \"14px Arial\";\n                    ctx.textBaseline = \"middle\";\n                    ctx.fillText(name, 2, top + ind_track_height / 2);\n                    ctx.font = \"12px Arial\";\n                    top += ind_track_height;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"draw\",\n        value: function draw(options) {\n            var self = this,\n                alignmentContainer = options.features,\n                ctx = options.context,\n                bpPerPixel = options.bpPerPixel,\n                bpStart = options.bpStart,\n                pixelWidth = options.pixelWidth,\n                bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\n                coverageMap = alignmentContainer.coverageMap,\n                bp,\n                x,\n                y,\n                h,\n                refBase,\n                i,\n                len,\n                item,\n                accumulatedHeight,\n                sequence;\n\n            var ind_track_height = this.parent.config.ind_track_height ? this.parent.config.ind_track_height : 50;\n\n            if (coverageMap.refSeq) sequence = coverageMap.refSeq.toUpperCase();\n            var top = options.top;\n            var w = Math.max(1, Math.ceil(1.0 / bpPerPixel));\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = this.parent.cat_order[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var cb = _step2.value;\n\n\n                    var coverage = coverageMap.coverages[cb];\n                    console.log(cb + \":\" + coverage.count);\n                    var max = coverage.maximum / coverage.count;\n                    ctx.fillStyle = this.parent.categories[cb];\n                    if (cb === \"selected\") {\n                        ctx.fillStyle = \"red\";\n                    }\n                    for (i = 0, len = coverage.length; i < len; i++) {\n\n                        bp = coverageMap.bpStart + i;\n                        if (bp < bpStart) continue;\n                        if (bp > bpEnd) break;\n\n                        item = coverage[i];\n                        if (!item) continue;\n\n                        h = Math.round(item.total / coverage.count / max * ind_track_height);\n                        y = ind_track_height - h;\n                        x = Math.floor((bp - bpStart) / bpPerPixel);\n\n                        ctx.fillRect(x, y + top, w, h);\n                    }\n                    top += ind_track_height;\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            this.dataRange.max = coverageMap.maximum;\n            options.top += top;\n        }\n    }]);\n\n    return SCACoverageTrack;\n}(_bam_track.CoverageTrack);\n\nvar SCABAMTrack = function (_BAMTrack) {\n    _inherits(SCABAMTrack, _BAMTrack);\n\n    function SCABAMTrack(config) {\n        _classCallCheck(this, SCABAMTrack);\n\n        if (!config.featureHeight) {\n            config.featureHeight = 12;\n        }\n\n        var _this2 = _possibleConstructorReturn(this, (SCABAMTrack.__proto__ || Object.getPrototypeOf(SCABAMTrack)).call(this, config));\n\n        _this2.display_alignments = false;\n        _this2.cm_class = SCACoverageMap;\n        _this2.keep_raw_alignments = true;\n        return _this2;\n    }\n\n    _createClass(SCABAMTrack, [{\n        key: \"_setFeatureSource\",\n        value: function _setFeatureSource() {\n            this.feature_source = new _bam.BamSource(this.config, this);\n\n            this.feature_source.setViewAsPairs(true);\n\n            this.coverageTrack = new SCACoverageTrack(this.config, this);\n            this.alignmentTrack = new _bam_track.AlignmentTrack(this.config, this);\n        }\n    }, {\n        key: \"setSelected\",\n        value: function setSelected(selected, count) {\n            this.selected = selected;\n            var cm = this.feature_source.alignmentContainer.coverageMap;\n            this.selected_count = count;\n            cm.resetSelected();\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this.feature_source.alignmentContainer.raw_alignments[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var alignment = _step3.value;\n\n                    cm.incCounts(alignment, true);\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getFeatures\",\n        value: function getFeatures(chr, bpStart, bpEnd, force, data) {\n            if (bpEnd - bpStart > 200000) {\n                this.draw_zoom_in = true;\n                return new Promise(function (fulfill, reject) {\n                    fulfill([]);\n                });\n            }\n            this.draw_zoom_in = false;\n            return _get(SCABAMTrack.prototype.__proto__ || Object.getPrototypeOf(SCABAMTrack.prototype), \"getFeatures\", this).call(this, chr, bpStart, bpEnd, force, data);\n        }\n    }, {\n        key: \"setCoverageCategory\",\n        value: function setCoverageCategory(cat_to_color, cat_counts, cat_func, update) {\n            this.categories = cat_to_color;\n            var ind_track_height = this.config.ind_track_height ? this.config.ind_track_height : 50;\n            var li = [];\n            for (var val in cat_counts) {\n                li.push({ val: val, num: cat_counts[val] });\n            }\n            li.sort(function (a, b) {\n                if (a.val === \"other\") {\n                    return 1;\n                }\n                return b.num - a.num;\n            });\n            this.cat_order = [\"selected\"];\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = li[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var l = _step4.value;\n\n                    this.cat_order.push(l.val);\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            ;\n\n            this.config.height = (Object.keys(cat_to_color).length + 1) * ind_track_height;\n            this.category_counts = cat_counts;\n            this.category_function = cat_func;\n            if (update) {\n                var cm = this.feature_source.alignmentContainer.coverageMap;\n                cm.reset();\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                    for (var _iterator5 = this.feature_source.alignmentContainer.raw_alignments[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                        var alignment = _step5.value;\n\n                        cm.incCounts(alignment);\n                    }\n                } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n                    } finally {\n                        if (_didIteratorError5) {\n                            throw _iteratorError5;\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"drawScale\",\n        value: function drawScale(pixel_height, ctx) {\n            if (this.draw_zoom_in) {\n                return;\n            }\n            this.coverageTrack.drawScale(ctx);\n        }\n    }, {\n        key: \"addExtraControls\",\n        value: function addExtraControls(dialog) {\n            var self = this;\n            dialog.div.empty();\n\n            dialog.scale_slider = $(\"<div>\").slider({\n                max: 100,\n                min: 10,\n                value: this.config.ind_track_height ? this.config.ind_track_height : 50,\n                slide: function slide(e, ui) {\n                    dialog.config.y_max = ui.value;\n                    if (dialog.panel) {\n                        dialog.panel.setTrackAttribute(dialog.config.track_id, \"ind_track_height\", ui.value);\n                        var h = Object.keys(self.category_counts).length + 1;\n                        dialog.panel.setTrackAttribute(dialog.config.track_id, \"height\", h * ui.value);\n                        dialog.panel.update();\n                    }\n                }\n            }).appendTo(dialog.div);\n        }\n    }]);\n\n    return SCABAMTrack;\n}(_bam_track.BAMTrack);\n\n_tracks.MLVTrack.track_types[\"sca_bam_track\"] = {\n    \"class\": SCABAMTrack\n};\n\nexports.SCABAMTrack = SCABAMTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/extra/sca_bam_track.js\n");

/***/ }),

/***/ "../MLVPanel/src/extra/simple_browser.js":
/*!******************************************!*\
  !*** .Panel/src/extra/simple_browser.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.SinglePanelBrowser = exports.BrowserControls = exports.SimpleBrowser = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _panel = __webpack_require__(/*! ../panel.js */ \"../MLVPanel/src/panel.js\");\n\nvar _track_dialog = __webpack_require__(/*! ../track_dialog.js */ \"../MLVPanel/src/track_dialog.js\");\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BaseBrowser = function () {\n\tfunction BaseBrowser(parent_div, config) {\n\t\t_classCallCheck(this, BaseBrowser);\n\n\t\tthis.div = $(\"#\" + parent_div).css({ \"padding\": \"2px\", \"overflow\": \"hidden\" });\n\t\tthis.listeners = {};\n\t\tthis.width = this.div.width();\n\t\tif (config.tracks_proxy) {\n\t\t\tthis.tracks_proxy = config.tracks_proxy;\n\t\t}\n\t}\n\n\t_createClass(BaseBrowser, [{\n\t\tkey: \"addControls\",\n\t\tvalue: function addControls(control_config) {\n\t\t\tvar div = $(\"<div>\").attr(\"id\", \"mlv-iv-control-panel\").appendTo(this.div);\n\t\t\tthis.control_panel = new BrowserControls(\"mlv-iv-control-panel\", this, control_config);\n\t\t\tvar new_div = $(\"<div>\").css({ \"height\": \"calc(100% - 30px)\", \"width\": \"calc(100% - 5px)\", \"position\": \"absolute\", \"top\": \"30px\" }).appendTo(this.div);\n\t\t\tthis.div = new_div;\n\t\t}\n\t}, {\n\t\tkey: \"addToMenu\",\n\t\tvalue: function addToMenu(element) {\n\t\t\tthis.control_panel.container.append(element);\n\t\t}\n\t}, {\n\t\tkey: \"replaceWithProxy\",\n\t\tvalue: function replaceWithProxy(url) {\n\t\t\tvar tp = this.tracks_proxy;\n\t\t\tif (!tp) {\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\tfor (var name in tp) {\n\t\t\t\tif (url.includes(name)) {\n\t\t\t\t\treturn url.replace(name, tp[name]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t}]);\n\n\treturn BaseBrowser;\n}();\n\nvar SinglePanelBrowser = function (_BaseBrowser) {\n\t_inherits(SinglePanelBrowser, _BaseBrowser);\n\n\tfunction SinglePanelBrowser(parent_div, track_config, config) {\n\t\t_classCallCheck(this, SinglePanelBrowser);\n\n\t\tif (!config) {\n\t\t\tconfig = {};\n\t\t}\n\n\t\tvar _this = _possibleConstructorReturn(this, (SinglePanelBrowser.__proto__ || Object.getPrototypeOf(SinglePanelBrowser)).call(this, parent_div, config));\n\n\t\t_this.panel = new _panel.MLVPanel(track_config, {\n\t\t\tallow_user_zoom: true,\n\t\t\tallow_user_drag: true,\n\t\t\tfixed_height_mode: true,\n\t\t\tallow_user_range_selection: true\n\t\t});\n\t\tif (config.add_controls) {\n\t\t\t_this.addControls({ allowed_track_types: config.allowed_track_types });\n\t\t}\n\n\t\t_this.div.append(_this.panel.getDiv());\n\t\tvar self = _this;\n\t\t$(window).on(\"resize\", function (e) {\n\t\t\tif (!e.target.open) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tself.setSize();\n\t\t});\n\t\tif (config.add_ruler) {\n\t\t\t_this.panel.addRulerTrack();\n\t\t}\n\t\t_this.panel.addLegend();\n\t\t_this.setSize();\n\n\t\t_this.panel.addListener(\"range_selected\", function (chr, start, end) {\n\t\t\tself.panel.update(chr, start, end);\n\t\t});\n\n\t\treturn _this;\n\t}\n\n\t_createClass(SinglePanelBrowser, [{\n\t\tkey: \"setSize\",\n\t\tvalue: function setSize() {\n\t\t\tthis.panel.setWidth(this.div.width());\n\t\t\tthis.panel.setHeight(this.div.height());\n\t\t\tif (this.panel.chr) {\n\t\t\t\tthis.panel.update();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"zoom\",\n\t\tvalue: function zoom(amount) {\n\t\t\tvar range = this.panel.end - this.panel.start;\n\t\t\tvar middle = this.panel.start + range / 2;\n\t\t\tvar new_range = range / amount;\n\t\t\tvar st = Math.round(middle - new_range / 2);\n\t\t\tvar en = Math.round(middle + new_range / 2);\n\t\t\tthis.panel.update(this.panel.chr, st, en);\n\t\t}\n\t}, {\n\t\tkey: \"addTrackFromBrowser\",\n\t\tvalue: function addTrackFromBrowser(config, update, pos) {\n\t\t\tconfig.url = this.replaceWithProxy(config.url);\n\t\t\tconfig.allow_user_remove = true;\n\t\t\tthis.panel.addTrack(config);\n\t\t\tif (update) {\n\t\t\t\tthis.panel.repaint(true, true);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"goToPosition\",\n\t\tvalue: function goToPosition(chr, start, end) {\n\t\t\tthis.panel.update(chr, start, end);\n\t\t}\n\t}, {\n\t\tkey: \"getPosition\",\n\t\tvalue: function getPosition() {\n\t\t\treturn {\n\t\t\t\tchr: this.panel.chr,\n\t\t\t\tstart: Math.round(this.panel.start),\n\t\t\t\tend: Math.round(this.panel.end)\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: \"addListener\",\n\t\tvalue: function addListener(type, func) {\n\n\t\t\tthis.panel.addListener(type, func);\n\t\t}\n\t}, {\n\t\tkey: \"setState\",\n\t\tvalue: function setState(state) {\n\t\t\tthis.panel.removeAllTracks();\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = state.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar conf = _step.value;\n\n\t\t\t\t\tthis.panel.addTrack(conf);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (state.position) {\n\t\t\t\tthis.panel.update(state.position.chr, state.position.start, state.position.end);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"setHighlightedRegion\",\n\t\tvalue: function setHighlightedRegion(chr, start, end) {\n\t\t\tthis.panel.removeHighlightedRegion(\"region_1\");\n\t\t\tif (!chr) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.panel.setHighlightedRegion({ chr: chr, start: start, end: end }, \"region_1\", \"blue\");\n\t\t}\n\t}]);\n\n\treturn SinglePanelBrowser;\n}(BaseBrowser);\n\nvar SimpleBrowser = function (_BaseBrowser2) {\n\t_inherits(SimpleBrowser, _BaseBrowser2);\n\n\t/**\r\n    * Creates a filter panel\r\n    * @param {string } parent_div- The id of the div element to house the browser\r\n    * @param {Object} [config] - config of how the browser is constructed\r\n    * <ul>\r\n    * <li>add_controls - if true then a control bar is added (default false)</li>\r\n    * <li>add_ruler - if true a ruler track will be added (default false)\r\n    * </ul>\r\n    */\n\tfunction SimpleBrowser(parent_div, config) {\n\t\t_classCallCheck(this, SimpleBrowser);\n\n\t\tif (!config) {\n\t\t\tconfig = {};\n\t\t}\n\n\t\tvar _this2 = _possibleConstructorReturn(this, (SimpleBrowser.__proto__ || Object.getPrototypeOf(SimpleBrowser)).call(this, parent_div, config));\n\n\t\tif (config.add_controls) {\n\t\t\t_this2.addControls({ limit_chromosome: config.limit_chromosome, allowed_track_types: config.allowed_track_types });\n\t\t}\n\n\t\t_this2.panels = {};\n\t\t_this2.chr = \"\";\n\t\t_this2.start = 1;\n\t\t_this2.end = 10000;\n\t\tif (config.add_ruler) {\n\t\t\t_this2.addPanel(\"ruler\");\n\t\t}\n\n\t\tvar self = _this2;\n\t\t$(window).on(\"resize\", function (e) {\n\t\t\tif (!e.target.open) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tself.setWidth();\n\t\t});\n\n\t\t_this2._addHandlers();\n\t\treturn _this2;\n\t}\n\n\t_createClass(SimpleBrowser, [{\n\t\tkey: \"_addHandlers\",\n\t\tvalue: function _addHandlers() {\n\t\t\tvar self = this;\n\t\t\tthis.div.on('mousewheel.zoom  mouse.zoom DOMMouseScroll', function (event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.preventDefault();\n\t\t\t\tvar deltaY = event.originalEvent.deltaY;\n\t\t\t\tif (deltaY === undefined) {\n\t\t\t\t\tdeltaY = event.originalEvent.detail;\n\t\t\t\t}\n\t\t\t\tif (self._isLoading() || self.bp_per_pixel < 0.05 && deltaY > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar canvasCoords = self._translateCoOrds(event.originalEvent);\n\t\t\t\tvar factor = deltaY < 0 ? 2 : 0.5;\n\t\t\t\tvar mbp = self.start + canvasCoords.x * self.bp_per_pixel;\n\t\t\t\tvar new_length = Math.round((self.end - self.start) * factor);\n\t\t\t\tvar new_start = Math.round(mbp - canvasCoords.x / self.width * new_length);\n\t\t\t\tself.goToPosition(self.chr, new_start, new_start + new_length);\n\t\t\t});\n\n\t\t\tthis.div.on(\"mousedown.draghandler\", function (e) {\n\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar canvasCoords = self._translateCoOrds(e);\n\t\t\t\tself.isMouseDown = true;\n\t\t\t\tself.start_dragging = true;\n\t\t\t\tself.lastMouseX = canvasCoords.x;\n\t\t\t\tself.mouseDownX = self.lastMouseX;\n\t\t\t}).on(\"mousemove.draghandler\", function (e) {\n\t\t\t\tvar canvasCoords = self._translateCoOrds(e);\n\t\t\t\tif ($._no_drag) {\n\t\t\t\t\tself.is_dragging = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (self.is_dragging || self.start_dragging) {\n\t\t\t\t\tvar diff = canvasCoords.x - self.lastMouseX;\n\t\t\t\t\tif (self._isLoading()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar bp_diff = self.bp_per_pixel * diff;\n\t\t\t\t\tvar start = self.start -= bp_diff;\n\t\t\t\t\tvar end = self.end -= bp_diff;\n\t\t\t\t\tself.goToPosition(self.chr, start, end);\n\n\t\t\t\t\tself.lastMouseX = canvasCoords.x;\n\t\t\t\t\tif (self.start_dragging && diff > 30) {\n\t\t\t\t\t\tself.is_dragging = true;\n\t\t\t\t\t\tself.start_dragging = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).on(\"mouseup.draghandler\", function (e) {\n\t\t\t\tself.is_dragging = false;\n\t\t\t\tself.start_dragging = false;\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"_translateCoOrds\",\n\t\tvalue: function _translateCoOrds(e) {\n\t\t\tvar x = e.pageX - this.div.offset().left;\n\t\t\tvar y = e.pageY - this.div.offset().top;\n\t\t\treturn { x: x, y: y };\n\t\t}\n\t}, {\n\t\tkey: \"_isLoading\",\n\t\tvalue: function _isLoading() {\n\t\t\tfor (var p_id in this.panels) {\n\t\t\t\tif (this.panels[p_id].loading) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}, {\n\t\tkey: \"setHighlightedRegion\",\n\t\tvalue: function setHighlightedRegion(location, name, color) {\n\t\t\tfor (var id in this.panels) {\n\t\t\t\tif (id === \"ruler\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.panels[id].setHighlightedRegion(location, name, color);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"removeHighlightedRegion\",\n\t\tvalue: function removeHighlightedRegion(name) {\n\t\t\tfor (var id in this.panels) {\n\t\t\t\tthis.panels[id].removeHighlightedRegion(name);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"getState\",\n\t\tvalue: function getState() {\n\t\t\tvar state = [];\n\t\t\tfor (var id in this.panels) {\n\t\t\t\tvar p = this.panels[id];\n\t\t\t\tdelete p.pan_config.update;\n\t\t\t\tstate.push({\n\t\t\t\t\tconfig: p.getAllTrackConfigs(),\n\t\t\t\t\tpan_config: p.pan_config,\n\t\t\t\t\ttop: p.getDiv().css(\"top\").replace(\"px\", \"\"),\n\t\t\t\t\theight: p.getDiv().css(\"height\").replace(\"px\", \"\"),\n\t\t\t\t\tid: id\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn state;\n\t\t}\n\t}, {\n\t\tkey: \"removePanel\",\n\t\tvalue: function removePanel(id) {\n\t\t\tvar pan = this.panels[id];\n\t\t\tpan.getDiv().remove();\n\t\t\tdelete this.panels[id];\n\t\t}\n\t}, {\n\t\tkey: \"setState\",\n\t\tvalue: function setState(state) {\n\t\t\tvar ids = Object.keys(this.panels);\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = ids[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar id = _step2.value;\n\n\t\t\t\t\tthis.removePanel(id);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\tvar _didIteratorError3 = false;\n\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator3 = state[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\tvar item = _step3.value;\n\n\t\t\t\t\tthis.addPanel(item.id, item.config, item.top, item.height, item.pan_config);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t_iteratorError3 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n     * Adds a panel to the browser Creates a filter panel\r\n     * @param {string } id - The id of track \r\n     * @param {Object[]} track_config - The config describing the tracks in the panel\r\n     * @param {number} top - The position of the top of the panel(in pixels)\r\n     * @param {number} height- The height of the panel (in pixels)\r\n     */\n\n\t}, {\n\t\tkey: \"addPanel\",\n\t\tvalue: function addPanel(id, track_config, top, height, pan_config) {\n\t\t\tvar ruler = false;\n\t\t\tif (id === \"ruler\") {\n\t\t\t\ttrack_config = [];\n\t\t\t\truler = true;\n\t\t\t\ttop = 5;\n\t\t\t\theight = 40;\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tif (!pan_config) {\n\t\t\t\tpan_config = {};\n\t\t\t}\n\t\t\tvar panel_config = {\n\t\t\t\theight: height,\n\t\t\t\twidth: this.div.width(),\n\t\t\t\tallow_user_move: \"vertical\",\n\t\t\t\tallow_user_resize: \"vertical\"\n\n\t\t\t};\n\t\t\tif (pan_config.allow_user_close) {\n\t\t\t\tpanel_config.allow_user_close = true;\n\t\t\t}\n\n\t\t\tvar p = new _panel.MLVPanel(track_config, panel_config);\n\n\t\t\tif (pan_config.allow_user_close) {\n\t\t\t\tp.addListener(\"panel_closed\", function () {\n\t\t\t\t\tdelete self.panels[id];\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (ruler) {\n\t\t\t\tp.addRulerTrack();\n\t\t\t\tp.allowUserRangeSelection();\n\t\t\t\tp.addListener(\"range_selected\", function (chr, start, end) {\n\t\t\t\t\tself.goToPosition(chr, start, end);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tp.addLegend();\n\t\t\t}\n\t\t\tthis.panels[id] = p;\n\t\t\tp.pan_config = pan_config;\n\t\t\t//set panel position and add it to DOM\n\t\t\tvar div = p.getDiv();\n\t\t\tdiv.css({ top: top + \"px\", left: \"0px\" }).width(this.width);\n\t\t\tif (pan_config.move_to_back) {\n\t\t\t\tthis.div.prepend(div);\n\t\t\t} else {\n\t\t\t\tthis.div.append(div);\n\t\t\t}\n\t\t\tdiv.draggable(\"option\", \"containment\", \"parent\");\n\t\t\t$(\".track-handle\").removeClass(\"fa-arrows-alt-v\").addClass(\"fa-arrows-alt\");\n\t\t\tif (!ruler) {\n\t\t\t\tdiv.append($(\"<i class='fas fa-arrows-alt-v'></i>\").css({ \"position\": \"absolute\", \"bottom\": \"-5px\", \"right\": \"7px\", \"font-size\": \"12px\", \"opacity\": \"0.8\" }));\n\t\t\t}\n\t\t\tif (pan_config.update) {\n\t\t\t\tp.update(this.chr, this.start, this.end);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"_positionChanged\",\n\t\tvalue: function _positionChanged(chr, start, end) {\n\t\t\tthis.chr = chr;\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t\tthis.bp_per_pixel = (this.end - this.start) / this.width;\n\t\t\tvar callback = this.listeners['view_changed'];\n\t\t\tif (callback) {\n\t\t\t\tcallback(chr + \":\" + Math.round(start) + \"-\" + Math.round(end));\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"getPosition\",\n\t\tvalue: function getPosition() {\n\t\t\treturn {\n\t\t\t\tchr: this.chr,\n\t\t\t\tstart: Math.round(this.start),\n\t\t\t\tend: Math.round(this.end)\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: \"setWidth\",\n\t\tvalue: function setWidth() {\n\t\t\tthis.width = this.div.width();\n\t\t\tfor (var p_id in this.panels) {\n\t\t\t\tthis.panels[p_id].setWidth(this.width);\n\t\t\t\tthis.panels[p_id].update();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"zoom\",\n\t\tvalue: function zoom(amount) {\n\t\t\tvar range = this.end - this.start;\n\t\t\tvar middle = this.start + range / 2;\n\t\t\tvar new_range = range / amount;\n\t\t\tvar st = Math.round(middle - new_range / 2);\n\t\t\tvar en = Math.round(middle + new_range / 2);\n\t\t\tthis.goToPosition(this.chr, st, en);\n\t\t}\n\n\t\t/**\r\n     * Displays the specified genomic location\r\n     * @param {string } chr - chromosome \r\n     * @param {number} start - The start of the genomic location\r\n     * @param {number} end - The end of the genomic location\r\n     */\n\n\t}, {\n\t\tkey: \"goToPosition\",\n\t\tvalue: function goToPosition(chr, start, end) {\n\t\t\tfor (var p_id in this.panels) {\n\t\t\t\tthis.panels[p_id].update(chr, start, end);\n\t\t\t}\n\t\t\tthis._positionChanged(chr, start, end);\n\t\t}\n\t}, {\n\t\tkey: \"addListener\",\n\t\tvalue: function addListener(type, func) {\n\t\t\tthis.listeners[type] = func;\n\t\t}\n\t}, {\n\t\tkey: \"addTrackFromBrowser\",\n\t\tvalue: function addTrackFromBrowser(config, update) {\n\t\t\tconfig.url = this.replaceWithProxy(config.url);\n\t\t\tvar id = \"pan_\" + this.pan_id++;\n\t\t\tthis.addPanel(id, [config], 0, 200, { allow_user_close: true, move_to_back: true, update: update });\n\t\t}\n\t}]);\n\n\treturn SimpleBrowser;\n}(BaseBrowser);\n\nvar BrowserControls = function () {\n\tfunction BrowserControls(element_id, browser, config) {\n\t\tvar _this3 = this;\n\n\t\t_classCallCheck(this, BrowserControls);\n\n\t\tthis.browser = browser;\n\t\tif (!config) {\n\t\t\tconfig = {};\n\t\t}\n\t\tthis.limit_chromosome = false;\n\t\tif (config.limit_chromosome) {\n\t\t\tthis.limit_chromosome = limit_chromosome;\n\t\t}\n\t\tthis.pan_id = 1;\n\t\tthis.container = $(\"#\" + element_id).css({ \"padding-left\": \"20px\" }).addClass(\"browser-menu-panel\");\n\t\tthis.container.append(\"<label>zoom</label>\");\n\t\tthis.zoom_level_input = $(\"<input>\").val(\"2\").width(15).appendTo(this.container);\n\t\tthis.zoom_level_input.spinner({ step: 1 });\n\t\tvar self = this;\n\t\tthis.zoom_in = $(\"<i>\").attr(\"class\", \"fa fa-search-plus mlv-click-icon \").appendTo(this.container).click(function () {\n\t\t\t_this3.browser.zoom(_this3.zoom_level_input.val());\n\t\t});\n\t\tthis.zoom_out = $(\"<i>\").attr(\"class\", \"fa fa-search-minus mlv-click-icon \").appendTo(this.container).click(function () {\n\t\t\t_this3.browser.zoom(1 / _this3.zoom_level_input.val());\n\t\t});\n\t\tvar l_l = this.limit_chromosome ? this.limit_chromosome : \"Location\";\n\n\t\tthis.container.append($(\"<label>\").text(l_l).css({ \"margin-left\": \"10px\" }));\n\t\tthis.location_input = $(\"<input>\").css(\"width\", \"200px\").appendTo(this.container).keypress(function (e) {\n\t\t\tif (e.keyCode === 13) {\n\t\t\t\tvar loc = self.calculatePosition($(this).val());\n\t\t\t\tself.browser.goToPosition(loc.chr, loc.start, loc.end);\n\t\t\t}\n\t\t});\n\n\t\tvar add_track = $(\"<button>\").html(\"<i class = 'fa fa-plus'></i>Add Track\").attr(\"class\", \"btn btn-sm btn-secondary\").css(\"margin-left\", \"3px\").click(function (e) {\n\t\t\tnew _track_dialog.AddTrackDialog(function (config) {\n\t\t\t\tself.browser.addTrackFromBrowser(config, true);\n\t\t\t}, { allowed_track_types: config.allowed_track_types });\n\t\t}).appendTo(this.container);\n\t\tthis.browser.addListener(\"view_changed\", function (location, start, end) {\n\t\t\tif (self.limit_chromosome) {\n\t\t\t\tlocation = location.split(\":\")[1];\n\t\t\t}\n\t\t\tif (start) {\n\t\t\t\tlocation = location + \":\" + start + \"-\" + end;\n\t\t\t}\n\t\t\tself.location_input.val(location);\n\t\t});\n\t}\n\n\t_createClass(BrowserControls, [{\n\t\tkey: \"calculatePosition\",\n\t\tvalue: function calculatePosition(text) {\n\t\t\ttext = text.replace(/,/g, \"\");\n\n\t\t\tvar arr = text.split(\":\");\n\t\t\tvar chr = null;\n\t\t\tvar pos = null;\n\t\t\tif (arr.length === 1) {\n\t\t\t\tchr = this.browser.getPosition().chr;\n\t\t\t\tpos = arr[0];\n\t\t\t} else {\n\t\t\t\tchr = arr[0];\n\t\t\t\tpos = arr[1];\n\t\t\t}\n\t\t\tvar arr2 = pos.split(\"-\");\n\t\t\treturn { chr: chr, start: parseInt(arr2[0]), end: parseInt(arr2[1]) };\n\t\t}\n\t}]);\n\n\treturn BrowserControls;\n}();\n\nexports.SimpleBrowser = SimpleBrowser;\nexports.BrowserControls = BrowserControls;\nexports.SinglePanelBrowser = SinglePanelBrowser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/extra/simple_browser.js\n");

/***/ }),

/***/ "../MLVPanel/src/extra/tiled_image_track.js":
/*!*********************************************!*\
  !*** .Panel/src/extra/tiled_image_track.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.TiledImageTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tracks = __webpack_require__(/*! ../tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TiledImageTrack = function (_MLVTrack) {\n\t_inherits(TiledImageTrack, _MLVTrack);\n\n\tfunction TiledImageTrack(config) {\n\t\t_classCallCheck(this, TiledImageTrack);\n\n\t\treturn _possibleConstructorReturn(this, (TiledImageTrack.__proto__ || Object.getPrototypeOf(TiledImageTrack)).call(this, config));\n\t}\n\n\t_createClass(TiledImageTrack, [{\n\t\tkey: 'getFeatures',\n\t\tvalue: function getFeatures(chr, bpStart, bpEnd, force, data) {\n\t\t\tvar locations = this.config.images[chr];\n\t\t\tif (!locations) {\n\t\t\t\treturn new Promise(function (fulfill, reject) {\n\t\t\t\t\tfulfill([]);\n\t\t\t\t});\n\t\t\t}\n\t\t\tvar promises = [];\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = locations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar loc = _step.value;\n\n\t\t\t\t\tif (loc[0] > bpEnd) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (loc[1] < bpStart) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpromises.push(getImagePromise(loc));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.all(promises);\n\t\t}\n\t}, {\n\t\tkey: 'drawScale',\n\t\tvalue: function drawScale(pixelHeight, ctx) {\n\n\t\t\t//ctx.drawImage(this.image,0,0,this.legend_width,pixelHeight,0,0,this.legend_width,pixelHeight)\n\t\t}\n\t}, {\n\t\tkey: 'drawFeatures',\n\t\tvalue: function drawFeatures(options) {\n\t\t\tvar bpEnd = options.bpStart + options.pixelWidth * options.bpPerPixel + 1;\n\t\t\tvar height = 0;\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = options.features[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar image = _step2.value;\n\n\t\t\t\t\tvar x1 = (image.start - options.bpStart) / options.bpPerPixel;\n\t\t\t\t\tx1 = x1 < 0 ? 0 : x1;\n\t\t\t\t\tvar x_clip = 0;\n\t\t\t\t\tif (options.bpStart > image.start) {\n\t\t\t\t\t\tx_clip = (options.bpStart - image.start) / (image.end - image.start) * image.width;\n\t\t\t\t\t}\n\t\t\t\t\tvar x_clip2 = image.width;\n\t\t\t\t\tif (image.end > bpEnd) {\n\t\t\t\t\t\tx_clip2 = image.width - (image.end - bpEnd) / (image.end - image.start) * image.width;\n\t\t\t\t\t}\n\t\t\t\t\tvar x2 = options.pixelWidth;\n\t\t\t\t\tif (image.end < bpEnd) {\n\t\t\t\t\t\tx2 = options.pixelWidth - (bpEnd - image.end) / options.bpPerPixel;\n\t\t\t\t\t}\n\t\t\t\t\tvar factor = this.config.y_scale_factor ? options.bpPerPixel / this.config.y_scale_factor : 1;\n\t\t\t\t\toptions.context.drawImage(image, x_clip, 0, x_clip2 - x_clip, image.height, x1, options.top, x2 - x1, image.height / factor);\n\t\t\t\t\theight = image.height;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.bottom = options.top + height;\n\t\t\treturn this.bottom;\n\t\t}\n\t}]);\n\n\treturn TiledImageTrack;\n}(_tracks.MLVTrack);\n\nfunction getImagePromise(loc) {\n\treturn new Promise(function (fulfill, reject) {\n\t\tvar image = new Image();\n\t\timage.start = loc[0];\n\t\timage.end = loc[1];\n\t\timage.onload = function () {\n\t\t\tfulfill(image);\n\t\t};\n\t\timage.src = loc[2];\n\t});\n}\n\n_tracks.MLVTrack.track_types['tiled_image_track'] = {\n\t\"class\": TiledImageTrack,\n\tname: \"Tiled Image Track\"\n\n};\n\nexports.TiledImageTrack = TiledImageTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vTUxWUGFuZWwvc3JjL2V4dHJhL3RpbGVkX2ltYWdlX3RyYWNrLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL01MVlBhbmVsL3NyYy9leHRyYS90aWxlZF9pbWFnZV90cmFjay5qcz84YzBjIl0sInNvdXJjZXNDb250ZW50IjpbIiAgICBcdGltcG9ydCB7TUxWVHJhY2t9IGZyb20gJy4uL3RyYWNrcy5qcydcclxuXHJcbiAgICBcdGNsYXNzIFRpbGVkSW1hZ2VUcmFjayBleHRlbmRzIE1MVlRyYWNre1xyXG5cdFx0XHRjb25zdHJ1Y3Rvcihjb25maWcpe1xyXG5cdFx0XHRcdHN1cGVyKGNvbmZpZyk7XHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHRnZXRGZWF0dXJlcyhjaHIsYnBTdGFydCxicEVuZCxmb3JjZSxkYXRhKXtcclxuXHRcdFx0XHRsZXQgbG9jYXRpb25zID0gdGhpcy5jb25maWcuaW1hZ2VzW2Nocl07XHJcblx0XHRcdFx0aWYgKCFsb2NhdGlvbnMpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGZ1bGZpbGwscmVqZWN0KXtcclxuXHRcdFx0XHRcdFx0ZnVsZmlsbChbXSk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgcHJvbWlzZXM9IFtdO1xyXG5cdFx0XHRcdGZvciAobGV0IGxvYyBvZiBsb2NhdGlvbnMpe1xyXG5cdFx0XHRcdFx0aWYgKGxvY1swXT5icEVuZCl7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKGxvY1sxXTxicFN0YXJ0KXtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGdldEltYWdlUHJvbWlzZShsb2MpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZHJhd1NjYWxlKHBpeGVsSGVpZ2h0LGN0eCl7XHJcbiBcclxuXHRcdFx0XHQvL2N0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwwLDAsdGhpcy5sZWdlbmRfd2lkdGgscGl4ZWxIZWlnaHQsMCwwLHRoaXMubGVnZW5kX3dpZHRoLHBpeGVsSGVpZ2h0KVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkcmF3RmVhdHVyZXMob3B0aW9ucykge1xyXG5cdFx0XHRcdGxldCBicEVuZCA9IG9wdGlvbnMuYnBTdGFydCArIG9wdGlvbnMucGl4ZWxXaWR0aCAqIG9wdGlvbnMuYnBQZXJQaXhlbCArIDE7XHJcblx0XHRcdFx0bGV0IGhlaWdodD0wO1xyXG5cdFx0XHRcdGZvciAobGV0IGltYWdlIG9mIG9wdGlvbnMuZmVhdHVyZXMpe1xyXG5cdFx0XHRcdFx0bGV0IHgxPSAoaW1hZ2Uuc3RhcnQtb3B0aW9ucy5icFN0YXJ0KS9vcHRpb25zLmJwUGVyUGl4ZWw7XHJcblx0XHRcdFx0XHR4MT14MTwwPzA6eDE7XHJcblx0XHRcdFx0XHRsZXQgeF9jbGlwPTA7XHJcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5icFN0YXJ0PmltYWdlLnN0YXJ0KXtcclxuXHRcdFx0XHRcdFx0eF9jbGlwPSgob3B0aW9ucy5icFN0YXJ0LWltYWdlLnN0YXJ0KS8oaW1hZ2UuZW5kLWltYWdlLnN0YXJ0KSkqaW1hZ2Uud2lkdGg7XHJcbiBcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bGV0IHhfY2xpcDI9aW1hZ2Uud2lkdGhcclxuXHRcdFx0XHRcdGlmIChpbWFnZS5lbmQ+YnBFbmQpe1xyXG5cdFx0XHRcdFx0XHR4X2NsaXAyID0gaW1hZ2Uud2lkdGgtKCgoaW1hZ2UuZW5kLWJwRW5kKS8oaW1hZ2UuZW5kLWltYWdlLnN0YXJ0KSkqaW1hZ2Uud2lkdGgpO1xyXG5cdFx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeDIgPSBvcHRpb25zLnBpeGVsV2lkdGg7XHJcblx0XHRcdFx0XHRpZiAoaW1hZ2UuZW5kPGJwRW5kKXtcclxuXHRcdFx0XHRcdFx0eDIgID0gb3B0aW9ucy5waXhlbFdpZHRoLSgoYnBFbmQtaW1hZ2UuZW5kKS9vcHRpb25zLmJwUGVyUGl4ZWwpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bGV0IGZhY3Rvcj10aGlzLmNvbmZpZy55X3NjYWxlX2ZhY3Rvcj9vcHRpb25zLmJwUGVyUGl4ZWwvdGhpcy5jb25maWcueV9zY2FsZV9mYWN0b3I6MTtcclxuXHRcdFx0XHRcdG9wdGlvbnMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UseF9jbGlwLDAseF9jbGlwMi14X2NsaXAsaW1hZ2UuaGVpZ2h0LHgxLG9wdGlvbnMudG9wLHgyLXgxLGltYWdlLmhlaWdodC9mYWN0b3IpO1xyXG5cdFx0XHRcdFx0aGVpZ2h0PWltYWdlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3R0b20gPSBvcHRpb25zLnRvcCtoZWlnaHQ7XHJcbiAgICAgICAgICAgXHRcdHJldHVybiB0aGlzLmJvdHRvbTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0XHJcblxyXG5cdFx0fVxyXG5cdFx0ZnVuY3Rpb24gZ2V0SW1hZ2VQcm9taXNlKGxvYyl7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoZnVsZmlsbCwgcmVqZWN0KSB7XHJcblx0XHRcdFx0XHRsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuXHRcdFx0XHRcdGltYWdlLnN0YXJ0PWxvY1swXTtcclxuXHRcdFx0XHRcdGltYWdlLmVuZD1sb2NbMV07XHJcblx0XHRcdFx0XHRpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcdFx0XHRcdFx0XHRmdWxmaWxsKGltYWdlKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRpbWFnZS5zcmMgPWxvY1syXTsgXHJcblx0XHRcdH0pOyAgICAgICBcclxuXHRcdH1cclxuXHRcdFxyXG5cclxuXHRcdE1MVlRyYWNrLnRyYWNrX3R5cGVzWyd0aWxlZF9pbWFnZV90cmFjayddPXtcclxuXHRcdFx0XCJjbGFzc1wiOlRpbGVkSW1hZ2VUcmFjayxcclxuXHRcdFx0bmFtZTpcIlRpbGVkIEltYWdlIFRyYWNrXCJcclxuXHJcblx0XHR9XHJcblxyXG5leHBvcnQge1RpbGVkSW1hZ2VUcmFja307XHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQVFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBZ0JBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBdkJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQXdCQTtBQUNBO0FBQ0E7Ozs7QUEzREE7QUFDQTtBQStEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFLQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../MLVPanel/src/extra/tiled_image_track.js\n");

/***/ }),

/***/ "../MLVPanel/src/extra/ucsc_track.js":
/*!**************************************!*\
  !*** .Panel/src/extra/ucsc_track.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.UCSCMLVTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tracks = __webpack_require__(/*! ../tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar UCSCMLVTrack = function (_MLVTrack) {\n\t_inherits(UCSCMLVTrack, _MLVTrack);\n\n\tfunction UCSCMLVTrack(config) {\n\t\t_classCallCheck(this, UCSCMLVTrack);\n\n\t\tconfig.url = config.url.replace(\"hgTracks\", \"hgRenderTracks\");\n\t\tif (config.url.includes(\"/s/\")) {\n\t\t\tconfig.url = UCSCMLVTrack._convertSessionURL(config.url);\n\t\t}\n\n\t\tvar _this = _possibleConstructorReturn(this, (UCSCMLVTrack.__proto__ || Object.getPrototypeOf(UCSCMLVTrack)).call(this, config));\n\n\t\t_this.image = null;\n\t\t_this.legend_width = 74;\n\t\treturn _this;\n\t}\n\n\t_createClass(UCSCMLVTrack, [{\n\t\tkey: \"addExtraControls\",\n\t\tvalue: function addExtraControls(dialog) {\n\t\t\tvar self = this;\n\t\t\tdialog.div.append(\"<hr>\");\n\t\t\tdialog.div.append($(\"<label>\").text(\"Session Url\"));\n\t\t\tvar inp = $(\"<textarea>\").val(dialog.config.url).css({ width: \"100%\", height: \"70px\" });\n\t\t\tvar but = $(\"<i class='fas fa-download'></i>\").click(function (e) {\n\t\t\t\tvar url = self._convertURL(inp.val());\n\t\t\t\tdialog.config.url = url;\n\t\t\t\tdialog.panel.setTrackAttribute(self.config.track_id, \"url\", url);\n\t\t\t\tdialog.panel.update();\n\t\t\t});\n\t\t\tdialog.div.append(but).append(inp);\n\t\t}\n\t}, {\n\t\tkey: \"_convertURL\",\n\t\tvalue: function _convertURL(url) {\n\t\t\turl = url.replace(\"hgTracks\", \"hgRenderTracks\");\n\t\t\treturn url;\n\t\t}\n\t}, {\n\t\tkey: \"getFeatures\",\n\t\tvalue: function getFeatures(chr, bpStart, bpEnd, force, data) {\n\t\t\tvar self = this;\n\t\t\tvar width = data.pixelWidth + this.legend_width;\n\t\t\twidth = (bpEnd - bpStart) / data.bpPerPixel + this.legend_width;\n\t\t\treturn new Promise(function (fulfill, reject) {\n\t\t\t\tself.image = new Image();\n\t\t\t\tself.image.onload = function () {\n\t\t\t\t\tself.config.height = self.image.height;\n\t\t\t\t\tfulfill([]);\n\t\t\t\t};\n\t\t\t\tvar url = self.config.url;\n\t\t\t\tvar args = \"&position=\" + chr + \":\" + bpStart + \"-\" + bpEnd + \"&pix=\" + width + \"&hgt.labelWidth=10\";\n\t\t\t\tself.image.src = url + args;\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"drawFeatures\",\n\t\tvalue: function drawFeatures(options) {\n\t\t\tvar ctx = options.context;\n\t\t\tthis.top = options.top;\n\t\t\tctx.globalAlpha = this.config.opacity;\n\t\t\tctx.drawImage(this.image, -this.legend_width, options.top);\n\t\t\tctx.globalAlpha = 1.0;\n\t\t\tthis.bottom = options.top + this.image.height;\n\t\t\treturn this.bottom;\n\t\t}\n\t}, {\n\t\tkey: \"drawScale\",\n\t\tvalue: function drawScale(pixelHeight, ctx) {\n\t\t\tctx.globalAlpha = 0.7;\n\t\t\tctx.drawImage(this.image, 0, 0, this.legend_width, pixelHeight, 0, this.top, this.legend_width, pixelHeight);\n\t\t\tctx.globalAlpha = 1.0;\n\t\t}\n\t}], [{\n\t\tkey: \"_convertSessionURL\",\n\t\tvalue: function _convertSessionURL(url) {\n\t\t\tvar arr = url.split(\"/\");\n\t\t\tvar new_url = arr[0] + \"//\" + arr[2] + \"/cgi-bin/hgRenderTracks?hgS_doOtherUser=submit&hgS_otherUserName=\" + arr[4] + \"&hgS_otherUserSessionName=\" + arr[5];\n\t\t\treturn new_url;\n\t\t}\n\t}]);\n\n\treturn UCSCMLVTrack;\n}(_tracks.MLVTrack);\n\n_tracks.MLVTrack.track_types['ucsc_track'] = {\n\t\"class\": UCSCMLVTrack,\n\tname: \"UCSC Session\"\n};\n\nexports.UCSCMLVTrack = UCSCMLVTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vTUxWUGFuZWwvc3JjL2V4dHJhL3Vjc2NfdHJhY2suanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vTUxWUGFuZWwvc3JjL2V4dHJhL3Vjc2NfdHJhY2suanM/MzVjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIgICAgXHRpbXBvcnQge01MVlRyYWNrfSBmcm9tICcuLi90cmFja3MuanMnXHJcblxyXG4gICAgXHRjbGFzcyBVQ1NDTUxWVHJhY2sgZXh0ZW5kcyBNTFZUcmFja3tcclxuXHRcdFx0Y29uc3RydWN0b3IoY29uZmlnKXtcclxuXHRcdFx0XHRjb25maWcudXJsPSBjb25maWcudXJsLnJlcGxhY2UoXCJoZ1RyYWNrc1wiLFwiaGdSZW5kZXJUcmFja3NcIik7XHJcblx0XHRcdFx0aWYgKGNvbmZpZy51cmwuaW5jbHVkZXMoXCIvcy9cIikpe1xyXG5cdFx0XHRcdFx0Y29uZmlnLnVybD1VQ1NDTUxWVHJhY2suX2NvbnZlcnRTZXNzaW9uVVJMKGNvbmZpZy51cmwpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRzdXBlcihjb25maWcpO1xyXG5cdFx0XHRcdHRoaXMuaW1hZ2U9bnVsbDtcclxuXHRcdFx0XHR0aGlzLmxlZ2VuZF93aWR0aD03NDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RhdGljIF9jb252ZXJ0U2Vzc2lvblVSTCh1cmwpe1xyXG5cdFx0XHRcdGxldCBhcnI9dXJsLnNwbGl0KFwiL1wiKTtcclxuXHRcdFx0XHRsZXQgbmV3X3VybCA9IGFyclswXStcIi8vXCIrYXJyWzJdK1wiL2NnaS1iaW4vaGdSZW5kZXJUcmFja3M/aGdTX2RvT3RoZXJVc2VyPXN1Ym1pdCZoZ1Nfb3RoZXJVc2VyTmFtZT1cIithcnJbNF1cclxuXHRcdFx0XHRcdCtcIiZoZ1Nfb3RoZXJVc2VyU2Vzc2lvbk5hbWU9XCIrYXJyWzVdO1xyXG5cdFx0XHRcdHJldHVybiBuZXdfdXJsO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YWRkRXh0cmFDb250cm9scyhkaWFsb2cpe1xyXG5cdFx0XHRcdGxldCBzZWxmID0gdGhpcztcclxuXHRcdFx0XHRkaWFsb2cuZGl2LmFwcGVuZChcIjxocj5cIik7XHJcblx0XHRcdFx0ZGlhbG9nLmRpdi5hcHBlbmQoJChcIjxsYWJlbD5cIikudGV4dChcIlNlc3Npb24gVXJsXCIpKTtcclxuXHRcdFx0XHRsZXQgaW5wPSQoXCI8dGV4dGFyZWE+XCIpLnZhbChkaWFsb2cuY29uZmlnLnVybCkuY3NzKHt3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCI3MHB4XCJ9KTtcclxuXHRcdFx0XHRsZXQgYnV0ID0gJChcIjxpIGNsYXNzPSdmYXMgZmEtZG93bmxvYWQnPjwvaT5cIikuY2xpY2soZnVuY3Rpb24oZSl7XHJcblx0XHRcdFx0XHRsZXQgdXJsID0gc2VsZi5fY29udmVydFVSTChpbnAudmFsKCkpO1xyXG5cdFx0XHRcdFx0ZGlhbG9nLmNvbmZpZy51cmw9dXJsO1xyXG5cdFx0XHRcdFx0ZGlhbG9nLnBhbmVsLnNldFRyYWNrQXR0cmlidXRlKHNlbGYuY29uZmlnLnRyYWNrX2lkLFwidXJsXCIsdXJsKTtcclxuXHRcdFx0XHRcdGRpYWxvZy5wYW5lbC51cGRhdGUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRkaWFsb2cuZGl2LmFwcGVuZChidXQpLmFwcGVuZChpbnApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfY29udmVydFVSTCh1cmwpe1xyXG5cdFx0XHRcdHVybD11cmwucmVwbGFjZShcImhnVHJhY2tzXCIsXCJoZ1JlbmRlclRyYWNrc1wiKTtcclxuXHRcdFx0XHRyZXR1cm4gdXJsXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdldEZlYXR1cmVzKGNocixicFN0YXJ0LGJwRW5kLGZvcmNlLGRhdGEpe1xyXG5cdFx0XHRcdGxldCBzZWxmPXRoaXM7XHJcblx0XHRcdFx0bGV0IHdpZHRoID0gZGF0YS5waXhlbFdpZHRoK3RoaXMubGVnZW5kX3dpZHRoO1xyXG5cdFx0XHRcdHdpZHRoID0gKChicEVuZC1icFN0YXJ0KS9kYXRhLmJwUGVyUGl4ZWwpK3RoaXMubGVnZW5kX3dpZHRoO1xyXG5cdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoZnVsZmlsbCwgcmVqZWN0KSB7XHJcblx0XHRcdFx0XHRzZWxmLmltYWdlID0gbmV3IEltYWdlKCk7XHJcblx0XHRcdFx0XHRzZWxmLmltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5jb25maWcuaGVpZ2h0ID0gc2VsZi5pbWFnZS5oZWlnaHQ7XHJcbiAgICBcdFx0XHRcdFx0ZnVsZmlsbChbXSk7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0bGV0IHVybCA9IHNlbGYuY29uZmlnLnVybDtcclxuXHRcdFx0XHRcdGxldCBhcmdzID1cIiZwb3NpdGlvbj1cIitjaHIrXCI6XCIrYnBTdGFydCtcIi1cIiticEVuZCtcIiZwaXg9XCIrKHdpZHRoKStcIiZoZ3QubGFiZWxXaWR0aD0xMFwiO1xyXG5cdFx0XHRcdFx0c2VsZi5pbWFnZS5zcmMgPXVybCthcmdzOyAgICAgICAgXHJcbiAgICAgICAgXHRcdH0pO1x0XHRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZHJhd0ZlYXR1cmVzKG9wdGlvbnMpIHtcclxuICAgICAgICAgIFx0XHRsZXQgY3R4ID0gb3B0aW9ucy5jb250ZXh0O1xyXG4gICAgICAgICAgXHRcdHRoaXMudG9wPW9wdGlvbnMudG9wO1xyXG4gICAgICAgICAgXHRcdGN0eC5nbG9iYWxBbHBoYT10aGlzLmNvbmZpZy5vcGFjaXR5O1xyXG4gICAgICAgICAgIFx0XHRjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsLXRoaXMubGVnZW5kX3dpZHRoLG9wdGlvbnMudG9wKTtcclxuICAgICAgICAgICBcdFx0Y3R4Lmdsb2JhbEFscGhhPTEuMDtcclxuICAgICAgICAgICBcdFx0dGhpcy5ib3R0b20gPSBvcHRpb25zLnRvcCt0aGlzLmltYWdlLmhlaWdodDtcclxuICAgICAgICAgICBcdFx0cmV0dXJuIHRoaXMuYm90dG9tO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkcmF3U2NhbGUocGl4ZWxIZWlnaHQsY3R4KXtcclxuXHRcdFx0XHRjdHguZ2xvYmFsQWxwaGE9MC43O1xyXG5cdFx0XHRcdGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwwLDAsdGhpcy5sZWdlbmRfd2lkdGgscGl4ZWxIZWlnaHQsMCx0aGlzLnRvcCx0aGlzLmxlZ2VuZF93aWR0aCxwaXhlbEhlaWdodCk7XHJcblx0XHRcdFx0Y3R4Lmdsb2JhbEFscGhhPTEuMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRNTFZUcmFjay50cmFja190eXBlc1sndWNzY190cmFjayddPXtcclxuXHRcdFx0XCJjbGFzc1wiOlVDU0NNTFZUcmFjayxcclxuXHRcdFx0bmFtZTpcIlVDU0MgU2Vzc2lvblwiXHJcblx0XHR9XHJcblxyXG5leHBvcnQge1VDU0NNTFZUcmFja307XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTs7Ozs7OztBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFDQTtBQUtBO0FBQ0E7QUFQQTtBQVFBO0FBQ0E7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQXpEQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOzs7O0FBakJBO0FBQ0E7QUF1RUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../MLVPanel/src/extra/ucsc_track.js\n");

/***/ }),

/***/ "../MLVPanel/src/feature.js":
/*!*****************************!*\
  !*** .Panel/src/feature.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TabixBedFeatureSource = exports.BigBedFeatureSource = exports.FastaSequence = exports.FeatureSource = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nhe MIT License (MIT)\r\nr\nopyright (c) 2014 Broad Institute\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Permission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nr\nhe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\nr\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nr\nr\nr\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _utils = __webpack_require__(/*! ./utils.js */ \"../MLVPanel/src/utils.js\");\n\nvar _igvxhr = __webpack_require__(/*! ./igvxhr.js */ \"../MLVPanel/src/igvxhr.js\");\n\nvar _bam = __webpack_require__(/*! ./bam.js */ \"../MLVPanel/src/bam.js\");\n\nvar _bigwig = __webpack_require__(/*! ./bigwig.js */ \"../MLVPanel/src/bigwig.js\");\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MAX_GZIP_BLOCK_SIZE = 1 << 16;\n\n/**\r\n * feature source for \"bed like\" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)\r\n *\r\n * @param config\r\n * @constructor\r\n */\n\nvar FeatureSource = function () {\n    function FeatureSource(config) {\n        _classCallCheck(this, FeatureSource);\n\n        this.config = config || {};\n    }\n\n    _createClass(FeatureSource, [{\n        key: \"getFileHeader\",\n        value: function getFileHeader() {\n            this.is_indexed = true;\n            return new Promise(function (fulfill, reject) {\n                fulfill();\n            });\n        }\n    }, {\n        key: \"getFeatures\",\n        value: function getFeatures(chr, start, end, force, data) {\n\n            //no need to get header\n            if (this.is_indexed) {\n                return this._getFeatures(chr, start, end, force, data);\n            }\n            //get headers/index then get features\n            var self = this;\n            return new Promise(function (fulfill, reject) {\n                self.getFileHeader().then(function () {\n                    self._getFeatures(chr, start, end, force, data).then(function (features) {\n                        fulfill(features);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        }\n\n        /**\r\n         * Required function fo all data source objects.  Fetches features for the\r\n         * range requested and passes them on to the success function.  Usually this is\r\n         * a function that renders the features on the canvas\r\n         *\r\n         * @param chr\r\n         * @param bpStart\r\n         * @param bpEnd\r\n         */\n\n    }, {\n        key: \"_getFeatures\",\n        value: function _getFeatures(chr, bpStart, bpEnd, force, data) {\n            if (bpStart === 0) {\n                bpStart = 1;\n            }\n            var self = this;\n            self.time = Date.now();\n            return new Promise(function (fulfill, reject) {\n                if (self.featureCache && chr !== self.featureCache.range.chr) {\n                    self.featureCache = null;\n                }\n                var genomicInterval = new GenomicInterval(chr, bpStart, bpEnd),\n                    featureCache = self.featureCache,\n                    maxRows = self.config.maxRows || 500;\n                var ranges_to_get = false;\n                if (!featureCache) {\n                    ranges_to_get = { all: [bpStart, bpEnd] };\n                } else {\n                    if (featureCache.range !== undefined) {\n                        ranges_to_get = featureCache.range.rangesToGet(genomicInterval);\n                    }\n                }\n                if (!ranges_to_get) {\n                    fulfill(self.featureCache.queryFeatures(chr, bpStart, bpEnd));\n                } else {\n                    var promises = [];\n                    var p_types = [];\n                    for (var type in ranges_to_get) {\n                        var range = ranges_to_get[type];\n                        promises.push(self.retrieveFeatures(chr, range[0], range[1], force, data));\n                        p_types.push([type, ranges_to_get[type]]);\n                    }\n                    Promise.all(promises).then(function (all_features) {\n                        var existing_features = [];\n                        if (self.featureCache) {\n                            existing_features = self.featureCache.allFeatures(); //featureCache.allFeatures(chr,self.featureCache.range.start,self.featureCache.range.end);\n                        }\n                        var index = 0;\n                        var _iteratorNormalCompletion = true;\n                        var _didIteratorError = false;\n                        var _iteratorError = undefined;\n\n                        try {\n                            for (var _iterator = all_features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                                var featureList = _step.value;\n\n                                if (featureList === null) {\n                                    featureList = [];\n                                }\n                                if (p_types[index][0] === \"left\") {\n                                    var end = p_types[index][1][1];\n                                    //remove any already retieved  \n                                    var splice = 0;\n                                    for (var n = featureList.length - 1; n >= 0; n--) {\n                                        if (featureList[n].end < end) {\n                                            break;\n                                        }\n                                        splice++;\n                                    }\n                                    if (splice !== 0) {\n                                        featureList.splice(-splice);\n                                    }\n                                }\n                                if (p_types[index][0] === \"right\") {\n                                    var start = p_types[index][1][0];\n                                    //remove any already retieved\n                                    var i = 0;\n                                    for (i = 0; i < featureList.length; i++) {\n                                        if (featureList[i].start > start) {\n                                            break;\n                                        }\n                                    }\n                                    if (i !== 0) {\n                                        featureList.splice(0, i);\n                                    }\n                                }\n                                index++;\n                                existing_features = existing_features.concat(featureList);\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return) {\n                                    _iterator.return();\n                                }\n                            } finally {\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n\n                        var gi = self.featureCache ? self.featureCache.range : genomicInterval;\n                        self.featureCache = new FeatureCache(existing_features, gi);\n                        FeatureSource.packFeatures(existing_features, maxRows);\n                        fulfill(self.featureCache.queryFeatures(chr, bpStart, bpEnd));\n                    }).catch(function (error) {\n                        reject(error);\n                    });\n                }\n            });\n        }\n    }], [{\n        key: \"packFeatures\",\n        value: function packFeatures(features, maxRows) {\n\n            if (features == null || features.length === 0) {\n                return;\n            }\n\n            // Segregate by chromosome\n\n            var chrFeatureMap = {},\n                chrs = [];\n            features.forEach(function (feature) {\n\n                var chr = feature.chr,\n                    flist = chrFeatureMap[chr];\n\n                if (!flist) {\n                    flist = [];\n                    chrFeatureMap[chr] = flist;\n                    chrs.push(chr);\n                }\n\n                flist.push(feature);\n            });\n\n            // Loop through chrosomosomes and pack features;\n\n            chrs.forEach(function (chr) {\n\n                pack(chrFeatureMap[chr], maxRows);\n            });\n\n            // Assigns a row # to each feature.  If the feature does not fit in any row and #rows == maxRows no\n            // row number is assigned.\n            function pack(featureList, maxRows) {\n\n                var rows = [];\n\n                featureList.sort(function (a, b) {\n                    return a.start - b.start;\n                });\n\n                rows.push(-1000);\n                featureList.forEach(function (feature) {\n\n                    var i,\n                        r,\n                        len = Math.min(rows.length, maxRows),\n                        start = feature.start;\n\n                    for (r = 0; r < len; r++) {\n                        if (start >= rows[r]) {\n                            feature.row = r;\n                            rows[r] = feature.end;\n                            return;\n                        }\n                    }\n                    feature.row = r;\n                    rows[r] = feature.end;\n                });\n            }\n        }\n    }]);\n\n    return FeatureSource;\n}();\n\nvar TabixBedFeatureSource = function (_FeatureSource) {\n    _inherits(TabixBedFeatureSource, _FeatureSource);\n\n    function TabixBedFeatureSource(config, decode_function) {\n        _classCallCheck(this, TabixBedFeatureSource);\n\n        var _this = _possibleConstructorReturn(this, (TabixBedFeatureSource.__proto__ || Object.getPrototypeOf(TabixBedFeatureSource)).call(this, config));\n\n        _this.reader = new FeatureFileReader(config, decode_function);\n        return _this;\n    }\n\n    _createClass(TabixBedFeatureSource, [{\n        key: \"retrieveFeatures\",\n        value: function retrieveFeatures(chr, start, end) {\n            return this.reader.readFeatures(chr, start, end);\n        }\n    }, {\n        key: \"getFileHeader\",\n        value: function getFileHeader() {\n            var self = this;\n            return new Promise(function (fulfill, reject) {\n                self.reader.readHeader().then(function () {\n                    self.is_indexed = true;\n                    fulfill();\n                }).catch(reject);\n            });\n        }\n    }]);\n\n    return TabixBedFeatureSource;\n}(FeatureSource);\n\nvar BigBedFeatureSource = function (_FeatureSource2) {\n    _inherits(BigBedFeatureSource, _FeatureSource2);\n\n    function BigBedFeatureSource(config, decode_function) {\n        _classCallCheck(this, BigBedFeatureSource);\n\n        config.sourceType = \"gtex\";\n\n        var _this2 = _possibleConstructorReturn(this, (BigBedFeatureSource.__proto__ || Object.getPrototypeOf(BigBedFeatureSource)).call(this, config));\n\n        _this2.header = true;\n        _this2.feature_source = new _bigwig.BWSource(config, decode_function);\n        return _this2;\n    }\n\n    _createClass(BigBedFeatureSource, [{\n        key: \"retrieveFeatures\",\n        value: function retrieveFeatures(chr, bpStart, bpEnd, force, data) {\n            return this.feature_source.getFeatures(chr, bpStart, bpEnd, false, data);\n        }\n    }]);\n\n    return BigBedFeatureSource;\n}(FeatureSource);\n\n//********js/FeatureFileReader.js*****\n\n\nvar F_MAX_GZIP_BLOCK_SIZE = 1 << 16;\n\n/**\r\n * Reader for \"bed like\" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)\r\n *\r\n * @param config\r\n * @constructor\r\n */\n\nvar FeatureFileReader = function () {\n    function FeatureFileReader(config, dec_function) {\n        _classCallCheck(this, FeatureFileReader);\n\n        this.config = config || {};\n\n        if (config.localFile) {\n            this.localFile = config.localFile;\n            this.filename = config.localFile.name;\n        } else {\n            this.url = config.url;\n            this.indexURL = config.indexURL;\n            this.headURL = config.headURL || this.filename;\n\n            var uriParts = _utils.Utils.parseUri(config.url);\n            this.filename = uriParts.file;\n            this.path = uriParts.path;\n        }\n\n        this.format = config.format;\n\n        this.parser = this.getParser(this.format, dec_function);\n    }\n\n    _createClass(FeatureFileReader, [{\n        key: \"getParser\",\n        value: function getParser(format, decode) {\n            switch (format) {\n                case \"vcf\":\n                    return new VcfParser();\n                case \"seg\":\n                    return new SegParser();\n                default:\n                    return new FeatureParser(format, decode, this.config);\n            }\n        }\n\n        // seg files don't have an index\n\n    }, {\n        key: \"isIndexable\",\n        value: function isIndexable() {\n            var configIndexURL = this.config.indexURL,\n                type = this.type,\n                configIndexed = this.config.indexed;\n\n            return configIndexURL || type != \"wig\" && configIndexed != false;\n        }\n\n        /**\r\n         * Return a Promise for the async loaded index\r\n         */\n\n    }, {\n        key: \"loadIndex\",\n        value: function loadIndex() {\n            var idxFile = this.indexURL;\n            if (this.filename.endsWith(\".gz\")) {\n                if (!idxFile) idxFile = this.url + \".tbi\";\n                return (0, _bam.loadBamIndex)(idxFile, this.config, true);\n            } else {\n                if (!idxFile) idxFile = this.url + \".idx\";\n                return loadTribbleIndex(idxFile, this.config);\n            }\n        }\n    }, {\n        key: \"loadFeaturesNoIndex\",\n        value: function loadFeaturesNoIndex() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                var parser = self.parser,\n                    options = {\n                    headers: self.config.headers, // http headers, not file header\n                    withCredentials: self.config.withCredentials\n                };\n\n                if (self.localFile) {\n                    _igvxhr.igvxhr.loadStringFromFile(self.localFile, options).then(parseData).catch(reject);\n                } else {\n                    _igvxhr.igvxhr.loadString(self.url, options).then(parseData).catch(reject);\n                }\n\n                function parseData(data) {\n                    self.header = parser.parseHeader(data);\n                    if (self.header instanceof String && self.header.startsWith(\"##gff-version 3\")) {\n                        self.format = 'gff3';\n                    }\n                    fulfill(parser.parseFeatures(data)); // <= PARSING DONE HERE\n                };\n            });\n        }\n    }, {\n        key: \"loadFeaturesWithIndex\",\n        value: function loadFeaturesWithIndex(chr, start, end) {\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                var blocks,\n                    index = self.index,\n                    tabix = index && index.tabix,\n                    refId = tabix ? index.sequenceIndexMap[chr] : chr,\n                    promises = [];\n\n                blocks = index.blocksForRange(refId, start, end);\n\n                if (!blocks || blocks.length === 0) {\n                    fulfill(null); // TODO -- is this correct?  Should it return an empty array?\n                } else {\n\n                    blocks.forEach(function (block) {\n\n                        promises.push(new Promise(function (fulfill, reject) {\n\n                            var startPos = block.minv.block,\n                                startOffset = block.minv.offset,\n                                endPos = block.maxv.block + (index.tabix ? F_MAX_GZIP_BLOCK_SIZE : 0),\n                                options = {\n                                headers: self.config.headers, // http headers, not file header\n                                range: { start: startPos, size: endPos - startPos + 1 },\n                                withCredentials: self.config.withCredentials\n                            },\n                                success;\n\n                            success = function success(data) {\n\n                                var inflated, slicedData;\n\n                                if (index.tabix) {\n\n                                    inflated = _igvxhr.igvxhr.arrayBufferToString((0, _igvxhr.unbgzf)(data));\n                                    // need to decompress data\n                                } else {\n                                    inflated = data;\n                                }\n\n                                slicedData = startOffset ? inflated.slice(startOffset) : inflated;\n                                var f = self.parser.parseFeatures(slicedData, chr, start, end);\n                                fulfill(f);\n                            };\n\n                            // Async load\n                            if (self.localFile) {\n                                _igvxhr.igvxhr.loadStringFromFile(self.localFile, options).then(success).catch(reject);\n                            } else {\n                                if (index.tabix) {\n                                    _igvxhr.igvxhr.loadArrayBuffer(self.url, options).then(success).catch(reject);\n                                } else {\n                                    _igvxhr.igvxhr.loadString(self.url, options).then(success).catch(reject);\n                                }\n                            }\n                        }));\n                    });\n\n                    Promise.all(promises).then(function (featureArrays) {\n\n                        var i, allFeatures;\n\n                        if (featureArrays.length === 1) {\n                            allFeatures = featureArrays[0];\n                        } else {\n                            allFeatures = featureArrays[0];\n\n                            for (i = 1; i < featureArrays.length; i++) {\n                                allFeatures = allFeatures.concat(featureArrays[i]);\n                            }\n\n                            allFeatures.sort(function (a, b) {\n                                return a.start - b.start;\n                            });\n                        }\n\n                        fulfill(allFeatures);\n                    }).catch(reject);\n                }\n            });\n        }\n    }, {\n        key: \"getIndex\",\n        value: function getIndex() {\n\n            var self = this,\n                isIndeedIndexible = this.isIndexable();\n            return new Promise(function (fulfill, reject) {\n\n                if (self.indexed === undefined && isIndeedIndexible) {\n                    self.loadIndex().then(function (index) {\n                        if (index) {\n                            self.index = index;\n                            self.indexed = true;\n                        } else {\n                            self.indexed = false;\n                        }\n                        fulfill(self.index);\n                    }).catch(reject);\n                } else {\n                    fulfill(self.index); // Is either already loaded, or there isn't one\n                }\n            });\n        }\n    }, {\n        key: \"readHeader\",\n        value: function readHeader() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                if (self.header) {\n                    fulfill(self.header);\n                } else {\n\n                    // We force a load of the index first\n\n                    self.getIndex().then(function (index) {\n\n                        if (index) {\n                            // Load the file header (not HTTP header) for an indexed file.\n                            // TODO -- note this will fail if the file header is > 65kb in size\n                            var options = {\n                                headers: self.config.headers, // http headers, not file header\n                                bgz: index.tabix,\n                                range: { start: 0, size: 65000 },\n                                withCredentials: self.config.withCredentials\n                            },\n                                success = function success(data) {\n                                self.header = self.parser.parseHeader(data);\n                                fulfill(self.header);\n                            };\n\n                            if (self.localFile) {\n                                _igvxhr.igvxhr.loadStringFromFile(self.localFile, options).then(success);\n                            } else {\n                                _igvxhr.igvxhr.loadString(self.url, options).then(success).catch(reject);\n                            }\n                        } else {\n                            self.loadFeaturesNoIndex(undefined).then(function (features) {\n                                var header = self.header || {};\n                                header.features = features;\n                                fulfill(header);\n                            }).catch(error);\n                        }\n                    }).catch(reject);\n                }\n            });\n        }\n\n        /**\r\n         *\r\n         * @param fulfill\r\n         * @param range -- genomic range to load.  For use with indexed source (optional)\r\n         */\n\n    }, {\n        key: \"readFeatures\",\n        value: function readFeatures(chr, start, end) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                if (self.index) {\n                    self.loadFeaturesWithIndex(chr, start, end).then(packFeatures).catch(reject);\n                } else {\n                    self.loadFeaturesNoIndex().then(packFeatures);\n                }\n\n                function packFeatures(features) {\n                    // TODO pack\n                    fulfill(features);\n                }\n            });\n        }\n    }]);\n\n    return FeatureFileReader;\n}();\n\n//***js/feature/FeatureParsers.js**************\n\n\nvar maxFeatureCount = Number.MAX_VALUE; // For future use,  controls downsampling\n\nvar gffNameFields = [\"Name\", \"gene_name\", \"gene\", \"gene_id\", \"alias\", \"locus\"];\n\n/**\r\n * A factory function.  Return a parser for the given file format.\r\n */\n\nvar FeatureParser = function () {\n    function FeatureParser(format, decode_func, config) {\n        _classCallCheck(this, FeatureParser);\n\n        var customFormat;\n\n        this.format = format;\n        this.nameField = config ? config.nameField : undefined;\n        this.skipRows = 0; // The number of fixed header rows to skip.  Override for specific types as neede\n\n        if (decode_func) {\n            this.delimiter = /\\s+/;\n\n            this.decode = function (tokens, ignore) {\n                var feature = { chr: tokens[0], start: parseInt(tokens[1]), end: parseInt(tokens[2]) };\n                decode_func(tokens.slice(3), feature);\n                return feature;\n            };\n        } else if (config.decode_function === \"generic\") {\n            this.decode = function (tokens, ignore) {\n                var feature = { chr: tokens[0], start: parseInt(tokens[1]), end: parseInt(tokens[2]) };\n                feature.data = tokens.slice(3);\n                return feature;\n            };\n        } else {\n            this.decode = FeatureParser.decodeBed;\n            this.delimiter = /\\s+/;\n        }\n\n        /* switch (format) {\r\n             case \"narrowpeak\":\r\n             case \"broadpeak\":\r\n             case \"peaks\":\r\n                 this.decode = this.decodePeak;\r\n                 this.delimiter = /\\s+/;\r\n                 break;\r\n             case \"bedgraph\":\r\n                 this.decode = this.decodeBedGraph;\r\n                 this.delimiter = /\\s+/;\r\n                 break;\r\n             case \"wig\":\r\n                 this.decode = this.decodeWig;\r\n                 this.delimiter = /\\s+/;\r\n                 break;\r\n             case \"gff3\" :\r\n             case \"gff\" :\r\n             case \"gtf\" :\r\n                 this.decode = this.decodeGFF;\r\n                 this.delimiter = \"\\t\";\r\n                 break;\r\n             case \"aneu\":\r\n                 this.decode = this.decodeAneu;\r\n                 this.delimiter = \"\\t\";\r\n                 break;\r\n             case \"fusionjuncspan\":\r\n                 // bhaas, needed for FusionInspector view\r\n                 this.decode = this.decodeFusionJuncSpan;\r\n                 this.delimiter = /\\s+/;\r\n                 break;\r\n             case \"gtexgwas\":\r\n                 this.skipRows = 1;\r\n                 this.decode = this.decodeGtexGWAS;\r\n                 this.delimiter = \"\\t\";\r\n                 break;\r\n             case \"refflat\":\r\n                 this.decode = this.decodeRefflat;\r\n                 this.delimiter = \"\\t\";\r\n                 break;\r\n             default:\r\n                  customFormat = igv.browser.getFormat(format);\r\n                 if (customFormat !== undefined) {\r\n                     this.decode = decodeCustom;\r\n                     this.format = customFormat;\r\n                     this.delimiter = customFormat.delimiter || \"\\t\";\r\n                 }\r\n                   else {\r\n                 \r\n                // }\r\n           }*/\n    }\n\n    _createClass(FeatureParser, [{\n        key: \"parseHeader\",\n        value: function parseHeader(data) {\n\n            var lines = data.split(\"\\n\"),\n                len = lines.length,\n                line,\n                i,\n                header;\n\n            for (i = 0; i < len; i++) {\n                line = lines[i];\n                if (line.startsWith(\"track\") || line.startsWith(\"#\") || line.startsWith(\"browser\")) {\n                    if (line.startsWith(\"track\")) {\n                        header = this.parseTrackLine(line);\n                    } else if (line.startsWith(\"##gff-version 3\")) {\n                        this.format = \"gff3\";\n                        if (!header) header = {};\n                        header[\"format\"] = \"gff3\";\n                    }\n                } else {\n                    header = {};\n                    break;\n                }\n            }\n            return header;\n        }\n    }, {\n        key: \"parseFeatures\",\n        value: function parseFeatures(data, chr, start, end) {\n\n            if (!data) return null;\n\n            var wig,\n                feature,\n                lines = data.split(\"\\n\"),\n                len = lines.length,\n                tokens,\n                allFeatures = [],\n                line,\n                i,\n                cnt = 0,\n                j,\n                decode = this.decode,\n                format = this.format,\n                delimiter = this.delimiter || \"\\t\";\n\n            for (i = this.skipRows; i < len; i++) {\n                line = lines[i];\n                if (line.startsWith(\"track\") || line.startsWith(\"#\") || line.startsWith(\"browser\")) {\n                    continue;\n                } else if (format === \"wig\" && line.startsWith(\"fixedStep\")) {\n                    wig = this.parseFixedStep(line);\n                    continue;\n                } else if (format === \"wig\" && line.startsWith(\"variableStep\")) {\n                    wig = this.parseVariableStep(line);\n                    continue;\n                }\n\n                tokens = lines[i].split(delimiter);\n                if (tokens.length < 1 || format !== \"wig\" && tokens.length < 3) continue;\n\n                feature = this.decode(tokens, wig);\n\n                if (feature) {\n                    if (feature.chr !== chr || feature.end < start || feature.start > end) {\n                        continue;\n                    }\n                    if (allFeatures.length < maxFeatureCount) {\n                        allFeatures.push(feature);\n                    } else {\n                        // Reservoir sampling,  conditionally replace existing feature with new one.\n                        j = Math.floor(Math.random() * cnt);\n                        if (j < maxFeatureCount) {\n                            allFeatures[j] = feature;\n                        }\n                    }\n                    cnt++;\n                } else {\n                    console.log(null);\n                }\n            }\n\n            return allFeatures;\n        }\n    }, {\n        key: \"decodeCustom\",\n\n\n        /**\r\n         * Decode the \"standard\" UCSC bed format\r\n         * @param tokens\r\n         * @param ignore\r\n         * @returns decoded feature, or null if this is not a valid record\r\n         */\n        value: function decodeCustom(tokens, ignore) {\n\n            var feature,\n                chr,\n                start,\n                end,\n                format = this.format,\n                // \"this\" refers to FeatureParser instance\n            coords = format.coords || 0;\n\n            if (tokens.length < 3) return null;\n\n            chr = tokens[format.chr];\n            start = parseInt(tokens[format.start]) - coords;\n            end = format.end !== undefined ? parseInt(tokens[format.end]) : start + 1;\n\n            feature = { chr: chr, start: start, end: end };\n\n            if (format.fields) {\n                format.fields.forEach(function (field, index) {\n                    if (index != format.chr && index != format.start && index != format.end) {\n                        feature[field] = tokens[index];\n                    }\n                });\n            }\n\n            return feature;\n        }\n    }], [{\n        key: \"parseFixedStep\",\n        value: function parseFixedStep(line) {\n\n            var tokens = line.split(/\\s+/),\n                cc = tokens[1].split(\"=\")[1],\n                ss = parseInt(tokens[2].split(\"=\")[1], 10),\n                step = parseInt(tokens[3].split(\"=\")[1], 10),\n                span = tokens.length > 4 ? parseInt(tokens[4].split(\"=\")[1], 10) : 1;\n\n            return { format: \"fixedStep\", chrom: cc, start: ss, step: step, span: span, index: 0 };\n        }\n    }, {\n        key: \"parseVariableStep\",\n        value: function parseVariableStep(line) {\n\n            var tokens = line.split(/\\s+/),\n                cc = tokens[1].split(\"=\")[1],\n                span = tokens.length > 2 ? parseInt(tokens[2].split(\"=\")[1], 10) : 1;\n            return { format: \"variableStep\", chrom: cc, span: span };\n        }\n    }, {\n        key: \"parseTrackLine\",\n        value: function parseTrackLine(line) {\n            var properties = {},\n                tokens = line.split(/(?:\")([^\"]+)(?:\")|([^\\s\"]+)(?=\\s+|$)/g),\n                tmp = [],\n                i,\n                tk,\n                curr;\n\n            // Clean up tokens array\n            for (i = 1; i < tokens.length; i++) {\n                if (!tokens[i] || tokens[i].trim().length === 0) continue;\n\n                tk = tokens[i].trim();\n\n                if (tk.endsWith(\"=\") > 0) {\n                    curr = tk;\n                } else if (curr) {\n                    tmp.push(curr + tk);\n                    curr = undefined;\n                } else {\n                    tmp.push(tk);\n                }\n            }\n\n            tmp.forEach(function (str) {\n                if (!str) return;\n                var kv = str.split('=', 2);\n                if (kv.length == 2) {\n                    properties[kv[0]] = kv[1];\n                }\n            });\n\n            return properties;\n        }\n\n        /**\r\n         * Decode the \"standard\" UCSC bed format\r\n         * @param tokens\r\n         * @param ignore\r\n         * @returns decoded feature, or null if this is not a valid record\r\n         */\n\n    }, {\n        key: \"decodeBed\",\n        value: function decodeBed(tokens, ignore) {\n\n            var chr, start, end, id, name, tmp, idName, exonCount, exonSizes, exonStarts, exons, exon, feature, eStart, eEnd;\n\n            if (tokens.length < 3) return null;\n\n            chr = tokens[0];\n            start = parseInt(tokens[1]);\n            end = tokens.length > 2 ? parseInt(tokens[2]) : start + 1;\n\n            feature = { chr: chr, start: start, end: end, score: 1000 };\n\n            if (tokens.length > 3) {\n                // Note: these are very special rules for the gencode gene files.\n                tmp = tokens[3].replace(/\"/g, '');\n                idName = tmp.split(';');\n                for (var i = 0; i < idName.length; i++) {\n                    var kv = idName[i].split('=');\n                    if (kv[0] == \"gene_id\") {\n                        id = kv[1];\n                    }\n                    if (kv[0] == \"gene_name\") {\n                        name = kv[1];\n                    }\n                }\n                feature.id = id ? id : tmp;\n                feature.name = name ? name : tmp;\n            }\n\n            if (tokens.length > 4) {\n                feature.score = parseFloat(tokens[4]);\n            }\n            if (tokens.length > 5) {\n                feature.strand = tokens[5];\n            }\n            if (tokens.length > 6) {\n                feature.cdStart = parseInt(tokens[6]);\n            }\n            if (tokens.length > 7) {\n                feature.cdEnd = parseInt(tokens[7]);\n            }\n            if (tokens.length > 8) {\n                if (tokens[8] !== \".\" && tokens[8] !== \"0\") feature.color = igv.createColorString(tokens[8]);\n            }\n            if (tokens.length > 11) {\n                exonCount = parseInt(tokens[9]);\n                exonSizes = tokens[10].split(',');\n                exonStarts = tokens[11].split(',');\n                exons = [];\n\n                for (var i = 0; i < exonCount; i++) {\n                    eStart = start + parseInt(exonStarts[i]);\n                    eEnd = eStart + parseInt(exonSizes[i]);\n                    var exon = { start: eStart, end: eEnd };\n\n                    if (feature.cdStart > eEnd || feature.cdEnd < feature.cdStart) exon.utr = true; // Entire exon is UTR\n                    if (feature.cdStart >= eStart && feature.cdStart <= eEnd) exon.cdStart = feature.cdStart;\n                    if (feature.cdEnd >= eStart && feature.cdEnd <= eEnd) exon.cdEnd = feature.cdEnd;\n\n                    exons.push(exon);\n                }\n\n                feature.exons = exons;\n            }\n\n            feature.popupData = function () {\n                var data = [];\n                if (feature.name) data.push({ name: \"Name\", value: feature.name });\n                if (\"+\" === feature.strand || \"-\" === feature.strand) data.push({ name: \"Strand\", value: feature.strand });\n                return data;\n            };\n\n            return feature;\n        }\n\n        /**\r\n         * Decode a UCSC \"refflat\" record\r\n         * @param tokens\r\n         * @param ignore\r\n         * @returns {*}\r\n         */\n\n    }, {\n        key: \"decodeRefflat\",\n        value: function decodeRefflat(tokens, ignore) {\n\n            if (tokens.length < 10) return null;\n\n            var feature = {\n                chr: tokens[2],\n                start: parseInt(tokens[4]),\n                end: parseInt(tokens[5]),\n                id: tokens[1],\n                name: tokens[0],\n                strand: tokens[3],\n                cdStart: parseInt(tokens[6]),\n                cdEnd: parseInt(tokens[7])\n            },\n                exonCount = parseInt(tokens[8]),\n                exonStarts = tokens[9].split(','),\n                exonEnds = tokens[10].split(','),\n                exons = [];\n\n            for (var i = 0; i < exonCount; i++) {\n                exons.push({ start: parseInt(exonStarts[i]), end: parseInt(exonEnds[i]) });\n            }\n\n            feature.exons = exons;\n\n            feature.popupData = function () {\n                return [{ name: \"Name\", value: feature.name }];\n            };\n\n            return feature;\n        }\n    }, {\n        key: \"decodePeak\",\n        value: function decodePeak(tokens, ignore) {\n\n            var tokenCount, chr, start, end, strand, name, score, qValue, signal, pValue;\n\n            tokenCount = tokens.length;\n            if (tokenCount < 9) {\n                return null;\n            }\n\n            chr = tokens[0];\n            start = parseInt(tokens[1]);\n            end = parseInt(tokens[2]);\n            name = tokens[3];\n            score = parseFloat(tokens[4]);\n            strand = tokens[5].trim();\n            signal = parseFloat(tokens[6]);\n            pValue = parseFloat(tokens[7]);\n            qValue = parseFloat(tokens[8]);\n\n            if (score === 0) score = signal;\n\n            return {\n                chr: chr, start: start, end: end, name: name, score: score, strand: strand, signal: signal,\n                pValue: pValue, qValue: qValue\n            };\n        }\n    }, {\n        key: \"decodeBedGraph\",\n        value: function decodeBedGraph(tokens, ignore) {\n\n            var chr, start, end, value;\n\n            if (tokens.length < 3) return null;\n\n            chr = tokens[0];\n            start = parseInt(tokens[1]);\n            end = parseInt(tokens[2]);\n\n            value = parseFloat(tokens[3]);\n\n            return { chr: chr, start: start, end: end, value: value };\n        }\n    }, {\n        key: \"decodeWig\",\n        value: function decodeWig(tokens, wig) {\n\n            var ss, ee, value;\n\n            if (wig.format === \"fixedStep\") {\n\n                ss = wig.index * wig.step + wig.start;\n                ee = ss + wig.span;\n                value = parseFloat(tokens[0]);\n                ++wig.index;\n                return isNaN(value) ? null : { chr: wig.chrom, start: ss, end: ee, value: value };\n            } else if (wig.format === \"variableStep\") {\n\n                if (tokens.length < 2) return null;\n\n                ss = parseInt(tokens[0], 10);\n                ee = ss + wig.span;\n                value = parseFloat(tokens[1]);\n                return isNaN(value) ? null : { chr: wig.chrom, start: ss, end: ee, value: value };\n            } else {\n                return decodeBedGraph(tokens);\n            }\n        }\n    }, {\n        key: \"decodeAneu\",\n        value: function decodeAneu(tokens, ignore) {\n\n            var chr, start, end, feature;\n\n            if (tokens.length < 4) return null;\n\n            chr = tokens[1];\n            start = parseInt(tokens[2]);\n            end = tokens.length > 3 ? parseInt(tokens[3]) : start + 1;\n\n            feature = { chr: chr, start: start, end: end };\n\n            if (tokens.length > 4) {\n                feature.score = parseFloat(tokens[4]);\n                feature.value = feature.score;\n            }\n\n            feature.popupData = function () {\n                return [{ name: \"Name\", value: feature.name }];\n            };\n\n            return feature;\n        }\n    }, {\n        key: \"decodeFusionJuncSpan\",\n        value: function decodeFusionJuncSpan(tokens, ignore) {\n\n            /*\r\n             Format:\r\n               0       #scaffold\r\n             1       fusion_break_name\r\n             2       break_left\r\n             3       break_right\r\n             4       num_junction_reads\r\n             5       num_spanning_frags\r\n             6       spanning_frag_coords\r\n               0       B3GNT1--NPSR1\r\n             1       B3GNT1--NPSR1|2203-10182\r\n             2       2203\r\n             3       10182\r\n             4       189\r\n             5       1138\r\n             6       1860-13757,1798-13819,1391-18127,1443-17174,...\r\n               */\n\n            var chr = tokens[0];\n            var fusion_name = tokens[1];\n            var junction_left = parseInt(tokens[2]);\n            var junction_right = parseInt(tokens[3]);\n            var num_junction_reads = parseInt(tokens[4]);\n            var num_spanning_frags = parseInt(tokens[5]);\n\n            var spanning_frag_coords_text = tokens[6];\n\n            var feature = {\n                chr: chr,\n                name: fusion_name,\n                junction_left: junction_left,\n                junction_right: junction_right,\n                num_junction_reads: num_junction_reads,\n                num_spanning_frags: num_spanning_frags,\n                spanning_frag_coords: [],\n\n                start: -1,\n                end: -1\n            }; // set start and end later based on min/max of span coords\n\n            var min_coord = junction_left;\n            var max_coord = junction_right;\n\n            if (num_spanning_frags > 0) {\n\n                var coord_pairs = spanning_frag_coords_text.split(',');\n\n                for (var i = 0; i < coord_pairs.length; i++) {\n                    var split_coords = coord_pairs[i].split('-');\n\n                    var span_left = split_coords[0];\n                    var span_right = split_coords[1];\n\n                    if (span_left < min_coord) {\n                        min_coord = span_left;\n                    }\n                    if (span_right > max_coord) {\n                        max_coord = span_right;\n                    }\n                    feature.spanning_frag_coords.push({ left: span_left, right: span_right });\n                }\n            }\n\n            feature.start = min_coord;\n            feature.end = max_coord;\n\n            feature.popupData = function () {\n                return [{ name: \"Name\", value: feature.name }];\n            };\n\n            return feature;\n        }\n    }, {\n        key: \"decodeGtexGWAS\",\n        value: function decodeGtexGWAS(tokens, ignore) {\n\n            var tokenCount, chr, start, end, strand, name, score, qValue, signal, pValue;\n\n            tokenCount = tokens.length;\n            if (tokenCount < 8) {\n                return null;\n            }\n\n            chr = tokens[0];\n            start = parseInt(tokens[1]) - 1;\n            end = parseInt(tokens[3].split(':')[1]);\n            //name = tokens[3];\n            //score = parseFloat(tokens[4]);\n            //strand = tokens[5].trim();\n            //signal = parseFloat(tokens[6]);\n            pValue = parseFloat(tokens[5]);\n            //qValue = parseFloat(tokens[8]);\n\n            //return {chr: chr, start: start, end: end, name: name, score: score, strand: strand, signal: signal,\n            //    pValue: pValue, qValue: qValue};\n            return { chr: chr, start: start, end: end, pvalue: pValue };\n        }\n\n        /**\r\n         * Decode a single gff record (1 line in file).  Aggregations such as gene models are constructed at a higher level.\r\n         *      ctg123 . mRNA            1050  9000  .  +  .  ID=mRNA00001;Parent=gene00001\r\n         * @param tokens\r\n         * @param ignore\r\n         * @returns {*}\r\n         */\n\n    }, {\n        key: \"decodeGFF\",\n        value: function decodeGFF(tokens, ignore) {\n\n            var tokenCount,\n                chr,\n                start,\n                end,\n                strand,\n                type,\n                score,\n                phase,\n                attributeString,\n                id,\n                parent,\n                color,\n                name,\n                transcript_id,\n                i,\n                format = this.format;\n\n            tokenCount = tokens.length;\n            if (tokenCount < 9) {\n                return null; // Not a valid gff record\n            }\n\n            chr = tokens[0];\n            type = tokens[2];\n            start = parseInt(tokens[3]) - 1;\n            end = parseInt(tokens[4]);\n            score = \".\" === tokens[5] ? 0 : parseFloat(tokens[5]);\n            strand = tokens[6];\n            phase = \".\" === tokens[7] ? 0 : parseInt(tokens[7]);\n            attributeString = tokens[8];\n\n            // Find ID and Parent, or transcript_id\n            var delim = 'gff3' === format ? '=' : /\\s+/;\n            var attributes = {};\n            attributeString.split(';').forEach(function (kv) {\n                var t = kv.trim().split(delim, 2),\n                    key,\n                    value;\n                if (t.length == 2) {\n                    key = t[0].trim();\n                    value = t[1].trim();\n                    //Strip off quotes, if any\n                    if (value.startsWith('\"') && value.endsWith('\"')) {\n                        value = value.substr(1, value.length - 2);\n                    }\n                    if (\"ID\" === t[0]) id = t[1];else if (\"Parent\" === t[0]) parent = t[1];else if (\"color\" === t[0].toLowerCase()) color = igv.createColorString(t[1]);else if (\"transcript_id\" === t[0]) id = t[1]; // gtf format\n                    attributes[key] = value;\n                }\n            });\n\n            // Find name (label) property\n            if (this.nameField) {\n                name = attributes[this.nameField];\n            } else {\n                for (i = 0; i < gffNameFields.length; i++) {\n                    if (attributes.hasOwnProperty(gffNameFields[i])) {\n                        this.nameField = gffNameFields[i];\n                        name = attributes[this.nameField];\n\n                        break;\n                    }\n                }\n            }\n\n            return {\n                id: id,\n                parent: parent,\n                name: name,\n                type: type,\n                chr: chr,\n                start: start,\n                end: end,\n                score: score,\n                strand: strand,\n                color: color,\n                attributeString: attributeString,\n                popupData: function popupData() {\n                    var kvs = this.attributeString.split(';'),\n                        pd = [],\n                        key,\n                        value;\n                    kvs.forEach(function (kv) {\n                        var t = kv.trim().split(delim, 2);\n                        if (t.length === 2 && t[1] !== undefined) {\n                            key = t[0].trim();\n                            value = t[1].trim();\n                            //Strip off quotes, if any\n                            if (value.startsWith('\"') && value.endsWith('\"')) {\n                                value = value.substr(1, value.length - 2);\n                            }\n                            pd.push({ name: key, value: value });\n                        }\n                    });\n                    return pd;\n                }\n\n            };\n        }\n    }]);\n\n    return FeatureParser;\n}();\n\n//*******js/feature/featureCache.js**********************\n\n\n/**\r\n * Object for caching lists of features.  Supports effecient queries for sub-range  (chr, start, end)\r\n *\r\n * @param featureList\r\n * @param The genomic range spanned by featureList (optional)\r\n * @constructor\r\n */\n\nvar FeatureCache = function () {\n    function FeatureCache(featureList, range) {\n        _classCallCheck(this, FeatureCache);\n\n        this.treeMap = FeatureCache.buildTreeMap(featureList);\n        this.range = range;\n    }\n\n    _createClass(FeatureCache, [{\n        key: \"queryFeatures\",\n        value: function queryFeatures(chr, start, end) {\n\n            var featureList, intervalFeatures, feature, len, i, tree, intervals;\n\n            tree = this.treeMap[chr];\n\n            if (!tree) return [];\n\n            intervals = tree.findOverlapping(start, end);\n\n            if (intervals.length == 0) {\n                return [];\n            } else {\n                // Trim the list of features in the intervals to those\n                // overlapping the requested range.\n                // Assumption: features are sorted by start position\n\n                featureList = [];\n\n                intervals.forEach(function (interval) {\n                    intervalFeatures = interval.value;\n                    len = intervalFeatures.length;\n                    for (i = 0; i < len; i++) {\n                        feature = intervalFeatures[i];\n                        if (feature.start > end) break;else if (feature.end >= start) {\n                            featureList.push(feature);\n                        }\n                    }\n                });\n                return featureList;\n            }\n        }\n    }, {\n        key: \"allFeatures\",\n        value: function allFeatures() {\n\n            var allFeatures = [];\n            var treeMap = this.treeMap;\n            if (treeMap) {\n                for (var key in treeMap) {\n                    if (treeMap.hasOwnProperty(key)) {\n\n                        var tree = treeMap[key];\n                        tree.mapIntervals(function (interval) {\n                            allFeatures = allFeatures.concat(interval.value);\n                        });\n                    }\n                }\n            }\n            return allFeatures;\n        }\n    }], [{\n        key: \"buildTreeMap\",\n        value: function buildTreeMap(featureList) {\n\n            var featureCache = {},\n                chromosomes = [],\n                treeMap = {},\n                genome = null;\n\n            if (featureList) {\n\n                featureList.forEach(function (feature) {\n\n                    var chr = feature.chr,\n                        geneList;\n\n                    // Translate to \"official\" name\n                    if (genome) chr = genome.getChromosomeName(chr);\n\n                    geneList = featureCache[chr];\n\n                    if (!geneList) {\n                        chromosomes.push(chr);\n                        geneList = [];\n                        featureCache[chr] = geneList;\n                    }\n\n                    geneList.push(feature);\n                });\n\n                // Now build interval tree for each chromosome\n\n                for (var i = 0; i < chromosomes.length; i++) {\n                    var chr = chromosomes[i];\n                    treeMap[chr] = FeatureCache.buildIntervalTree(featureCache[chr]);\n                }\n            }\n\n            return treeMap;\n        }\n    }, {\n        key: \"buildIntervalTree\",\n\n\n        /**\r\n         * Build an interval tree from the feature list for fast interval based queries.   We lump features in groups\r\n         * of 10, or total size / 100,   to reduce size of the tree.\r\n         *\r\n         * @param featureList\r\n         */\n        value: function buildIntervalTree(featureList) {\n\n            var i, e, iStart, iEnd, tree, chunkSize, len, subArray;\n\n            tree = new IntervalTree();\n            len = featureList.length;\n\n            chunkSize = Math.max(10, Math.round(len / 100));\n\n            featureList.sort(function (f1, f2) {\n                return f1.start === f2.start ? 0 : f1.start > f2.start ? 1 : -1;\n            });\n\n            for (i = 0; i < len; i += chunkSize) {\n                e = Math.min(len, i + chunkSize);\n                subArray = featureList.slice(i, e);\n                iStart = subArray[0].start;\n                //\n                iEnd = iStart;\n                subArray.forEach(function (feature) {\n                    iEnd = Math.max(iEnd, feature.end);\n                });\n                tree.insert(iStart, iEnd, subArray);\n            }\n\n            return tree;\n        }\n    }]);\n\n    return FeatureCache;\n}();\n\n//*****js/intervalTree.js************\n\n\nvar BLACK = 1;\nvar RED = 2;\n\nvar NIL = {};\nNIL.color = BLACK;\nNIL.parent = NIL;\nNIL.left = NIL;\nNIL.right = NIL;\n\nvar IntervalTree = function () {\n    function IntervalTree() {\n        _classCallCheck(this, IntervalTree);\n\n        this.root = NIL;\n    }\n\n    _createClass(IntervalTree, [{\n        key: \"insert\",\n        value: function insert(start, end, value) {\n\n            var interval = new Interval(start, end, value);\n            var x = new Node(interval);\n            this.treeInsert(x);\n            x.color = RED;\n            while (x != this.root && x.parent.color == RED) {\n                if (x.parent == x.parent.parent.left) {\n                    var y = x.parent.parent.right;\n                    if (y.color == RED) {\n                        x.parent.color = BLACK;\n                        y.color = BLACK;\n                        x.parent.parent.color = RED;\n                        x = x.parent.parent;\n                    } else {\n                        if (x == x.parent.right) {\n                            x = x.parent;\n                            this.leftRotate(x);\n                        }\n                        x.parent.color = BLACK;\n                        x.parent.parent.color = RED;\n                        this.rightRotate(x.parent.parent);\n                    }\n                } else {\n                    var y = x.parent.parent.left;\n                    if (y.color == RED) {\n                        x.parent.color = BLACK;\n                        y.color = BLACK;\n                        x.parent.parent.color = RED;\n                        x = x.parent.parent;\n                    } else {\n                        if (x == x.parent.left) {\n                            x = x.parent;\n                            this.rightRotate(x);\n                        }\n                        x.parent.color = BLACK;\n                        x.parent.parent.color = RED;\n                        this.leftRotate(x.parent.parent);\n                    }\n                }\n            }\n            this.root.color = BLACK;\n        }\n\n        /**\r\n         *\r\n         * @param start - query interval\r\n         * @param end - query interval\r\n         * @returns Array of all intervals overlapping the query region\r\n         */\n\n    }, {\n        key: \"findOverlapping\",\n        value: function findOverlapping(start, end) {\n\n            var searchInterval = new Interval(start, end, 0);\n\n            if (this.root === NIL) return [];\n\n            var intervals = this.searchAll(searchInterval, this.root, []);\n\n            if (intervals.length > 1) {\n                intervals.sort(function (i1, i2) {\n                    return i1.low - i2.low;\n                });\n            }\n\n            return intervals;\n        }\n\n        /**\r\n         * Dump info on intervals to console.  For debugging.\r\n         */\n\n    }, {\n        key: \"logIntervals\",\n        value: function logIntervals() {\n\n            logNode(this.root, 0);\n\n            function logNode(node, indent) {\n\n                var space = \"\";\n                for (var i = 0; i < indent; i++) {\n                    space += \" \";\n                }console.log(space + node.interval.low + \" \" + node.interval.high); // + \" \" + (node.interval.value ? node.interval.value : \" null\"));\n\n                indent += 5;\n\n                if (node.left != NIL) logNode(node.left, indent);\n                if (node.right != NIL) logNode(node.right, indent);\n            }\n        }\n    }, {\n        key: \"mapIntervals\",\n        value: function mapIntervals(func) {\n\n            applyInterval(this.root);\n\n            function applyInterval(node) {\n\n                func(node.interval);\n\n                if (node.left != NIL) applyInterval(node.left);\n                if (node.right != NIL) applyInterval(node.right);\n            }\n        }\n    }, {\n        key: \"searchAll\",\n        value: function searchAll(interval, node, results) {\n\n            if (node.interval.overlaps(interval)) {\n                results.push(node.interval);\n            }\n\n            if (node.left != NIL && node.left.max >= interval.low) {\n                this.searchAll(interval, node.left, results);\n            }\n\n            if (node.right != NIL && node.right.min <= interval.high) {\n                this.searchAll(interval, node.right, results);\n            }\n\n            return results;\n        }\n    }, {\n        key: \"leftRotate\",\n        value: function leftRotate(x) {\n            var y = x.right;\n            x.right = y.left;\n            if (y.left != NIL) {\n                y.left.parent = x;\n            }\n            y.parent = x.parent;\n            if (x.parent == NIL) {\n                this.root = y;\n            } else {\n                if (x.parent.left == x) {\n                    x.parent.left = y;\n                } else {\n                    x.parent.right = y;\n                }\n            }\n            y.left = x;\n            x.parent = y;\n\n            this.applyUpdate(x);\n            // no need to apply update on y, since it'll y is an ancestor\n            // of x, and will be touched by applyUpdate().\n        }\n    }, {\n        key: \"rightRotate\",\n        value: function rightRotate(x) {\n            var y = x.left;\n            x.left = y.right;\n            if (y.right != NIL) {\n                y.right.parent = x;\n            }\n            y.parent = x.parent;\n            if (x.parent == NIL) {\n                this.root = y;\n            } else {\n                if (x.parent.right == x) {\n                    x.parent.right = y;\n                } else {\n                    x.parent.left = y;\n                }\n            }\n            y.right = x;\n            x.parent = y;\n\n            this.applyUpdate(x);\n            // no need to apply update on y, since it'll y is an ancestor\n            // of x, and will be touched by applyUpdate().\n        }\n\n        /**\r\n         * Note:  Does not maintain RB constraints,  this is done post insert\r\n         *\r\n         * @param x  a Node\r\n         */\n\n    }, {\n        key: \"treeInsert\",\n        value: function treeInsert(x) {\n            var node = this.root;\n            var y = NIL;\n            while (node != NIL) {\n                y = node;\n                if (x.interval.low <= node.interval.low) {\n                    node = node.left;\n                } else {\n                    node = node.right;\n                }\n            }\n            x.parent = y;\n\n            if (y == NIL) {\n                this.root = x;\n                x.left = x.right = NIL;\n            } else {\n                if (x.interval.low <= y.interval.low) {\n                    y.left = x;\n                } else {\n                    y.right = x;\n                }\n            }\n\n            this.applyUpdate(x);\n        }\n\n        // Applies the statistic update on the node and its ancestors.\n\n    }, {\n        key: \"applyUpdate\",\n        value: function applyUpdate(node) {\n            while (node != NIL) {\n                var nodeMax = node.left.max > node.right.max ? node.left.max : node.right.max;\n                var intervalHigh = node.interval.high;\n                node.max = nodeMax > intervalHigh ? nodeMax : intervalHigh;\n\n                var nodeMin = node.left.min < node.right.min ? node.left.min : node.right.min;\n                var intervalLow = node.interval.low;\n                node.min = nodeMin < intervalLow ? nodeMin : intervalLow;\n\n                node = node.parent;\n            }\n        }\n    }]);\n\n    return IntervalTree;\n}();\n\nvar Interval = function () {\n    function Interval(low, high, value) {\n        _classCallCheck(this, Interval);\n\n        this.low = low;\n        this.high = high;\n        this.value = value;\n    }\n\n    _createClass(Interval, [{\n        key: \"equals\",\n        value: function equals(other) {\n            if (!other) {\n                return false;\n            }\n            if (this == other) {\n                return true;\n            }\n            return this.low == otherInterval.low && this.high == otherInterval.high;\n        }\n    }, {\n        key: \"compareTo\",\n        value: function compareTo(other) {\n            if (this.low < other.low) return -1;\n            if (this.low > other.low) return 1;\n\n            if (this.high < other.high) return -1;\n            if (this.high > other.high) return 1;\n\n            return 0;\n        }\n\n        /**\r\n         * Returns true if this interval overlaps the other.\r\n         */\n\n    }, {\n        key: \"overlaps\",\n        value: function overlaps(other) {\n            try {\n                return this.low <= other.high && other.low <= this.high;\n            } catch (e) {\n                //alert(e);\n                igv.presentAlert(e);\n            }\n        }\n    }]);\n\n    return Interval;\n}();\n\nvar Node = function Node(interval) {\n    _classCallCheck(this, Node);\n\n    this.parent = NIL;\n    this.left = NIL;\n    this.right = NIL;\n    this.interval = interval;\n    this.color = RED;\n};\n\nvar GenomicInterval = function () {\n    function GenomicInterval(chr, start, end, features) {\n        _classCallCheck(this, GenomicInterval);\n\n        this.chr = chr;\n        this.start = start;\n        this.end = end;\n        this.features = features;\n    }\n\n    _createClass(GenomicInterval, [{\n        key: \"contains\",\n        value: function contains(chr, start, end) {\n            return this.chr == chr && this.start <= start && this.end >= end;\n        }\n    }, {\n        key: \"containsRange\",\n        value: function containsRange(range) {\n            return this.chr === range.chr && this.start <= range.start && this.end >= range.end;\n        }\n    }, {\n        key: \"rangesToGet\",\n        value: function rangesToGet(range) {\n            var needs_range = false;\n            var ranges = {};\n            if (this.chr !== range.chr) {\n                ranges.all = [range.start, range.end];\n                needs_range = true;\n                this.start = range.start;\n                this.end = range.end;\n            } else {\n                if (range.start < this.start) {\n                    ranges.left = [range.start, this.start];\n                    needs_range = true;\n                    this.start = range.start;\n                }\n                if (range.end > this.end) {\n                    ranges.right = [this.end, range.end];\n                    needs_range = true;\n                    this.end = range.end;\n                }\n            }\n            if (!needs_range) {\n                return false;\n            }\n            return ranges;\n        }\n    }]);\n\n    return GenomicInterval;\n}();\n\nvar FastaSequence = function () {\n    function FastaSequence(url) {\n        _classCallCheck(this, FastaSequence);\n\n        this.file = url;\n        this.indexed = true;\n        if (this.indexed) {\n            this.indexFile = this.file + \".fai\";\n        }\n    }\n\n    _createClass(FastaSequence, [{\n        key: \"init\",\n        value: function init() {\n\n            var self = this;\n\n            if (self.indexed) {\n\n                return new Promise(function (fulfill, reject) {\n\n                    self.getIndex().then(function (index) {\n                        var order = 0;\n                        self.chromosomes = {};\n                        self.chromosomeNames.forEach(function (chrName) {\n                            var bpLength = self.index[chrName].size;\n                            self.chromosomes[chrName] = new igv.Chromosome(chrName, order++, bpLength);\n                        });\n\n                        // Ignore index, getting chr names as a side effect.  Really bad practice\n                        fulfill();\n                    }).catch(reject);\n                });\n            } else {\n                return self.loadAll();\n            }\n        }\n    }, {\n        key: \"getSequence\",\n        value: function getSequence(chr, start, end) {\n\n            if (this.indexed) {\n                return this.getSequenceIndexed(chr, start, end);\n            } else {\n                return getSequenceNonIndexed.this(chr, start, end);\n            }\n        }\n    }, {\n        key: \"getSequenceIndexed\",\n        value: function getSequenceIndexed(chr, start, end) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                var interval = self.interval;\n\n                if (interval && interval.contains(chr, start, end)) {\n\n                    fulfill(getSequenceFromInterval(interval, start, end));\n                } else {\n\n                    //console.log(\"Cache miss: \" + (interval === undefined ? \"nil\" : interval.chr + \":\" + interval.start + \"-\" + interval.end));\n\n                    // Expand query, to minimum of 100kb\n                    var qstart = start;\n                    var qend = end;\n                    if (end - start < 100000) {\n                        var w = end - start;\n                        var center = Math.round(start + w / 2);\n                        qstart = Math.max(0, center - 50000);\n                        qend = center + 50000;\n                    }\n\n                    self.readSequence(chr, qstart, qend).then(function (seqBytes) {\n                        self.interval = new GenomicInterval(chr, qstart, qend, seqBytes);\n                        fulfill(getSequenceFromInterval(self.interval, start, end));\n                    }).catch(reject);\n                }\n\n                function getSequenceFromInterval(interval, start, end) {\n                    var offset = start - interval.start;\n                    var n = end - start;\n                    var seq = interval.features ? interval.features.substr(offset, n) : null;\n                    return seq;\n                }\n            });\n        }\n    }, {\n        key: \"getSequenceNonIndexed\",\n        value: function getSequenceNonIndexed(chr, start, end) {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                var seq = self.sequences[chr];\n                if (seq && seq.length > end) {\n                    fulfill(seq.substring(start, end));\n                }\n            });\n        }\n    }, {\n        key: \"getIndex\",\n        value: function getIndex() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n\n                if (self.index) {\n                    fulfill(self.index);\n                } else {\n                    _igvxhr.igvxhr.load(self.indexFile, {}).then(function (data) {\n                        var lines = data.split(\"\\n\");\n                        var len = lines.length;\n                        var lineNo = 0;\n\n                        self.chromosomeNames = []; // TODO -- eliminate this side effect !!!!\n                        self.index = {}; // TODO -- ditto\n                        while (lineNo < len) {\n\n                            var tokens = lines[lineNo++].split(\"\\t\");\n                            var nTokens = tokens.length;\n                            if (nTokens == 5) {\n                                // Parse the index line.\n                                var chr = tokens[0];\n                                var size = parseInt(tokens[1]);\n                                var position = parseInt(tokens[2]);\n                                var basesPerLine = parseInt(tokens[3]);\n                                var bytesPerLine = parseInt(tokens[4]);\n\n                                var indexEntry = {\n                                    size: size, position: position, basesPerLine: basesPerLine, bytesPerLine: bytesPerLine\n                                };\n\n                                self.chromosomeNames.push(chr);\n                                self.index[chr] = indexEntry;\n                            }\n                        }\n\n                        if (fulfill) {\n                            fulfill(self.index);\n                        }\n                    }).catch(reject);\n                }\n            });\n        }\n    }, {\n        key: \"loadAll\",\n        value: function loadAll() {\n\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                self.chromosomeNames = [];\n                self.chromosomes = {};\n                self.sequences = {};\n\n                _igvxhr.igvxhr.load(self.file, {\n                    withCredentials: self.withCredentials\n\n                }).then(function (data) {\n\n                    var lines = data.splitLines(),\n                        len = lines.length,\n                        lineNo = 0,\n                        nextLine,\n                        currentSeq = \"\",\n                        currentChr,\n                        order = 0;\n\n                    while (lineNo < len) {\n                        nextLine = lines[lineNo++].trim();\n                        if (nextLine.startsWith(\"#\") || nextLine.length === 0) {\n                            continue;\n                        } else if (nextLine.startsWith(\">\")) {\n                            if (currentSeq) {\n                                self.chromosomeNames.push(currentChr);\n                                self.sequences[currentChr] = currentSeq;\n                                self.chromosomes[currentChr] = new igv.Chromosome(currentChr, order++, currentSeq.length);\n                            }\n                            currentChr = nextLine.substr(1).split(\"\\\\s+\")[0];\n                            currentSeq = \"\";\n                        } else {\n                            currentSeq += nextLine;\n                        }\n                    }\n\n                    fulfill();\n                });\n            });\n        }\n    }, {\n        key: \"readSequence\",\n        value: function readSequence(chr, qstart, qend) {\n\n            //console.log(\"Read sequence \" + chr + \":\" + qstart + \"-\" + qend);\n            var self = this;\n\n            return new Promise(function (fulfill, reject) {\n                self.getIndex().then(function () {\n\n                    var idxEntry = self.index[chr];\n                    if (!idxEntry) {\n                        console.log(\"No index entry for chr: \" + chr);\n\n                        // Tag interval with null so we don't try again\n                        self.interval = new GenomicInterval(chr, qstart, qend, null);\n                        fulfill(null);\n                    } else {\n\n                        var start = Math.max(0, qstart); // qstart should never be < 0\n                        var end = Math.min(idxEntry.size, qend);\n                        var bytesPerLine = idxEntry.bytesPerLine;\n                        var basesPerLine = idxEntry.basesPerLine;\n                        var position = idxEntry.position;\n                        var nEndBytes = bytesPerLine - basesPerLine;\n\n                        var startLine = Math.floor(start / basesPerLine);\n                        var endLine = Math.floor(end / basesPerLine);\n\n                        var base0 = startLine * basesPerLine; // Base at beginning of start line\n\n                        var offset = start - base0;\n\n                        var startByte = position + startLine * bytesPerLine + offset;\n\n                        var base1 = endLine * basesPerLine;\n                        var offset1 = end - base1;\n                        var endByte = position + endLine * bytesPerLine + offset1 - 1;\n                        var byteCount = endByte - startByte + 1;\n                        if (byteCount <= 0) {\n                            fulfill(null);\n                        }\n\n                        _igvxhr.igvxhr.load(self.file, {\n                            range: { start: startByte, size: byteCount }\n                        }).then(function (allBytes) {\n\n                            var nBases,\n                                seqBytes = \"\",\n                                srcPos = 0,\n                                desPos = 0,\n                                allBytesLength = allBytes.length;\n\n                            if (offset > 0) {\n                                nBases = Math.min(end - start, basesPerLine - offset);\n                                seqBytes += allBytes.substr(srcPos, nBases);\n                                srcPos += nBases + nEndBytes;\n                                desPos += nBases;\n                            }\n\n                            while (srcPos < allBytesLength) {\n                                nBases = Math.min(basesPerLine, allBytesLength - srcPos);\n                                seqBytes += allBytes.substr(srcPos, nBases);\n                                srcPos += nBases + nEndBytes;\n                                desPos += nBases;\n                            }\n\n                            fulfill(seqBytes);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        }\n    }]);\n\n    return FastaSequence;\n}();\n\nexports.FeatureSource = FeatureSource;\nexports.FastaSequence = FastaSequence;\nexports.BigBedFeatureSource = BigBedFeatureSource;\nexports.TabixBedFeatureSource = TabixBedFeatureSource;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/feature.js\n");

/***/ }),

/***/ "../MLVPanel/src/igvxhr.js":
/*!****************************!*\
  !*** .Panel/src/igvxhr.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.unbgzf = exports.igvxhr = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nhe MIT License (MIT)\r\nr\nopyright (c) 2014 Broad Institute\r\nr\nermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * The above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\nr\nr\nr\nr\nr\nr\nr\nr\nr\nn\nvar _inflate = __webpack_require__(/*! ./vendor/inflate.js */ \"../MLVPanel/src/vendor/inflate.js\");\n\nvar _zlib_and_gzip = __webpack_require__(/*! ./vendor/zlib_and_gzip.js */ \"../MLVPanel/src/vendor/zlib_and_gzip.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar is_node = false;\ntry {\n    navigator;\n} catch (e) {\n    is_node = true;\n}\n\nvar NONE = 0;\nvar GZIP = 1;\nvar BGZF = 2;\n\nvar igvxhr = function () {\n    function igvxhr() {\n        _classCallCheck(this, igvxhr);\n    }\n\n    _createClass(igvxhr, null, [{\n        key: \"load\",\n\n\n        // Compression types\n\n\n        value: function load(url, options) {\n\n            return new Promise(function (fulfill, reject) {\n                var xhr = new XMLHttpRequest(),\n                    sendData = options.sendData,\n                    method = options.method || (sendData ? \"POST\" : \"GET\"),\n                    range = options.range,\n                    responseType = options.responseType,\n                    contentType = options.contentType,\n                    mimeType = options.mimeType,\n                    headers = options.headers,\n                    isSafari = is_node ? false : navigator.vendor.indexOf(\"Apple\") == 0 && /\\sSafari\\//.test(navigator.userAgent),\n                    withCredentials = options.withCredentials,\n                    header_keys,\n                    key,\n                    value,\n                    i;\n\n                // Support for GCS paths.\n                //url = url.startsWith(\"gs://\") ? igv.Google.translateGoogleCloudURL(url) : url;\n\n\n                /* if (igv.Google.isGoogleURL(url)) {\r\n                       url = igv.Google.addApiKey(url);\r\n                       // Add google headers (e.g. oAuth)\r\n                     headers = headers || {};\r\n                     igv.Google.addGoogleHeaders(headers);\r\n                       // Hack to prevent caching for google storage files.  Get weird net:err-cache errors otherwise\r\n                     if (range) {\r\n                         url += url.includes(\"?\") ? \"&\" : \"?\";\r\n                         url += \"someRandomSeed=\" + Math.random().toString(36);\r\n                     }\r\n                 }\r\n                 */\n\n                xhr.open(method, url);\n\n                if (range) {\n                    var rangeEnd = range.size ? range.start + range.size - 1 : \"\";\n                    xhr.setRequestHeader(\"Range\", \"bytes=\" + range.start + \"-\" + rangeEnd);\n                }\n                if (contentType) {\n                    xhr.setRequestHeader(\"Content-Type\", contentType);\n                }\n                if (mimeType) {\n                    xhr.overrideMimeType(mimeType);\n                }\n                if (responseType) {\n                    xhr.responseType = responseType;\n                }\n                if (headers) {\n                    header_keys = Object.keys(headers);\n                    for (i = 0; i < header_keys.length; i++) {\n                        key = header_keys[i];\n                        value = headers[key];\n                        // console.log(\"Adding to header: \" + key + \"=\" + value);\n                        xhr.setRequestHeader(key, value);\n                    }\n                }\n\n                // NOTE: using withCredentials with servers that return \"*\" for access-allowed-origin will fail\n                if (withCredentials === true) {\n                    xhr.withCredentials = true;\n                }\n                xhr.timeout = 30000;\n\n                xhr.onload = function (event) {\n                    // when the url points to a local file, the status is 0 but that is no error\n                    if (xhr.status == 0 || xhr.status >= 200 && xhr.status <= 300) {\n\n                        if (range && xhr.status != 206) {\n                            handleError(\"ERROR: range-byte header was ignored for url: \" + url);\n                        } else {\n\n                            fulfill(xhr.response, xhr);\n                        }\n                    } else {\n\n                        //\n                        if (xhr.status === 416) {\n                            //  Tried to read off the end of the file.   This shouldn't happen, but if it does return an\n                            handleError(\"Unsatisfiable range\");\n                        } else {\n                            // TODO -- better error handling\n                            handleError(\"Error accessing resource: \" + xhr.status);\n                        }\n                    }\n                };\n\n                xhr.onerror = function (event) {\n                    handleError(\"Error accessing resource: \" + url + \" Status: \" + xhr.status);\n                };\n\n                xhr.ontimeout = function (event) {\n                    handleError(\"Timed out\");\n                };\n\n                xhr.onabort = function (event) {\n                    console.log(\"Aborted\");\n                    reject(new igv.AbortLoad());\n                };\n\n                try {\n\n                    xhr.send(sendData);\n                } catch (e) {\n                    reject(e);\n                }\n\n                function handleError(message) {\n                    if (reject) {\n                        reject(message);\n                    } else {\n                        throw Error(message);\n                    }\n                }\n            });\n        }\n    }, {\n        key: \"loadArrayBuffer\",\n        value: function loadArrayBuffer(url, options) {\n\n            if (options === undefined) options = {};\n            options.responseType = \"arraybuffer\";\n            return igvxhr.load(url, options);\n        }\n    }, {\n        key: \"loadJson\",\n        value: function loadJson(url, options) {\n\n            var method = options.method || (options.sendData ? \"POST\" : \"GET\");\n\n            if (method == \"POST\") options.contentType = \"application/json\";\n\n            return new Promise(function (fulfill, reject) {\n\n                igvxhr.load(url, options).then(function (result) {\n                    if (result) {\n                        fulfill(JSON.parse(result));\n                    } else {\n                        fulfill(result);\n                    }\n                }).catch(reject);\n            });\n        }\n\n        /**\r\n         * Load a \"raw\" string.\r\n         */\n\n    }, {\n        key: \"loadString\",\n        value: function loadString(url, options) {\n\n            var compression, fn, idx;\n\n            if (options === undefined) options = {};\n\n            // Strip parameters from url\n            // TODO -- handle local files with ?\n            idx = url.indexOf(\"?\");\n            fn = idx > 0 ? url.substring(0, idx) : url;\n\n            if (options.bgz) {\n                compression = BGZF;\n            } else if (fn.endsWith(\".gz\")) {\n                compression = GZIP;\n            } else {\n                compression = NONE;\n            }\n\n            if (compression === NONE) {\n                options.mimeType = 'text/plain; charset=x-user-defined';\n                return igvxhr.load(url, options);\n            } else {\n                options.responseType = \"arraybuffer\";\n\n                return new Promise(function (fulfill, reject) {\n\n                    igvxhr.load(url, options).then(function (data) {\n                        var result = igvxhr.arrayBufferToString(data, compression);\n                        fulfill(result);\n                    }).catch(reject);\n                });\n            }\n        }\n    }, {\n        key: \"loadStringFromFile\",\n        value: function loadStringFromFile(localfile, options) {\n\n            return new Promise(function (fulfill, reject) {\n\n                var fileReader = new FileReader(),\n                    range = options.range;\n\n                fileReader.onload = function (e) {\n\n                    var compression, result;\n\n                    if (options.bgz) {\n                        compression = BGZF;\n                    } else if (localfile.name.endsWith(\".gz\")) {\n\n                        compression = GZIP;\n                    } else {\n                        compression = NONE;\n                    }\n\n                    result = igvxhr.arrayBufferToString(fileReader.result, compression);\n\n                    fulfill(result, localfile);\n                };\n\n                fileReader.onerror = function (e) {\n                    console.log(\"reject uploading local file \" + localfile.name);\n                    reject(null, fileReader);\n                };\n\n                fileReader.readAsArrayBuffer(localfile);\n            });\n        }\n    }, {\n        key: \"isCrossDomain\",\n        value: function isCrossDomain(url) {\n\n            var origin = window.location.origin;\n\n            return !url.startsWith(origin);\n        }\n    }, {\n        key: \"arrayBufferToString\",\n        value: function arrayBufferToString(arraybuffer, compression) {\n\n            var plain, inflate;\n\n            if (compression === GZIP) {\n                inflate = new _zlib_and_gzip.Zlib.Gunzip(new Uint8Array(arraybuffer));\n                plain = inflate.decompress();\n            } else if (compression === BGZF) {\n                plain = new Uint8Array(unbgzf(arraybuffer));\n            } else {\n                plain = new Uint8Array(arraybuffer);\n            }\n\n            var result = \"\";\n            for (var i = 0, len = plain.length; i < len; i++) {\n                result = result + String.fromCharCode(plain[i]);\n            }\n            return result;\n        }\n    }]);\n\n    return igvxhr;\n}();\n\n//**********js/bam/bgzf.js***************************************\n\n\nvar BLOCK_HEADER_LENGTH = 18;\nvar BLOCK_LENGTH_OFFSET = 16; // Location in the gzip block of the total block size (actually total block size - 1)\nvar BLOCK_FOOTER_LENGTH = 8; // Number of bytes that follow the deflated data\nvar MAX_COMPRESSED_BLOCK_SIZE = 64 * 1024; // We require that a compressed block (including header and footer, be <= this)\nvar GZIP_OVERHEAD = BLOCK_HEADER_LENGTH + BLOCK_FOOTER_LENGTH + 2; // Gzip overhead is the header, the footer, and the block size (encoded as a short).\nvar GZIP_ID1 = 31; // Magic number\nvar GZIP_ID2 = 139; // Magic number\nvar GZIP_FLG = 4; // FEXTRA flag means there are optional fields\n\n\n// Uncompress data,  assumed to be series of bgzipped blocks\n// Code is based heavily on bam.js, part of the Dalliance Genome Explorer,  (c) Thomas Down 2006-2001.\nvar unbgzf = function unbgzf(data, lim) {\n\n    var oBlockList = [],\n        ptr = [0],\n        totalSize = 0;\n\n    lim = lim || data.byteLength - 18;\n\n    while (ptr[0] < lim) {\n\n        var ba = new Uint8Array(data, ptr[0], 18);\n\n        var xlen = ba[11] << 8 | ba[10];\n        var si1 = ba[12];\n        var si2 = ba[13];\n        var slen = ba[15] << 8 | ba[14];\n        var bsize = ba[17] << 8 | ba[16] + 1;\n\n        var start = 12 + xlen + ptr[0]; // Start of CDATA\n        var length = data.byteLength - start;\n\n        if (length < bsize + 8) break;\n\n        var unc = (0, _inflate.jszlib_inflate_buffer)(data, start, length, ptr);\n\n        ptr[0] += 8; // Skipping CRC-32 and size of uncompressed data\n\n        totalSize += unc.byteLength;\n        oBlockList.push(unc);\n    }\n\n    // Concatenate decompressed blocks\n    if (oBlockList.length == 1) {\n        return oBlockList[0];\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = new Uint8Array(oBlockList[i]);\n            (0, _inflate.arrayCopy)(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n};\n\nexports.igvxhr = igvxhr;\nexports.unbgzf = unbgzf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/igvxhr.js\n");

/***/ }),

/***/ "../MLVPanel/src/panel.js":
/*!***************************!*\
  !*** .Panel/src/panel.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MLVPanel = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nhe MIT License (MIT)\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (c) 2014 Broad Institute\r\nr\nermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nr\nhe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\nr\nr\nr\nr\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * THE SOFTWARE.\r\nn\n/**\r\n * Class representing a lightweight panel the can host multiple tracks of\r\n * different types\r\n */\n\n\nvar _tracks = __webpack_require__(/*! ./tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nvar _utils = __webpack_require__(/*! ./utils.js */ \"../MLVPanel/src/utils.js\");\n\nvar _panel_legend = __webpack_require__(/*! ./panel_legend.js */ \"../MLVPanel/src/panel_legend.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MLVPanel = function () {\n    /**\r\n    * Creates a panel\r\n    * @param {array} tracks - a list of config objects describing each track\r\n    * @param {object} config - A config with the panel settings\r\n    */\n    function MLVPanel(tracks, config) {\n        _classCallCheck(this, MLVPanel);\n\n        if (!config) {\n            config = {};\n        }\n        this.fixed_height_mode = false;\n        if (config.fixed_height_mode) {\n            this.fixed_height_mode = true;\n        }\n\n        this.show_scale = true;\n        if (config.show_scale) {\n            this.show_scale = true;\n        }\n\n        var height = config.height ? config.height : 200;\n        var width = config.width ? config.width : 400;\n        var dim = { height: height, width: width };\n        var panel_div = null;\n        if (!config.div) {\n            panel_div = $(\"<div>\").height(height).width(width);\n        } else {\n            if (typeof config.div === 'string') {\n                panel_div = $(\"#\" + config.div);\n            } else {\n                panel_div = $(config.div);\n            }\n            height = panel_div.height();\n            width = panel_div.width();\n        }\n        this.tracks = {};\n        this.track_order = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = tracks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var t_config = _step.value;\n\n                if (this.fixed_height_mode) {\n                    t_config.discrete = true;\n                }\n                var track = _tracks.MLVTrack.getTrack(t_config);\n                this.tracks[track.config.track_id] = track;\n                this.track_order.push(track.config.track_id);\n            }\n            //check for linked scales\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        this._tracksChanged();\n        this.legend = null;\n\n        this.trackDiv = panel_div.addClass(\"igv-track-div\").css(\"position\", \"absolute\");\n\n        this.canvas = $('<canvas class = \"igv-content-canvas\">')[0];\n        this.trackDiv.append(this.canvas);\n        this.canvas.setAttribute('width', width);\n        this.canvas.setAttribute('height', height);\n        this.ctx = this.canvas.getContext(\"2d\");\n\n        if (this.show_scale) {\n            this.addScaleCanvas(height);\n        }\n\n        this.trackDiv.append(_utils.Utils.spinner());\n\n        var icon_div = $(\"<div>\").css({ \"z-index\": 100, position: \"absolute\", top: \"2px\", right: \"2px\" }).appendTo(this.trackDiv).attr(\"class\", \"panel-icon-div\");\n\n        //for event handlers\n        this.is_dragging = false;\n        this.isMouseDown = false, this.lastMouseX = undefined;\n        this.mouseDownX = undefined;\n\n        //amount to show each side of view port\n        this.buffer_level = 1;\n\n        this.groups = {};\n\n        this.highlighted_regions = {};\n\n        //listeners\n        this.listeners = {\n            \"panel_empty\": new Map(),\n            \"panel_closed\": new Map(),\n            \"track_added\": new Map(),\n            \"track_removed\": new Map(),\n            \"view_changed\": new Map(),\n            \"feature_clicked\": new Map(),\n            \"feature_over\": new Map(),\n            \"range_selected\": new Map()\n        };\n\n        if (config.allow_user_drag) {\n            this.allowUserDrag();\n        }\n        if (config.allow_user_zoom) {\n            this.allowUserZoom();\n        }\n        if (config.allow_user_resize) {\n            this.allowUserResize(config.allow_user_resize);\n        }\n        if (config.allow_user_move) {\n            this.allowUserMove(config.allow_user_move);\n        }\n        if (config.allow_user_feature_click) {\n            this.allowUserFeatureClick();\n        }\n        if (config.allow_user_feature_over) {\n            this.allowUserFeatureOver();\n        }\n        if (config.allow_user_close) {\n            this.allowUserClose();\n        }\n        if (config.allow_user_drop) {\n            this.allowUserDrop();\n        }\n        if (config.allow_user_range_selection) {\n            this.allowUserRangeSelection();\n        }\n\n        if (config.ruler_track) {\n            this.addRulerTrack();\n        }\n        if (config.legend) {\n            this.addLegend();\n        }\n        if (config.new_layout) {\n            this.new_layout = true;\n        }\n\n        this.retries = 0;\n        this.yOffset = 0;\n    }\n\n    _createClass(MLVPanel, [{\n        key: \"_parseConfig\",\n        value: function _parseConfig(config) {\n            //check the tracks have the right settings\n            if (this.fixed_height_mode) {\n                config.discrete = true;\n                if (!config.height) {\n                    config.height = 150;\n                }\n            }\n        }\n    }, {\n        key: \"addScaleCanvas\",\n        value: function addScaleCanvas(height) {\n            this.scale_canvas = $('<canvas>').css({ position: \"absolute\", top: \"0px\", left: \"5px\" });\n            this.scale_canvas[0].setAttribute('width', 100);\n            this.scale_canvas[0].setAttribute('height', height);\n            this.scale_canvas.appendTo(this.trackDiv);\n            this.scale_ctx = this.scale_canvas[0].getContext(\"2d\");\n        }\n\n        /**\r\n        * sets the extra amount of track to draw each side of the view. A value \r\n        * of 1 will retreive 1 x the view width each side i.e. 3 x the visible window\r\n        * @param {integer} level - The type of listener - track_empty \r\n        */\n\n    }, {\n        key: \"setBufferLevel\",\n        value: function setBufferLevel(level) {\n            this.buffer_level = level;\n        }\n        /**\r\n        * Returns the element that houses the panel\r\n        * @returns {integer} level - The type of listener - track_empty \r\n        */\n\n    }, {\n        key: \"getDiv\",\n        value: function getDiv() {\n            return this.trackDiv;\n        }\n    }, {\n        key: \"addLegend\",\n        value: function addLegend() {\n            this.legend = new _panel_legend.PanelLegend(this);\n        }\n\n        /**\r\n        * Sets the highligted region\r\n        * @param {Object} location - An object containing chr, start and end\r\n        * @param {name} The name(id) of the region (used to remove the region)\r\n        * @param {String} The color to give the highligted region\r\n        */\n\n    }, {\n        key: \"setHighlightedRegion\",\n        value: function setHighlightedRegion(location, name, color) {\n            this.highlighted_regions[name] = {\n                chr: location.chr,\n                start: location.start,\n                end: location.end,\n                color: color\n            };\n            this.force_redraw = true;\n        }\n\n        /**\r\n        * Removes the highlighted region from the panel\r\n        * @param {string} name - The name of the highlighted region\r\n        * that was given when it was created.\r\n        */\n\n    }, {\n        key: \"removeHighlightedRegion\",\n        value: function removeHighlightedRegion(name) {\n            delete this.highlighted_regions[name];\n            this.force_redraw = true;\n        }\n    }, {\n        key: \"addRulerTrack\",\n        value: function addRulerTrack() {\n            var track = new _tracks.RulerTrack();\n            var config = track.getConfig();\n            this.tracks[config.track_id] = track;\n            this.track_order.unshift(config.track_id);\n            return this;\n        }\n\n        /**\r\n        * Adds a listener to the panel\r\n        * @param {string} type - The type of listener - track_empty\r\n        * @param {function} func - The function to call \r\n        * @param {string} id - The id of the handler (can be used to remove the handler)\r\n        * Optional - an id will be assigned (and returned) if not supplied\r\n        * @returns{string} The id of the handler or null if the type did not exist \r\n        */\n\n    }, {\n        key: \"addListener\",\n        value: function addListener(type, func, id) {\n            var listener = this.listeners[type];\n            if (!listener) {\n                return null;\n            }\n            if (!id) {\n                id = type + \"_\" + listener.size;\n            }\n            listener.set(id, func);\n            return id;\n        }\n\n        /**\r\n        * Removes a listener to the panel\r\n        * @param {string} type - The type of listener - track_empty \r\n        * @param {string} id - The id of the handler to remove\r\n        * @returns{boolean} true if the listener was removed, otherwise false \r\n        */\n\n    }, {\n        key: \"removeListener\",\n        value: function removeListener(type, id) {\n            var listener = this.listeners[type];\n            if (!listener) {\n                return false;\n            }\n            return listener.delete(id);\n        }\n\n        /**\r\n        * Removes a listener to the panel\r\n        * @param {object} config - The config of the track to addTrack\r\n        * @param {integer} index - Optional, the vertical order of the track\r\n        */\n\n    }, {\n        key: \"addTrack\",\n        value: function addTrack(config, index, no_propagate) {\n            var track = _tracks.MLVTrack.getTrack(config);\n            if (this.fixed_height_mode) {\n                track.config.discrete = true;\n            }\n            this.tracks[track.config.track_id] = track;\n            if (index || index == 0) {\n                this.track_order.splice(index, 0, track.config.track_id);\n            } else {\n                this.track_order.push(track.config.track_id);\n            }\n\n            this._tracksChanged();\n            if (this.legend) {\n                this.legend.addTrack(track.config, index);\n            }\n            if (!no_propagate) {\n                this._callListeners(\"track_added\", track.config);\n            }\n        }\n    }, {\n        key: \"_callListeners\",\n        value: function _callListeners(type, config) {\n\n            this.listeners[type].forEach(function (v) {\n                v(config);\n            });\n        }\n    }, {\n        key: \"removeAllTracks\",\n        value: function removeAllTracks() {\n            var dup_array = this.track_order.slice();\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = dup_array[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var id = _step2.value;\n\n                    this.removeTrack(id, true);\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n\n        /**\r\n        * Removes a listener to the panel\r\n        * @param {object} config - The config of the track to add \r\n        */\n\n    }, {\n        key: \"removeTrack\",\n        value: function removeTrack(track_id, not_repaint, not_propagate) {\n            if (!this.tracks[track_id]) {\n                return null;\n            }\n            this.track_order = this.track_order.filter(function (e) {\n                return e !== track_id;\n            });\n            if (!not_repaint) {\n                this.repaint(true, true);\n            }\n\n            if (this.legend) {\n                this.legend.removeTrack(track_id);\n            }\n            var config = this.tracks[track_id].config;\n            delete this.tracks[track_id];\n            if (!not_propagate) {\n                this._callListeners(\"track_removed\", config);\n            }\n            if (this.track_order.length === 0) {\n                for (var l_id in this.listeners[\"panel_empty\"]) {\n                    this.listeners[\"panel_empty\"][l_id](this);\n                }\n            }\n            return config;\n        }\n    }, {\n        key: \"getTrackConfig\",\n        value: function getTrackConfig(track_id) {\n            var track = this.tracks[track_id];\n            return track.getConfig();\n        }\n    }, {\n        key: \"getAllTrackConfigs\",\n        value: function getAllTrackConfigs() {\n            var configs = [];\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this.track_order[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var id = _step3.value;\n\n                    configs.push(this.tracks[id].getConfig());\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            return configs;\n        }\n    }, {\n        key: \"setTrackAttribute\",\n        value: function setTrackAttribute(track_id, key, value) {\n            var track = this.tracks[track_id];\n            if (!track) {\n                return;\n            }\n            track.setConfigAttribute(key, value);\n            if (key === \"scale_link_to\") {\n                this.tracks[track_id].scale_link_to = this.tracks[value];\n            }\n            if ((key === \"color\" || key === \"display\") && this.legend) {\n                this.legend.updateTrack(track_id);\n            }\n        }\n    }, {\n        key: \"setTrackAttributes\",\n        value: function setTrackAttributes(track_id, attributes) {\n            var track = this.tracks[track_id];\n            for (var key in attributes) {\n                track.setConfigAttribute(key, attributes[key]);\n                if (key === \"color\" && this.legend) {\n                    this.legend.updateTrack(track_id);\n                }\n            }\n        }\n\n        /**\r\n        * Sets the filter  function for track. \r\n        * @param {string} track_id- The id of the track\r\n        * @param {string} func - The filter function. It should accept the feature\r\n        * and return true to dispaly the feature and false to hide it. Use null \r\n        * to cancel the filter\r\n        */\n\n    }, {\n        key: \"setTrackFeatureFilter\",\n        value: function setTrackFeatureFilter(track_id, func) {\n            var track = this.tracks[track_id];\n            track.setFilterFunction(func);\n        }\n\n        /**\r\n        * Sets the filter  function for track \r\n        * @param {string} track_id- The id of the track\r\n        * @param {string} func - The color function. It should accept the feature\r\n        * and return the feature color. Use null to go back to default colors \r\n        */\n\n    }, {\n        key: \"setTrackColorFunction\",\n        value: function setTrackColorFunction(track_id, func) {\n            var track = this.tracks[track_id];\n            track.setColorFunction(func);\n        }\n    }, {\n        key: \"setTrackLabelFunction\",\n        value: function setTrackLabelFunction(track_id, func) {\n            var track = this.tracks[track_id];\n            if (track) {\n                track.label_function = func;\n            }\n        }\n    }, {\n        key: \"_tracksChanged\",\n        value: function _tracksChanged() {\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this.track_order[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var t_id = _step4.value;\n\n                    var track = this.tracks[t_id];\n                    //if this track is linked to the scale of another\n                    //get pointer to the track\n                    var link_to = track.config['scale_link_to'];\n                    if (link_to) {\n                        var other_track = this.tracks[link_to];\n                        if (other_track) {\n                            track.scale_link_to = other_track;\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getCurrentTrackFeatures\",\n        value: function getCurrentTrackFeatures(track_id) {\n            var track = this.tracks[track_id];\n            return track.getCurrentFeatures(this.chr, this.start, this.end);\n        }\n\n        /**\r\n         * Updated the panel view, if chromosome start and end are supplied\r\n         * it will go to this location. If no parameters are given the panel\r\n         * will be redrawn at the same location e.g after the color, scale or another\r\n         * paramter has been set\r\n         * @param {string} force - If true then a cached image will not be used\r\n         * @param {integer} start of the region to draw\r\n         * @param {integer} end of the region to draw\r\n         */\n\n    }, {\n        key: \"update\",\n        value: function update(chr, start, end, no_propagation) {\n            this.call_update_listener = no_propagation;\n            if (chr) {\n                this.chr = chr;\n                this.start = start;\n                this.end = end;\n                this.repaint();\n            } else {\n                this.repaint(true, true);\n            }\n        }\n    }, {\n        key: \"getTracksHeight\",\n        value: function getTracksHeight() {\n            var h = 0;\n            var groups = {};\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = this.track_order[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var tid = _step5.value;\n\n                    var track = this.tracks[tid];\n                    var g = track.config.group;\n                    if (g) {\n                        if (!groups[g]) {\n                            h += track.config.height;\n                            groups[g] = true;\n                        }\n                    } else {\n                        h += track.config.height;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            return h;\n        }\n    }, {\n        key: \"getAllFeatures\",\n        value: function getAllFeatures(bpStart, bpEnd, force, data) {\n            var promises = [];\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n                for (var _iterator6 = this.track_order[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var track_id = _step6.value;\n\n                    var track = this.tracks[track_id];\n                    promises.push(track.getFeatures(this.chr, bpStart, bpEnd, force, data));\n                }\n            } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                        _iterator6.return();\n                    }\n                } finally {\n                    if (_didIteratorError6) {\n                        throw _iteratorError6;\n                    }\n                }\n            }\n\n            return Promise.all(promises);\n        }\n\n        /**\r\n         * Repaint the view, using a cached image if available.\r\n         * @param {boolean} force - If true then a cached image will not be used\r\n         * @param {boolean} range_from_tile Redraw the tile\r\n         */\n\n    }, {\n        key: \"repaint\",\n        value: function repaint(force, range_from_tile) {\n\n            var pixelWidth,\n                bpWidth,\n                bpStart,\n                bpEnd,\n                self = this,\n                ctx,\n                referenceFrame,\n                chr,\n                refFrameStart,\n                refFrameEnd,\n                success;\n\n            chr = this.chr;\n            refFrameStart = this.start;\n            refFrameEnd = this.end;\n            this.bpPerPixel = (this.end - this.start) / this.canvas.width;\n            var get_features = true;\n            if (this.tile && this.tile.containsRange(chr, refFrameStart, refFrameEnd, this.bpPerPixel)) {\n                get_features = false;\n            }\n            if (!get_features && !force && !this.force_redraw) {\n                this.force_redraw = false;\n                this.paintImage();\n                if (!self.call_update_listener) {\n                    self.listeners.view_changed.forEach(function (func) {\n                        func(self.chr, parseInt(self.start), parseInt(self.end));\n                    });\n                }\n                self.call_update_listener = false;\n\n                self.retries = 0;\n            } else {\n                // Expand the requested range so we can pan a bit without reloading\n                this.force_redraw = false;\n                pixelWidth = (this.buffer_level * 2 + 1) * this.canvas.width;\n                bpWidth = Math.round(pixelWidth * this.bpPerPixel);\n                bpStart = Math.max(0, Math.round(this.start - this.buffer_level * this.canvas.width * this.bpPerPixel));\n                bpEnd = bpStart + bpWidth;\n                if (self.loading) {\n                    if (force && range_from_tile) {\n                        self.update_required = true;\n                    } else {\n                        self.update_required = \"location\";\n                    }\n                    return;\n                }\n                if (range_from_tile) {\n                    if (this.tile) {\n                        bpStart = this.tile.startBP;\n                        bpEnd = this.tile.endBP;\n                    }\n                }\n\n                self.loading = { start: bpStart, end: bpEnd };\n                self.trackDiv.find(\".mlv-alert\").remove();\n\n                _utils.Utils.startSpinnerAtParentElement(self.trackDiv);\n\n                self.getAllFeatures(bpStart, bpEnd, !get_features, { pixelWidth: pixelWidth, bpPerPixel: self.bpPerPixel }).then(function (all_features) {\n\n                    if (all_features) {\n\n                        var buffer = document.createElement('canvas');\n                        buffer.width = pixelWidth;\n                        buffer.height = self.fixed_height_mode ? self.getTracksHeight() : self.canvas.height;\n                        ctx = buffer.getContext('2d');\n                        if (self.show_scale) {\n                            self.scale_buffer = document.createElement('canvas');\n                            self.scale_buffer.width = 200;\n                            self.scale_buffer.height = buffer.height;\n                            self.scale_buffer_ctx = self.scale_buffer.getContext(\"2d\");\n                        }\n\n                        var options = {\n                            context: ctx,\n                            bpStart: bpStart,\n                            bpPerPixel: self.bpPerPixel,\n                            pixelWidth: buffer.width,\n                            pixelHeight: buffer.height,\n                            chr: chr\n                        };\n                        var top = 0;\n                        self.groups = {};\n                        self.calculateMaxScale(all_features);\n                        for (var i in all_features) {\n                            var track = self.tracks[self.track_order[i]];\n                            options.features = all_features[i];\n                            var group = track.config.group;\n                            if (group) {\n                                if (!self.groups[group]) {\n                                    self.groups[group] = { top: top, height: track.config.height\n                                        //first time increase top\n                                    };top += track.config.height;\n                                }\n                                options.top = self.groups[group].top;\n                                options.height = self.groups[group].height;\n                            } else {\n                                options.top = top;\n                            }\n\n                            var disc = self.fixed_height_mode || track.config.discrete || group;\n                            if (disc) {\n                                var h = group ? options.height : track.config.height;\n                                ctx.save();\n                                ctx.rect(0, options.top, options.pixelWidth, h);\n                                ctx.clip();\n                                ctx.beginPath();\n                            }\n                            var offset = track.drawFeatures(options);\n\n                            if (disc) {\n                                ctx.restore();\n                                if (!group) {\n                                    top += track.config.height;\n                                    track.bottom = top;\n                                }\n                            } else if (offset) {\n                                top = offset;\n                            }\n\n                            if (self.show_scale) {\n\n                                track.drawScale(options.pixelHeight, self.scale_buffer_ctx);\n                            }\n                        }\n                        for (var name in self.highlighted_regions) {\n                            var region = self.highlighted_regions[name];\n                            if (self.chr !== region.chr) {\n                                continue;\n                            }\n                            if (region.end < bpStart || region.start > bpEnd) {\n                                continue;\n                            }\n                            self.drawHighlightedRegion(region, options);\n                        }\n                        self.retries = 0;\n                        self.loading = false;\n                        self.tile = new Tile(chr, bpStart, bpEnd, self.bpPerPixel, buffer);\n                        self.paintImage();\n                        if (!self.call_update_listener) {\n                            self.listeners.view_changed.forEach(function (func) {\n                                func(self.chr, parseInt(self.start), parseInt(self.end));\n                            });\n                        }\n                        self.call_update_listener = false;\n                    } else {\n                        self.ctx.clearRect(0, 0, self.canvas.width, self.canvas.height);\n                    }\n                    if (self.update_required) {\n                        if (self.update_required === \"location\") {\n                            self.update(self.chr, self.start, self.end);\n                            self.update_required = false;\n                        } else {\n                            self.update_required = false;\n                            self.update();\n                        }\n                    }\n                    _utils.Utils.stopSpinnerAtParentElement(self.trackDiv);\n                }).catch(function (error) {\n                    self.loading = false;\n\n                    console.log(error);\n                    if (self.retries < 3 && error !== \"Timed out\") {\n                        self.retries++;\n                        self.repaint(force, range_from_tile);\n                    } else {\n                        _utils.Utils.stopSpinnerAtParentElement(self.trackDiv);\n                        self.loading = false;\n                        self.force_redraw = true;\n                        _utils.Utils.presentAlert(self.trackDiv, error);\n                    }\n                });\n            }\n\n            function viewIsReady() {\n                return this.track;\n            }\n        }\n    }, {\n        key: \"autoScale\",\n        value: function autoScale(features, min, max) {\n            if (!features) {\n                return { min: 0, max: 1 };\n            }\n            features.forEach(function (f) {\n                min = Math.min(min, f.value);\n                max = Math.max(max, f.value);\n            });\n            return { min: min, max: max };\n        }\n    }, {\n        key: \"calculateMaxScale\",\n        value: function calculateMaxScale(all_features) {\n            var groups = {};\n            for (var i in all_features) {\n                var track = this.tracks[this.track_order[i]];\n                track.set_scale = null;\n                var group = track.config.group;\n                if (group && track.config.scale !== \"fixed\" && !track.config.scale_link_to) {\n                    track.config.scale_group = group;\n                }\n                group = track.config.scale_group;\n                if (group) {\n                    var group_info = groups[group];\n                    if (!group_info) {\n                        group_info = { tracks: [track], features: [all_features[i]] };\n                        groups[group] = group_info;\n                    } else {\n                        group_info.features.push(all_features[i]);\n                        group_info.tracks.push(track);\n                    }\n                }\n            }\n            for (var name in groups) {\n                var g = groups[name];\n                if (!g.ignore) {\n                    var min = 0;\n                    var max = -Number.MAX_VALUE;\n                    var scale = null;\n                    var _iteratorNormalCompletion7 = true;\n                    var _didIteratorError7 = false;\n                    var _iteratorError7 = undefined;\n\n                    try {\n                        for (var _iterator7 = g.features[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                            var f = _step7.value;\n\n                            scale = this.autoScale(f, min, max);\n                            min = scale.min;\n                            max = scale.max;\n                        }\n                    } catch (err) {\n                        _didIteratorError7 = true;\n                        _iteratorError7 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                                _iterator7.return();\n                            }\n                        } finally {\n                            if (_didIteratorError7) {\n                                throw _iteratorError7;\n                            }\n                        }\n                    }\n\n                    var _iteratorNormalCompletion8 = true;\n                    var _didIteratorError8 = false;\n                    var _iteratorError8 = undefined;\n\n                    try {\n                        for (var _iterator8 = g.tracks[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                            var t = _step8.value;\n\n                            t.set_scale = scale;\n                        }\n                    } catch (err) {\n                        _didIteratorError8 = true;\n                        _iteratorError8 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                                _iterator8.return();\n                            }\n                        } finally {\n                            if (_didIteratorError8) {\n                                throw _iteratorError8;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"drawHighlightedRegion\",\n        value: function drawHighlightedRegion(region, options) {\n            var start = (region.start - options.bpStart) / options.bpPerPixel;\n            start = start < 0 ? 0 : start;\n\n            var width = (region.end - region.start) / options.bpPerPixel;\n            width = width < 3 ? 3 : width;\n            width = width > options.pixelWidth ? options.pixelWidth : width;\n            options.context.globalAlpha = 0.1;\n            options.context.fillStyle = region.color;\n            options.context.fillRect(start, 0, width, options.pixelHeight);\n            options.context.globalAlpha = 1.0;\n        }\n    }, {\n        key: \"paintImage\",\n        value: function paintImage() {\n\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            if (this.show_scale) {\n                this.scale_ctx.clearRect(0, 0, 100, this.canvas.height);\n                this.scale_ctx.drawImage(this.scale_buffer, 0, this.yOffset);\n            }\n\n            if (this.tile) {\n                this.xOffset = Math.round((this.tile.startBP - this.start) / this.bpPerPixel);\n                this.ctx.drawImage(this.tile.image, this.xOffset, this.yOffset);\n                this.ctx.save();\n                this.ctx.restore();\n            }\n        }\n    }, {\n        key: \"allowUserFeatureOver\",\n        value: function allowUserFeatureOver() {\n            var self = this;\n\n            this.trackDiv.on(\"mousemove.feature_over\", function (e) {\n                if (self.loading) {\n                    return;\n                }\n                clearTimeout(self.moto);\n                self.moto = setTimeout(function () {\n                    if (!self.is_dragging) {\n                        var info = self.getFeatureAt(e);\n                        var i = self.mouse_over_feature;\n                        if (info.feature) {\n                            if (i && i.feature !== info.feature) {\n                                self.listeners.feature_over.forEach(function (func) {\n                                    func(i.track, i.feature, e, \"out\");\n                                });\n                            }\n\n                            if (!i || i.feature !== info.feature) {\n                                self.listeners.feature_over.forEach(function (func) {\n                                    func(info.track, info.feature, e, \"over\");\n                                });\n                                self.mouse_over_feature = info;\n                            }\n                        } else {\n                            var _i = self.mouse_over_feature;\n                            if (_i) {\n                                self.listeners.feature_over.forEach(function (func) {\n                                    func(_i.track, _i.feature, e, \"out\");\n                                });\n                                self.mouse_over_feature = null;\n                            }\n                        }\n                    }\n                }, 10);\n            });\n        }\n    }, {\n        key: \"removeFeatureOverHandler\",\n        value: function removeFeatureOverHandler() {\n            this.trackDiv.off(\"mousedown.feature_over\");\n        }\n    }, {\n        key: \"allowUserFeatureClick\",\n        value: function allowUserFeatureClick() {\n            var self = this;\n\n            this.allowUserFeatureOver();\n            this.addListener(\"feature_over\", function (track, feature, over, type) {\n                if (!feature) {\n                    self.trackDiv.css(\"cursor\", \"default\");\n                }\n                var pointer = type === \"over\" ? \"pointer\" : \"default\";\n                self.trackDiv.css(\"cursor\", pointer);\n            });\n\n            this.trackDiv.on(\"mousedown.feature_click\", function (e) {\n                if (self.loading) {\n                    return;\n                }\n                clearTimeout(self.to);\n                self.to = setTimeout(function () {\n                    if (!self.is_dragging) {\n                        var info = self.getFeatureAt(e);\n                        if (info.track) {\n                            self.listeners.feature_clicked.forEach(function (func) {\n                                func(info.track, info.feature, e);\n                            });\n                        }\n                    }\n                }, 200);\n            });\n        }\n    }, {\n        key: \"removeFeatureOverHandler\",\n        value: function removeFeatureOverHandler() {\n            this.trackDiv.off(\"mousedown.feature_click\");\n        }\n    }, {\n        key: \"allowUserDrag\",\n        value: function allowUserDrag() {\n            var self = this;\n            this.trackDiv.on(\"mousedown.draghandler\", function (e) {\n                if (e.shiftKey) {\n                    return;\n                }\n                var canvasCoords = _utils.Utils.translateMouseCoordinates(e, self.canvas);\n                self.isMouseDown = true;\n                self.start_dragging = true;\n                self.lastMouseX = canvasCoords.x;\n                self.lastMouseY = canvasCoords.y;\n                self.mouseDownX = self.lastMouseX;\n            }).on(\"mousemove.draghandler\", function (e) {\n                var canvasCoords = _utils.Utils.translateMouseCoordinates(e, self.canvas);\n                if (self.is_dragging || self.start_dragging) {\n                    var diff = canvasCoords.x - self.lastMouseX;\n                    var bp_diff = self.bpPerPixel * diff;\n                    self.start -= bp_diff;\n                    self.end -= bp_diff;\n                    var dd = self.canvas.height - self.tile.image.height;\n                    var y_diff = 0;\n                    if (dd < 0 || self.yOffset !== 0) {\n                        var _y_diff = canvasCoords.y - self.lastMouseY;\n                        self.yOffset += _y_diff;\n                        if (self.yOffset > 0) {\n                            self.yOffset = 0;\n                        } else if (self.yOffset < dd) {\n                            self.yOffset = dd;\n                        }\n                    }\n                    self.repaint();\n                    self.lastMouseX = canvasCoords.x;\n                    self.lastMouseY = canvasCoords.y;\n                    if (self.start_dragging && (diff > 5 || y_diff > 5)) {\n                        self.is_dragging = true;\n                        self.start_dragging = false;\n                    }\n                }\n            }).on(\"mouseup.draghandler\", function (e) {\n                self.is_dragging = false;\n                self.start_dragging = false;\n            });\n            return this;\n        }\n    }, {\n        key: \"removeDragHandler\",\n        value: function removeDragHandler() {\n            this.trackDiv.off(\"mousedown.draghandler mousemove.draghandler mouseup.draghandler\");\n        }\n    }, {\n        key: \"_getCoords\",\n        value: function _getCoords(e) {\n            var x = e.pageX - $(this.canvas).offset().left;\n            var y = e.pageY - $(this.canvas).offset().top;\n            return { x: x, y: y };\n        }\n    }, {\n        key: \"allowUserZoom\",\n        value: function allowUserZoom() {\n            var self = this;\n            this.trackDiv.on('mousewheel.zoom  mouse.zoom DOMMouseScroll', function (event) {\n                var deltaY = event.originalEvent.deltaY;\n                if (deltaY === undefined) {\n                    deltaY = event.originalEvent.detail;\n                }\n                if (self.loading || self.bpPerPixel < 0.05 && deltaY > 0) {\n                    return;\n                }\n\n                var canvasCoords = self._getCoords(event.originalEvent);\n                var factor = deltaY < 0 ? 2 : 0.5;\n                var mbp = self.start + canvasCoords.x * self.bpPerPixel;\n                var new_length = (self.end - self.start) * factor;\n                var new_start = mbp - canvasCoords.x / self.canvas.width * new_length;\n                self.start = new_start;\n                self.end = new_start + new_length;\n\n                self.repaint();\n            });\n            return this;\n        }\n    }, {\n        key: \"disableUserZoom\",\n        value: function disableUserZoom() {\n            this.trackDiv.off(\"mousewheel.zoom\");\n        }\n    }, {\n        key: \"allowUserRangeSelection\",\n        value: function allowUserRangeSelection() {\n            var self = this;\n            this.trackDiv.on(\"mousedown.selection\", function (e) {\n                if (e.shiftKey) {\n                    self.start_select = _utils.Utils.translateMouseCoordinates(e, this).x;\n                    var left = self.start_select + \"px\";\n                    var td = $(this);\n                    self.select_div = $(\"<div>\").css({ \"position\": \"absolute\", \"opacity\": 0.2, \"background-color\": \"blue\", \"top\": \"0px\", \"height\": td.css(\"height\"), left: left, \"width\": \"0px\" }).appendTo(td);\n\n                    e.stopPropagation();\n                }\n            }).on(\"mousemove.selection\", function (e) {\n                if (e.shiftKey && self.start_select) {\n                    var x = _utils.Utils.translateMouseCoordinates(e, this).x;\n                    if (x < self.start_select) {\n                        self.select_div.css({ \"left\": x + \"px\", \"width\": self.start_select - x + \"px\" });\n                    } else {\n\n                        self.select_div.css({ \"left\": self.start_select + \"px\", \"width\": x - self.start_select + \"px\" });\n                    }\n\n                    e.stopPropagation();\n                }\n            }).on(\"mouseup.selection\", function (e) {\n                if (self.start_select) {\n                    var x = _utils.Utils.translateMouseCoordinates(e, this).x;\n                    var start = self.start + self.start_select * self.bpPerPixel;\n                    var end = self.start + x * self.bpPerPixel;\n                    self.start_select = null;\n                    self.select_div.remove();\n                    if (start > end) {\n                        var temp = end;\n                        end = start;\n                        start = temp;\n                    }\n                    self.listeners.range_selected.forEach(function (func) {\n                        func(self.chr, start, end);\n                    });\n                }\n            });\n        }\n    }, {\n        key: \"removeAllowSelection\",\n        value: function removeAllowSelection() {\n            this.trackDiv.off(\"mousedown.selection mousemove.selection mouseup.selection\");\n        }\n    }, {\n        key: \"getImage\",\n        value: function getImage() {\n            var imgURL = this.canvas[0].toDataURL(MIME_TYPE);\n        }\n    }, {\n        key: \"allowUserDrop\",\n        value: function allowUserDrop() {\n            var div = this.trackDiv;\n            var self = this;\n            div.droppable({\n                over: function over(e, ui) {\n                    var track = ui.draggable.data(\"track\");\n                    var panel = ui.draggable.data(\"panel\");\n                    if (panel === self) {\n                        return;\n                    }\n                    if (track) {\n                        var icon = \"<span class='ui-icon ui-icon-check'></span>\";\n                        if (track.no_drop || self.tracks[track.track_id]) {\n                            icon = \"<span class='ui-icon  ui-icon-closethick'></span>\";\n                        }\n                        setTimeout(function () {\n                            ui.helper.prepend(icon).css(\"white-space\", \"nowrap\");\n                        }, 20);\n                    }\n                },\n                greedy: true,\n                out: function out(e, ui) {\n                    ui.helper.find(\".ui-icon\").remove();\n                },\n                drop: function drop(e, ui) {\n                    var track = $(ui.draggable[0]).data(\"track\");\n                    ui.helper.find(\".ui-icon\").remove();\n\n                    if (!track) {\n                        return;\n                    }\n                    var panel = $(ui.draggable[0]).data(\"panel\");\n\n                    if (panel === self || track.no_drop || self.tracks[track.track_id]) {\n                        return;\n                    } else {\n                        if (panel) {\n                            panel.removeTrack(track.track_id);\n                            panel.update();\n                        }\n                        self.addTrack(track);\n                        self.update();\n                    }\n                }\n            });\n            return this;\n        }\n\n        /**\r\n        * Gets the feature that was clicked\r\n        * @param {JQuery Event} e - Can be any object- all that is required is pageX and PageY\r\n        * @returns {object} An object with track - the track config at the event position(or null) and\r\n        * feature - the feature at the postition (or null). \r\n        */\n\n    }, {\n        key: \"getFeatureAt\",\n        value: function getFeatureAt(e) {\n            var co = _utils.Utils.translateMouseCoordinates(e, this.canvas);\n            co.y -= this.yOffset;\n            var gl = Math.round(this.start + co.x * this.bpPerPixel);\n            for (var t in this.tracks) {\n                var track = this.tracks[t];\n                if (co.y > track.top && co.y < track.bottom) {\n                    return { track: track,\n                        feature: track.getFeatureAt(gl, this.chr, co, this.bpPerPixel, this.ctx, this.yOffset)\n                    };\n                }\n            }\n            return { track: null, feature: null };\n        }\n    }, {\n        key: \"allowUserResize\",\n        value: function allowUserResize(direction) {\n            var handles = \"all\";\n            if (direction === \"vertical\") {\n                handles = \"n,s\";\n            } else if (direction === \"horizontal\") {\n                handles = \"e,w\";\n            }\n            var div = this.trackDiv;\n            var self = this;\n\n            div.resizable({\n\n                resize: function resize(e, ui) {\n                    e.stopPropagation();\n                    if (self.loading) {\n                        return false;\n                    }\n\n                    clearTimeout(self.to);\n                    self.to = setTimeout(function (e) {\n                        self.setWidth(ui.size.width);\n                        self.setHeight(ui.size.height);\n                        self.update();\n                    }, 100);\n                },\n                handles: handles\n\n            });\n            return this;\n        }\n\n        /**\r\n        * Allows the user to move the panel via a handle in the\r\n        * top right hand corner\r\n        * @param {string} direction - either vertical or horzontal, will restrict movement \r\n        * in this plane\r\n        * @param {boolean} if true then the panel will be constrained within its parent \r\n        */\n\n    }, {\n        key: \"allowUserMove\",\n        value: function allowUserMove(direction, contain) {\n            var axis = false;\n            var icon = \"fa-arrows-alt\";\n            if (direction == \"vertical\") {\n                axis = \"y\";\n                icon += \"-v\";\n            } else if (direction == \"horizontal\") {\n                axis = \"x\";\n                icon += \"-h\";\n            }\n            var div = this.trackDiv;\n            div.find(\".panel-icon-div\").prepend($(\"<span class='track-handle fas \" + icon + \"'></span>\").css({ \"cursor\": \"move\" }));\n            var self = this;\n            var c = false;\n            if (contain) {\n                c = \"parent\";\n            }\n            div.draggable({ handle: \".track-handle\", axis: axis, containment: c });\n            return this;\n        }\n    }, {\n        key: \"allowUserClose\",\n        value: function allowUserClose() {\n            var div = this.trackDiv;\n            var self = this;\n            var icon = $(\"<span class='fas fa-trash'></span>\").click(function () {\n                self.listeners.panel_closed.forEach(function (func) {\n                    func(self);\n                });\n                div.remove();\n            });\n            div.find(\".panel-icon-div\").append(icon);\n        }\n    }, {\n        key: \"setWidth\",\n        value: function setWidth(width) {\n            this.trackDiv.width(width);\n            this.canvas.setAttribute('width', width);\n        }\n    }, {\n        key: \"setHeight\",\n        value: function setHeight(height) {\n            $(this.trackDiv).height(height);\n            this.canvas.setAttribute('height', height);\n            if (this.show_scale) {\n                this.scale_canvas[0].setAttribute(\"height\", height);\n            }\n        }\n    }, {\n        key: \"redrawTile\",\n        value: function redrawTile(features) {\n\n            if (!this.tile) return;\n\n            var self = this,\n                chr = self.tile.chr,\n                bpStart = self.tile.startBP,\n                bpEnd = self.tile.endBP,\n                buffer = document.createElement('canvas'),\n                bpPerPixel = self.tile.scale;\n\n            buffer.width = self.tile.image.width;\n            buffer.height = self.tile.image.height;\n            var ctx = buffer.getContext('2d');\n\n            self.track.draw({\n                features: features,\n                context: ctx,\n                bpStart: bpStart,\n                bpPerPixel: bpPerPixel,\n                pixelWidth: buffer.width,\n                pixelHeight: buffer.height\n            });\n\n            self.tile = new Tile(chr, bpStart, bpEnd, bpPerPixel, buffer);\n            self.paintImage();\n        }\n    }]);\n\n    return MLVPanel;\n}();\n\nvar Tile = function () {\n    function Tile(chr, tileStart, tileEnd, scale, image) {\n        _classCallCheck(this, Tile);\n\n        this.chr = chr;\n        this.startBP = tileStart;\n        this.endBP = tileEnd;\n        this.scale = scale;\n        this.image = image;\n    }\n\n    _createClass(Tile, [{\n        key: \"containsRange\",\n        value: function containsRange(chr, start, end, scale) {\n            if (start < 0) {\n                start = 0;\n            }\n            return this.scale.toFixed(3) === scale.toFixed(3) && start >= this.startBP && end <= this.endBP && chr === this.chr;\n        }\n    }, {\n        key: \"overlapsRange\",\n        value: function overlapsRange(chr, start, end) {\n            return this.chr === chr && this.endBP >= start && this.startBP <= end;\n        }\n    }]);\n\n    return Tile;\n}();\n\nexports.MLVPanel = MLVPanel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vTUxWUGFuZWwvc3JjL3BhbmVsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL01MVlBhbmVsL3NyYy9wYW5lbC5qcz9hNGY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgQnJvYWQgSW5zdGl0dXRlXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiAqIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcblxyXG4vKipcclxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgbGlnaHR3ZWlnaHQgcGFuZWwgdGhlIGNhbiBob3N0IG11bHRpcGxlIHRyYWNrcyBvZlxyXG4gKiBkaWZmZXJlbnQgdHlwZXNcclxuICovXHJcbmltcG9ydCB7TUxWVHJhY2ssUnVsZXJUcmFja30gZnJvbSBcIi4vdHJhY2tzLmpzXCI7XHJcbmltcG9ydCB7VXRpbHN9IGZyb20gXCIuL3V0aWxzLmpzXCI7XHJcbmltcG9ydCB7UGFuZWxMZWdlbmR9IGZyb20gXCIuL3BhbmVsX2xlZ2VuZC5qc1wiO1xyXG5cclxuXHJcblxyXG5jbGFzcyBNTFZQYW5lbCB7XHJcblx0LyoqXHJcblx0KiBDcmVhdGVzIGEgcGFuZWxcclxuXHQqIEBwYXJhbSB7YXJyYXl9IHRyYWNrcyAtIGEgbGlzdCBvZiBjb25maWcgb2JqZWN0cyBkZXNjcmliaW5nIGVhY2ggdHJhY2tcclxuXHQqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBBIGNvbmZpZyB3aXRoIHRoZSBwYW5lbCBzZXR0aW5nc1xyXG5cdCovXHJcblx0Y29uc3RydWN0b3IgKHRyYWNrcyxjb25maWcpIHtcclxuXHRcdGlmICghY29uZmlnKXtcclxuXHRcdFx0Y29uZmlnPXt9O1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5maXhlZF9oZWlnaHRfbW9kZT1mYWxzZTtcclxuXHRcdGlmIChjb25maWcuZml4ZWRfaGVpZ2h0X21vZGUpe1xyXG5cdFx0XHR0aGlzLmZpeGVkX2hlaWdodF9tb2RlPXRydWU7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHRoaXMuc2hvd19zY2FsZT10cnVlO1xyXG5cdFx0aWYgKGNvbmZpZy5zaG93X3NjYWxlKXtcclxuICAgICAgIFx0XHR0aGlzLnNob3dfc2NhbGU9dHJ1ZTtcclxuICAgICAgIFx0fVxyXG5cclxuXHRcdGxldCBoZWlnaHQ9Y29uZmlnLmhlaWdodD9jb25maWcuaGVpZ2h0OjIwMDtcclxuXHRcdGxldCB3aWR0aD0gY29uZmlnLndpZHRoP2NvbmZpZy53aWR0aDo0MDA7XHJcblx0XHRsZXQgZGltPXtoZWlnaHQ6aGVpZ2h0LHdpZHRoOndpZHRofTtcclxuXHRcdGxldCBwYW5lbF9kaXY9bnVsbDtcclxuXHRcdGlmICghY29uZmlnLmRpdil7XHJcblx0XHRcdHBhbmVsX2Rpdj0kKFwiPGRpdj5cIikuaGVpZ2h0KGhlaWdodCkud2lkdGgod2lkdGgpO1xyXG5cclxuXHRcdH1cclxuXHRcdGVsc2V7XHJcblx0XHRcdGlmICh0eXBlb2YgY29uZmlnLmRpdiA9PT0gJ3N0cmluZycgKXtcclxuXHRcdFx0XHRwYW5lbF9kaXY9JChcIiNcIitjb25maWcuZGl2KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNle1xyXG5cdFx0XHRcdHBhbmVsX2Rpdj0kKGNvbmZpZy5kaXYpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGhlaWdodD1wYW5lbF9kaXYuaGVpZ2h0KCk7XHJcblx0XHRcdHdpZHRoPXBhbmVsX2Rpdi53aWR0aCgpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy50cmFja3M9e31cclxuXHRcdHRoaXMudHJhY2tfb3JkZXI9W107XHJcblx0XHRmb3IgKGxldCB0X2NvbmZpZyBvZiB0cmFja3Mpe1xyXG5cdFx0XHRpZiAodGhpcy5maXhlZF9oZWlnaHRfbW9kZSl7XHJcbiAgICBcdFx0XHR0X2NvbmZpZy5kaXNjcmV0ZT10cnVlO1xyXG4gICAgXHRcdH1cclxuXHRcdFx0bGV0IHRyYWNrPU1MVlRyYWNrLmdldFRyYWNrKHRfY29uZmlnKTtcclxuXHRcdFx0dGhpcy50cmFja3NbdHJhY2suY29uZmlnLnRyYWNrX2lkXT10cmFjaztcclxuXHRcdFx0dGhpcy50cmFja19vcmRlci5wdXNoKHRyYWNrLmNvbmZpZy50cmFja19pZClcclxuXHRcdH1cclxuXHRcdC8vY2hlY2sgZm9yIGxpbmtlZCBzY2FsZXNcclxuXHRcdHRoaXMuX3RyYWNrc0NoYW5nZWQoKTtcclxuXHRcdHRoaXMubGVnZW5kPSBudWxsO1xyXG5cclxuICAgICAgXHJcbiAgICAgICBcdHRoaXMudHJhY2tEaXYgPSBwYW5lbF9kaXYuYWRkQ2xhc3MoXCJpZ3YtdHJhY2stZGl2XCIpLmNzcyhcInBvc2l0aW9uXCIsXCJhYnNvbHV0ZVwiKTtcclxuXHJcblx0XHR0aGlzLmNhbnZhcyA9ICQoJzxjYW52YXMgY2xhc3MgPSBcImlndi1jb250ZW50LWNhbnZhc1wiPicpWzBdO1xyXG4gICAgICAgIHRoaXMudHJhY2tEaXYuYXBwZW5kKHRoaXMuY2FudmFzKTtcclxuICAgICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgd2lkdGgpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd19zY2FsZSl7XHJcbiAgICAgICAgXHR0aGlzLmFkZFNjYWxlQ2FudmFzKGhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgIFxyXG4gICAgICAgIHRoaXMudHJhY2tEaXYuYXBwZW5kKFV0aWxzLnNwaW5uZXIoKSk7XHJcblxyXG4gICAgICAgIGxldCBpY29uX2Rpdj0kKFwiPGRpdj5cIikuY3NzKHtcInotaW5kZXhcIjoxMDAscG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpcIjJweFwiLHJpZ2h0OlwiMnB4XCJ9KS5hcHBlbmRUbyh0aGlzLnRyYWNrRGl2KVxyXG4gICAgICAgIFx0XHRcdFx0XHQgICAuYXR0cihcImNsYXNzXCIsXCJwYW5lbC1pY29uLWRpdlwiKVxyXG5cclxuXHJcbiAgICAgICAgLy9mb3IgZXZlbnQgaGFuZGxlcnNcclxuICAgICAgIFx0dGhpcy5pc19kcmFnZ2luZz1mYWxzZTtcclxuICAgICAgIFx0dGhpcy5pc01vdXNlRG93biA9IGZhbHNlLFxyXG4gICAgICBcdHRoaXMubGFzdE1vdXNlWCA9IHVuZGVmaW5lZDtcclxuICAgICAgIFx0dGhpcy5tb3VzZURvd25YID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdC8vYW1vdW50IHRvIHNob3cgZWFjaCBzaWRlIG9mIHZpZXcgcG9ydFxyXG4gICAgICAgXHR0aGlzLmJ1ZmZlcl9sZXZlbD0xO1xyXG5cclxuICAgICAgIFx0dGhpcy5ncm91cHM9e307XHJcblxyXG4gICAgICAgXHR0aGlzLmhpZ2hsaWdodGVkX3JlZ2lvbnM9e307XHJcblxyXG4gICAgICAgXHQvL2xpc3RlbmVyc1xyXG5cdFx0dGhpcy5saXN0ZW5lcnM9e1xyXG4gICAgICAgXHRcdFwicGFuZWxfZW1wdHlcIjpuZXcgTWFwKCksXHJcbiAgICAgICBcdFx0XCJwYW5lbF9jbG9zZWRcIjpuZXcgTWFwKCksXHJcbiAgICAgICBcdFx0XCJ0cmFja19hZGRlZFwiOm5ldyBNYXAoKSxcclxuICAgICAgIFx0XHRcInRyYWNrX3JlbW92ZWRcIjpuZXcgTWFwKCksXHJcbiAgICAgICBcdFx0XCJ2aWV3X2NoYW5nZWRcIjpuZXcgTWFwKCksXHJcbiAgICAgICBcdFx0XCJmZWF0dXJlX2NsaWNrZWRcIjpuZXcgTWFwKCksXHJcbiAgICAgICBcdFx0XCJmZWF0dXJlX292ZXJcIjpuZXcgTWFwKCksXHJcbiAgICAgICBcdFx0XCJyYW5nZV9zZWxlY3RlZFwiOm5ldyBNYXAoKVxyXG4gICAgICAgXHR9O1xyXG5cclxuICAgICAgIFx0aWYgKGNvbmZpZy5hbGxvd191c2VyX2RyYWcpe1xyXG4gICAgICAgXHRcdHRoaXMuYWxsb3dVc2VyRHJhZygpO1xyXG4gICAgICAgXHR9XHJcbiAgICAgICBcdGlmIChjb25maWcuYWxsb3dfdXNlcl96b29tKXtcclxuICAgICAgIFx0XHR0aGlzLmFsbG93VXNlclpvb20oKTtcclxuICAgICAgIFx0fVxyXG4gICAgICAgXHRpZiAoY29uZmlnLmFsbG93X3VzZXJfcmVzaXplKXtcclxuICAgICAgIFx0XHR0aGlzLmFsbG93VXNlclJlc2l6ZShjb25maWcuYWxsb3dfdXNlcl9yZXNpemUpO1xyXG4gICAgICAgXHR9XHJcbiAgICAgICBcdGlmIChjb25maWcuYWxsb3dfdXNlcl9tb3ZlKXtcclxuICAgICAgIFx0XHR0aGlzLmFsbG93VXNlck1vdmUoY29uZmlnLmFsbG93X3VzZXJfbW92ZSk7XHJcbiAgICAgICBcdH1cclxuICAgICAgIFx0aWYgKGNvbmZpZy5hbGxvd191c2VyX2ZlYXR1cmVfY2xpY2spe1xyXG4gICAgICAgXHRcdHRoaXMuYWxsb3dVc2VyRmVhdHVyZUNsaWNrKCk7XHJcbiAgICAgICBcdH1cclxuICAgICAgIFx0aWYgKGNvbmZpZy5hbGxvd191c2VyX2ZlYXR1cmVfb3Zlcil7XHJcbiAgICAgICBcdFx0dGhpcy5hbGxvd1VzZXJGZWF0dXJlT3ZlcigpO1xyXG4gICAgICAgXHR9XHJcbiAgICAgICBcdGlmIChjb25maWcuYWxsb3dfdXNlcl9jbG9zZSl7XHJcbiAgICAgICBcdFx0dGhpcy5hbGxvd1VzZXJDbG9zZSgpO1xyXG4gICAgICAgXHR9XHJcbiAgICAgICBcdGlmIChjb25maWcuYWxsb3dfdXNlcl9kcm9wKXtcclxuICAgICAgIFx0XHR0aGlzLmFsbG93VXNlckRyb3AoKTtcclxuICAgICAgIFx0fVxyXG4gICAgICAgXHRpZiAoY29uZmlnLmFsbG93X3VzZXJfcmFuZ2Vfc2VsZWN0aW9uKXtcclxuICAgICAgIFx0XHR0aGlzLmFsbG93VXNlclJhbmdlU2VsZWN0aW9uKCk7XHJcbiAgICAgICBcdH1cclxuXHJcbiAgICAgICBcdGlmKGNvbmZpZy5ydWxlcl90cmFjayl7XHJcbiAgICAgICBcdFx0dGhpcy5hZGRSdWxlclRyYWNrKCk7XHJcbiAgICAgICBcdH1cclxuICAgICAgIFx0aWYoY29uZmlnLmxlZ2VuZCl7XHJcbiAgICAgICBcdFx0dGhpcy5hZGRMZWdlbmQoKTtcclxuICAgICAgIFx0fVxyXG4gICAgICAgXHRpZiAoY29uZmlnLm5ld19sYXlvdXQpe1xyXG4gICAgICAgXHRcdHRoaXMubmV3X2xheW91dD10cnVlO1xyXG4gICAgICAgXHR9XHJcbiAgICAgIFxyXG4gICAgICAgXHJcbiAgICAgICBcdHRoaXMucmV0cmllcz0wO1xyXG4gICAgICAgXHR0aGlzLnlPZmZzZXQ9MDtcclxuICAgIH1cclxuXHJcbiAgICBfcGFyc2VDb25maWcoY29uZmlnKXtcclxuICAgIFx0Ly9jaGVjayB0aGUgdHJhY2tzIGhhdmUgdGhlIHJpZ2h0IHNldHRpbmdzXHJcbiAgICBcdGlmICh0aGlzLmZpeGVkX2hlaWdodF9tb2RlKXtcclxuICAgIFx0XHRjb25maWcuZGlzY3JldGU9dHJ1ZTtcclxuICAgIFx0XHRpZiAoIWNvbmZpZy5oZWlnaHQpe1xyXG4gICAgXHRcdFx0Y29uZmlnLmhlaWdodD0xNTA7XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2NhbGVDYW52YXMoaGVpZ2h0KXtcclxuICAgIFx0dGhpcy5zY2FsZV9jYW52YXMgPSAkKCc8Y2FudmFzPicpLmNzcyh7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpcIjBweFwiLGxlZnQ6XCI1cHhcIn0pO1xyXG4gICAgXHR0aGlzLnNjYWxlX2NhbnZhc1swXS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgMTAwKTtcclxuICAgICAgICB0aGlzLnNjYWxlX2NhbnZhc1swXS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5zY2FsZV9jYW52YXMuYXBwZW5kVG8odGhpcy50cmFja0Rpdik7XHJcbiAgICAgICAgdGhpcy5zY2FsZV9jdHg9dGhpcy5zY2FsZV9jYW52YXNbMF0uZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG5cdCogc2V0cyB0aGUgZXh0cmEgYW1vdW50IG9mIHRyYWNrIHRvIGRyYXcgZWFjaCBzaWRlIG9mIHRoZSB2aWV3LiBBIHZhbHVlIFxyXG5cdCogb2YgMSB3aWxsIHJldHJlaXZlIDEgeCB0aGUgdmlldyB3aWR0aCBlYWNoIHNpZGUgaS5lLiAzIHggdGhlIHZpc2libGUgd2luZG93XHJcblx0KiBAcGFyYW0ge2ludGVnZXJ9IGxldmVsIC0gVGhlIHR5cGUgb2YgbGlzdGVuZXIgLSB0cmFja19lbXB0eSBcclxuXHQqL1xyXG4gICAgc2V0QnVmZmVyTGV2ZWwobGV2ZWwpe1xyXG4gICAgXHR0aGlzLmJ1ZmZlcl9sZXZlbD1sZXZlbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG5cdCogUmV0dXJucyB0aGUgZWxlbWVudCB0aGF0IGhvdXNlcyB0aGUgcGFuZWxcclxuXHQqIEByZXR1cm5zIHtpbnRlZ2VyfSBsZXZlbCAtIFRoZSB0eXBlIG9mIGxpc3RlbmVyIC0gdHJhY2tfZW1wdHkgXHJcblx0Ki9cclxuXHJcbiAgICBnZXREaXYoKXtcclxuICAgIFx0cmV0dXJuIHRoaXMudHJhY2tEaXY7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgYWRkTGVnZW5kKCl7XHJcbiAgICBcdHRoaXMubGVnZW5kID0gbmV3IFBhbmVsTGVnZW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgICAgICAvKipcclxuXHQqIFNldHMgdGhlIGhpZ2hsaWd0ZWQgcmVnaW9uXHJcblx0KiBAcGFyYW0ge09iamVjdH0gbG9jYXRpb24gLSBBbiBvYmplY3QgY29udGFpbmluZyBjaHIsIHN0YXJ0IGFuZCBlbmRcclxuXHQqIEBwYXJhbSB7bmFtZX0gVGhlIG5hbWUoaWQpIG9mIHRoZSByZWdpb24gKHVzZWQgdG8gcmVtb3ZlIHRoZSByZWdpb24pXHJcblx0KiBAcGFyYW0ge1N0cmluZ30gVGhlIGNvbG9yIHRvIGdpdmUgdGhlIGhpZ2hsaWd0ZWQgcmVnaW9uXHJcblx0Ki9cclxuICAgIHNldEhpZ2hsaWdodGVkUmVnaW9uKGxvY2F0aW9uLG5hbWUsY29sb3Ipe1xyXG4gICAgXHR0aGlzLmhpZ2hsaWdodGVkX3JlZ2lvbnNbbmFtZV09e1xyXG4gICAgXHRcdGNocjpsb2NhdGlvbi5jaHIsXHJcbiAgICBcdFx0c3RhcnQ6bG9jYXRpb24uc3RhcnQsXHJcbiAgICBcdFx0ZW5kOmxvY2F0aW9uLmVuZCxcclxuICAgIFx0XHRjb2xvcjpjb2xvclxyXG4gICAgXHR9XHJcbiAgICBcdHRoaXMuZm9yY2VfcmVkcmF3PXRydWU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG5cdCogUmVtb3ZlcyB0aGUgaGlnaGxpZ2h0ZWQgcmVnaW9uIGZyb20gdGhlIHBhbmVsXHJcblx0KiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBoaWdobGlnaHRlZCByZWdpb25cclxuXHQqIHRoYXQgd2FzIGdpdmVuIHdoZW4gaXQgd2FzIGNyZWF0ZWQuXHJcblx0Ki9cclxuICAgIHJlbW92ZUhpZ2hsaWdodGVkUmVnaW9uKG5hbWUpe1xyXG4gICAgXHRkZWxldGUgdGhpcy5oaWdobGlnaHRlZF9yZWdpb25zW25hbWVdO1xyXG4gICAgXHR0aGlzLmZvcmNlX3JlZHJhdz10cnVlO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIGFkZFJ1bGVyVHJhY2soKXtcclxuICAgIFx0bGV0IHRyYWNrPW5ldyBSdWxlclRyYWNrKCk7XHJcbiAgICBcdGxldCBjb25maWcgPSB0cmFjay5nZXRDb25maWcoKTtcclxuXHRcdHRoaXMudHJhY2tzW2NvbmZpZy50cmFja19pZF09dHJhY2s7XHJcblx0XHR0aGlzLnRyYWNrX29yZGVyLnVuc2hpZnQoY29uZmlnLnRyYWNrX2lkKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG5cdCogQWRkcyBhIGxpc3RlbmVyIHRvIHRoZSBwYW5lbFxyXG5cdCogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBsaXN0ZW5lciAtIHRyYWNrX2VtcHR5XHJcblx0KiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgXHJcblx0KiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIGhhbmRsZXIgKGNhbiBiZSB1c2VkIHRvIHJlbW92ZSB0aGUgaGFuZGxlcilcclxuXHQqIE9wdGlvbmFsIC0gYW4gaWQgd2lsbCBiZSBhc3NpZ25lZCAoYW5kIHJldHVybmVkKSBpZiBub3Qgc3VwcGxpZWRcclxuXHQqIEByZXR1cm5ze3N0cmluZ30gVGhlIGlkIG9mIHRoZSBoYW5kbGVyIG9yIG51bGwgaWYgdGhlIHR5cGUgZGlkIG5vdCBleGlzdCBcclxuXHQqL1xyXG4gICAgYWRkTGlzdGVuZXIodHlwZSxmdW5jLGlkKXtcclxuICAgIFx0bGV0IGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XHJcbiAgICBcdGlmICghbGlzdGVuZXIpe1xyXG4gICAgXHRcdHJldHVybiBudWxsO1xyXG4gICAgXHR9XHJcbiAgICBcdGlmICghaWQpe1xyXG4gICAgXHRcdGlkID0gdHlwZStcIl9cIitsaXN0ZW5lci5zaXplXHJcbiAgICBcdH1cclxuICAgIFx0bGlzdGVuZXIuc2V0KGlkLGZ1bmMpO1xyXG4gICAgXHRyZXR1cm4gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcblx0KiBSZW1vdmVzIGEgbGlzdGVuZXIgdG8gdGhlIHBhbmVsXHJcblx0KiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGxpc3RlbmVyIC0gdHJhY2tfZW1wdHkgXHJcblx0KiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIGhhbmRsZXIgdG8gcmVtb3ZlXHJcblx0KiBAcmV0dXJuc3tib29sZWFufSB0cnVlIGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZCwgb3RoZXJ3aXNlIGZhbHNlIFxyXG5cdCovXHJcbiAgICByZW1vdmVMaXN0ZW5lcih0eXBlLGlkKXtcclxuICAgIFx0bGV0IGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XHJcbiAgICBcdGlmICghbGlzdGVuZXIpe1xyXG4gICAgXHRcdHJldHVybiBmYWxzZTtcclxuICAgIFx0fVxyXG4gICAgXHRyZXR1cm4gbGlzdGVuZXIuZGVsZXRlKGlkKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgIFxyXG4gICAgLyoqXHJcblx0KiBSZW1vdmVzIGEgbGlzdGVuZXIgdG8gdGhlIHBhbmVsXHJcblx0KiBAcGFyYW0ge29iamVjdH0gY29uZmlnIC0gVGhlIGNvbmZpZyBvZiB0aGUgdHJhY2sgdG8gYWRkVHJhY2tcclxuXHQqIEBwYXJhbSB7aW50ZWdlcn0gaW5kZXggLSBPcHRpb25hbCwgdGhlIHZlcnRpY2FsIG9yZGVyIG9mIHRoZSB0cmFja1xyXG5cdCovXHJcbiAgICBhZGRUcmFjayhjb25maWcsaW5kZXgsbm9fcHJvcGFnYXRlKXtcclxuICAgIFx0bGV0IHRyYWNrPU1MVlRyYWNrLmdldFRyYWNrKGNvbmZpZyk7XHJcbiAgICBcdGlmICh0aGlzLmZpeGVkX2hlaWdodF9tb2RlKXtcclxuICAgIFx0XHR0cmFjay5jb25maWcuZGlzY3JldGU9dHJ1ZTtcclxuICAgIFx0fVxyXG5cdFx0dGhpcy50cmFja3NbdHJhY2suY29uZmlnLnRyYWNrX2lkXT10cmFjaztcclxuXHRcdGlmIChpbmRleCB8fCBpbmRleD09MCl7XHJcblx0XHRcdHRoaXMudHJhY2tfb3JkZXIuc3BsaWNlKGluZGV4LDAsdHJhY2suY29uZmlnLnRyYWNrX2lkKVxyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0dGhpcy50cmFja19vcmRlci5wdXNoKHRyYWNrLmNvbmZpZy50cmFja19pZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fdHJhY2tzQ2hhbmdlZCgpO1xyXG5cdFx0aWYgKHRoaXMubGVnZW5kKXtcclxuICAgIFx0XHR0aGlzLmxlZ2VuZC5hZGRUcmFjayh0cmFjay5jb25maWcsaW5kZXgpO1xyXG4gICAgXHR9XHJcblx0XHRpZiAoIW5vX3Byb3BhZ2F0ZSl7XHJcblx0XHRcdHRoaXMuX2NhbGxMaXN0ZW5lcnMoXCJ0cmFja19hZGRlZFwiLHRyYWNrLmNvbmZpZyk7XHJcblx0XHR9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9jYWxsTGlzdGVuZXJzKHR5cGUsY29uZmlnKXtcclxuICAgIFx0ICBcclxuICAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0uZm9yRWFjaChmdW5jdGlvbih2KXt2KGNvbmZpZyl9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVBbGxUcmFja3MoKXtcclxuICAgIFx0bGV0IGR1cF9hcnJheSA9IHRoaXMudHJhY2tfb3JkZXIuc2xpY2UoKTtcclxuICAgIFx0Zm9yIChsZXQgaWQgb2YgZHVwX2FycmF5KXtcclxuICAgIFx0XHR0aGlzLnJlbW92ZVRyYWNrKGlkLHRydWUpXHJcbiAgICBcdH1cclxuXHJcbiAgICB9XHJcbiAgICBcclxuXHQvKipcclxuXHQqIFJlbW92ZXMgYSBsaXN0ZW5lciB0byB0aGUgcGFuZWxcclxuXHQqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBUaGUgY29uZmlnIG9mIHRoZSB0cmFjayB0byBhZGQgXHJcblx0Ki9cclxuICAgIHJlbW92ZVRyYWNrKHRyYWNrX2lkLG5vdF9yZXBhaW50LG5vdF9wcm9wYWdhdGUpe1xyXG4gICAgXHRpZiAoIXRoaXMudHJhY2tzW3RyYWNrX2lkXSl7XHJcbiAgICBcdFx0cmV0dXJuIG51bGw7XHJcbiAgICBcdH1cclxuICAgIFx0dGhpcy50cmFja19vcmRlciA9IHRoaXMudHJhY2tfb3JkZXIuZmlsdGVyKGUgPT4gZSAhPT0gdHJhY2tfaWQpO1xyXG4gICAgXHRpZiAoIW5vdF9yZXBhaW50KXtcclxuICAgIFx0XHR0aGlzLnJlcGFpbnQodHJ1ZSx0cnVlKTtcclxuICAgIFx0fVxyXG4gICAgXHJcbiAgICBcdGlmICh0aGlzLmxlZ2VuZCl7XHJcbiAgICBcdFx0dGhpcy5sZWdlbmQucmVtb3ZlVHJhY2sodHJhY2tfaWQpO1xyXG4gICAgXHR9XHJcbiAgICBcdGxldCBjb25maWcgPSAgdGhpcy50cmFja3NbdHJhY2tfaWRdLmNvbmZpZ1xyXG4gICAgXHRkZWxldGUgdGhpcy50cmFja3NbdHJhY2tfaWRdO1xyXG4gICAgXHRpZiAoISBub3RfcHJvcGFnYXRlKXtcclxuICAgIFx0XHR0aGlzLl9jYWxsTGlzdGVuZXJzKFwidHJhY2tfcmVtb3ZlZFwiLGNvbmZpZyk7XHJcblx0fVxyXG4gICAgXHRpZiAodGhpcy50cmFja19vcmRlci5sZW5ndGg9PT0wKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgbF9pZCBpbiB0aGlzLmxpc3RlbmVyc1tcInBhbmVsX2VtcHR5XCJdKXtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW1wicGFuZWxfZW1wdHlcIl1bbF9pZF0odGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VHJhY2tDb25maWcodHJhY2tfaWQpe1xyXG4gICAgXHRsZXQgdHJhY2sgPSB0aGlzLnRyYWNrc1t0cmFja19pZF07XHJcbiAgICBcdHJldHVybiB0cmFjay5nZXRDb25maWcoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0QWxsVHJhY2tDb25maWdzKCl7XHJcbiAgICBcdGxldCBjb25maWdzPVtdO1xyXG4gICAgXHRmb3IgKGxldCBpZCBvZiB0aGlzLnRyYWNrX29yZGVyKXtcclxuXHRcdFx0Y29uZmlncy5wdXNoKHRoaXMudHJhY2tzW2lkXS5nZXRDb25maWcoKSk7XHJcbiAgICBcdH1cclxuICAgIFx0cmV0dXJuIGNvbmZpZ3M7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldFRyYWNrQXR0cmlidXRlKHRyYWNrX2lkLGtleSx2YWx1ZSl7XHJcbiAgICBcdGxldCB0cmFjayA9IHRoaXMudHJhY2tzW3RyYWNrX2lkXTtcclxuICAgIFx0aWYgKCF0cmFjayl7XHJcbiAgICBcdFx0cmV0dXJuO1xyXG4gICAgXHR9XHJcbiAgICBcdHRyYWNrLnNldENvbmZpZ0F0dHJpYnV0ZShrZXksdmFsdWUpO1xyXG4gICAgXHRpZiAoa2V5PT09XCJzY2FsZV9saW5rX3RvXCIpe1xyXG4gICAgXHRcdHRoaXMudHJhY2tzW3RyYWNrX2lkXS5zY2FsZV9saW5rX3RvID0gdGhpcy50cmFja3NbdmFsdWVdO1xyXG4gICAgXHR9XHJcbiAgICBcdGlmICgoa2V5PT09XCJjb2xvclwiIHx8IGtleT09PVwiZGlzcGxheVwiKSAmJiB0aGlzLmxlZ2VuZCl7XHJcbiAgICBcdFx0dGhpcy5sZWdlbmQudXBkYXRlVHJhY2sodHJhY2tfaWQpO1xyXG4gICAgXHR9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldFRyYWNrQXR0cmlidXRlcyh0cmFja19pZCxhdHRyaWJ1dGVzKXtcclxuICAgIFx0bGV0IHRyYWNrID0gdGhpcy50cmFja3NbdHJhY2tfaWRdO1xyXG4gICAgXHRmb3IgKGxldCBrZXkgaW4gYXR0cmlidXRlcyl7XHJcbiAgICBcdFx0dHJhY2suc2V0Q29uZmlnQXR0cmlidXRlKGtleSxhdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgXHRcdGlmIChrZXk9PT1cImNvbG9yXCIgJiYgdGhpcy5sZWdlbmQpe1xyXG4gICAgICAgIFx0XHR0aGlzLmxlZ2VuZC51cGRhdGVUcmFjayh0cmFja19pZCk7XHJcbiAgICAgICAgXHR9XHJcbiAgICBcdH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcblx0KiBTZXRzIHRoZSBmaWx0ZXIgIGZ1bmN0aW9uIGZvciB0cmFjay4gXHJcblx0KiBAcGFyYW0ge3N0cmluZ30gdHJhY2tfaWQtIFRoZSBpZCBvZiB0aGUgdHJhY2tcclxuXHQqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gVGhlIGZpbHRlciBmdW5jdGlvbi4gSXQgc2hvdWxkIGFjY2VwdCB0aGUgZmVhdHVyZVxyXG5cdCogYW5kIHJldHVybiB0cnVlIHRvIGRpc3BhbHkgdGhlIGZlYXR1cmUgYW5kIGZhbHNlIHRvIGhpZGUgaXQuIFVzZSBudWxsIFxyXG5cdCogdG8gY2FuY2VsIHRoZSBmaWx0ZXJcclxuXHQqL1xyXG4gICAgc2V0VHJhY2tGZWF0dXJlRmlsdGVyKHRyYWNrX2lkLGZ1bmMpe1xyXG4gICAgXHRsZXQgdHJhY2sgPSB0aGlzLnRyYWNrc1t0cmFja19pZF07XHJcbiAgICBcdHRyYWNrLnNldEZpbHRlckZ1bmN0aW9uKGZ1bmMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG5cdCogU2V0cyB0aGUgZmlsdGVyICBmdW5jdGlvbiBmb3IgdHJhY2sgXHJcblx0KiBAcGFyYW0ge3N0cmluZ30gdHJhY2tfaWQtIFRoZSBpZCBvZiB0aGUgdHJhY2tcclxuXHQqIEBwYXJhbSB7c3RyaW5nfSBmdW5jIC0gVGhlIGNvbG9yIGZ1bmN0aW9uLiBJdCBzaG91bGQgYWNjZXB0IHRoZSBmZWF0dXJlXHJcblx0KiBhbmQgcmV0dXJuIHRoZSBmZWF0dXJlIGNvbG9yLiBVc2UgbnVsbCB0byBnbyBiYWNrIHRvIGRlZmF1bHQgY29sb3JzIFxyXG5cdCovXHJcbiAgICBzZXRUcmFja0NvbG9yRnVuY3Rpb24odHJhY2tfaWQsZnVuYyl7XHJcbiAgICBcdGxldCB0cmFjayA9IHRoaXMudHJhY2tzW3RyYWNrX2lkXTtcclxuICAgIFx0dHJhY2suc2V0Q29sb3JGdW5jdGlvbihmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRUcmFja0xhYmVsRnVuY3Rpb24odHJhY2tfaWQsZnVuYyl7XHJcbiAgICBcdGxldCB0cmFjayA9IHRoaXMudHJhY2tzW3RyYWNrX2lkXTtcclxuICAgIFx0aWYgKHRyYWNrKXtcclxuICAgIFx0XHR0cmFjay5sYWJlbF9mdW5jdGlvbj1mdW5jO1xyXG4gICAgXHR9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgXHJcblxyXG5cclxuXHJcblxyXG4gICAgX3RyYWNrc0NoYW5nZWQoKXtcclxuICAgIFx0Zm9yIChsZXQgdF9pZCBvZiB0aGlzLnRyYWNrX29yZGVyKXtcclxuICAgIFx0XHRsZXQgdHJhY2sgPSB0aGlzLnRyYWNrc1t0X2lkXTtcclxuICAgIFx0XHQvL2lmIHRoaXMgdHJhY2sgaXMgbGlua2VkIHRvIHRoZSBzY2FsZSBvZiBhbm90aGVyXHJcbiAgICBcdFx0Ly9nZXQgcG9pbnRlciB0byB0aGUgdHJhY2tcclxuICAgIFx0XHRsZXQgbGlua190byA9IHRyYWNrLmNvbmZpZ1snc2NhbGVfbGlua190byddO1xyXG4gICAgXHRcdGlmIChsaW5rX3RvKXtcclxuXHRcdFx0XHRsZXQgb3RoZXJfdHJhY2sgPSB0aGlzLnRyYWNrc1tsaW5rX3RvXTtcclxuXHRcdFx0XHRpZiAob3RoZXJfdHJhY2spe1xyXG5cdFx0XHRcdFx0dHJhY2suc2NhbGVfbGlua190bz1vdGhlcl90cmFjaztcclxuXHRcdFx0XHR9XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldEN1cnJlbnRUcmFja0ZlYXR1cmVzKHRyYWNrX2lkKXtcclxuICAgIFx0bGV0IHRyYWNrID0gdGhpcy50cmFja3NbdHJhY2tfaWRdO1xyXG4gICAgXHRyZXR1cm4gdHJhY2suZ2V0Q3VycmVudEZlYXR1cmVzKHRoaXMuY2hyLHRoaXMuc3RhcnQsdGhpcy5lbmQpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBcclxuXHQgXHJcblx0IFxyXG5cdCBcclxuXHJcbiAgXHJcblxyXG4gICAvKipcclxuICAgICogVXBkYXRlZCB0aGUgcGFuZWwgdmlldywgaWYgY2hyb21vc29tZSBzdGFydCBhbmQgZW5kIGFyZSBzdXBwbGllZFxyXG4gICAgKiBpdCB3aWxsIGdvIHRvIHRoaXMgbG9jYXRpb24uIElmIG5vIHBhcmFtZXRlcnMgYXJlIGdpdmVuIHRoZSBwYW5lbFxyXG4gICAgKiB3aWxsIGJlIHJlZHJhd24gYXQgdGhlIHNhbWUgbG9jYXRpb24gZS5nIGFmdGVyIHRoZSBjb2xvciwgc2NhbGUgb3IgYW5vdGhlclxyXG4gICAgKiBwYXJhbXRlciBoYXMgYmVlbiBzZXRcclxuICAgICogQHBhcmFtIHtzdHJpbmd9IGZvcmNlIC0gSWYgdHJ1ZSB0aGVuIGEgY2FjaGVkIGltYWdlIHdpbGwgbm90IGJlIHVzZWRcclxuICAgICogQHBhcmFtIHtpbnRlZ2VyfSBzdGFydCBvZiB0aGUgcmVnaW9uIHRvIGRyYXdcclxuICAgICogQHBhcmFtIHtpbnRlZ2VyfSBlbmQgb2YgdGhlIHJlZ2lvbiB0byBkcmF3XHJcbiAgICAqL1xyXG5cclxuICAgIHVwZGF0ZSAoY2hyLHN0YXJ0LGVuZCxub19wcm9wYWdhdGlvbikge1xyXG4gICAgXHR0aGlzLmNhbGxfdXBkYXRlX2xpc3RlbmVyPW5vX3Byb3BhZ2F0aW9uO1xyXG4gICAgICAgIGlmIChjaHIpe1xyXG4gICAgICAgICAgICB0aGlzLmNocj1jaHI7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnQ9c3RhcnQ7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kPWVuZDtcclxuICAgICAgICAgICAgdGhpcy5yZXBhaW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgXHR0aGlzLnJlcGFpbnQodHJ1ZSx0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgIFxyXG4gICAgfTtcclxuXHJcbiAgICBnZXRUcmFja3NIZWlnaHQoKXtcclxuICAgIFx0bGV0IGggPTA7XHJcbiAgICBcdGxldCBncm91cHM9e31cclxuICAgIFx0Zm9yIChsZXQgdGlkIG9mIHRoaXMudHJhY2tfb3JkZXIpe1xyXG4gICAgXHRcdGxldCB0cmFjaz0gIHRoaXMudHJhY2tzW3RpZF07XHJcbiAgICBcdFx0bGV0IGcgPSB0cmFjay5jb25maWcuZ3JvdXA7XHJcbiAgICBcdFx0aWYgKGcpe1xyXG4gICAgXHRcdFx0aWYgKCFncm91cHNbZ10pe1xyXG4gICAgXHRcdFx0XHRoKz10cmFjay5jb25maWcuaGVpZ2h0O1xyXG4gICAgXHRcdFx0XHRncm91cHNbZ109dHJ1ZTtcclxuICAgIFx0XHRcdH1cclxuXHJcbiAgICBcdFx0fVxyXG4gICAgXHRcdGVsc2V7XHJcblx0XHRcdFx0aCs9dHJhY2suY29uZmlnLmhlaWdodDtcclxuICAgIFx0XHR9XHJcbiAgICBcdH1cclxuICAgIFx0cmV0dXJuIGg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldEFsbEZlYXR1cmVzKGJwU3RhcnQsIGJwRW5kLGZvcmNlLGRhdGEpIHtcclxuICAgICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCB0cmFja19pZCAgb2YgdGhpcy50cmFja19vcmRlcil7XHJcbiAgICAgICAgXHRsZXQgdHJhY2sgPSB0aGlzLnRyYWNrc1t0cmFja19pZF07XHJcbiAgICAgICAgXHRwcm9taXNlcy5wdXNoKHRyYWNrLmdldEZlYXR1cmVzKHRoaXMuY2hyLGJwU3RhcnQsYnBFbmQsZm9yY2UsZGF0YSkpOyAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTsgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBhaW50IHRoZSB2aWV3LCB1c2luZyBhIGNhY2hlZCBpbWFnZSBpZiBhdmFpbGFibGUuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlIC0gSWYgdHJ1ZSB0aGVuIGEgY2FjaGVkIGltYWdlIHdpbGwgbm90IGJlIHVzZWRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZ2VfZnJvbV90aWxlIFJlZHJhdyB0aGUgdGlsZVxyXG4gICAgICovXHJcbiAgICByZXBhaW50KGZvcmNlLHJhbmdlX2Zyb21fdGlsZSkge1xyXG5cclxuICAgICAgIFxyXG5cdFx0XHJcbiAgICAgICAgdmFyIHBpeGVsV2lkdGgsXHJcbiAgICAgICAgICAgIGJwV2lkdGgsXHJcbiAgICAgICAgICAgIGJwU3RhcnQsXHJcbiAgICAgICAgICAgIGJwRW5kLFxyXG4gICAgICAgICAgICBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgY3R4LFxyXG4gICAgICAgICAgICByZWZlcmVuY2VGcmFtZSxcclxuICAgICAgICAgICAgY2hyLFxyXG4gICAgICAgICAgICByZWZGcmFtZVN0YXJ0LFxyXG4gICAgICAgICAgICByZWZGcmFtZUVuZCxcclxuICAgICAgICAgICAgc3VjY2VzcztcclxuXHJcbiAgICAgICAgY2hyID0gdGhpcy5jaHI7XHJcbiAgICAgICAgcmVmRnJhbWVTdGFydCA9IHRoaXMuc3RhcnQ7XHJcbiAgICAgICAgcmVmRnJhbWVFbmQgPSB0aGlzLmVuZDtcclxuICAgICAgICB0aGlzLmJwUGVyUGl4ZWw9KHRoaXMuZW5kLXRoaXMuc3RhcnQpL3RoaXMuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGxldCBnZXRfZmVhdHVyZXM9dHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy50aWxlICYmIHRoaXMudGlsZS5jb250YWluc1JhbmdlKGNociwgcmVmRnJhbWVTdGFydCwgcmVmRnJhbWVFbmQsIHRoaXMuYnBQZXJQaXhlbCkpe1xyXG4gICAgICAgICAgICBnZXRfZmVhdHVyZXM9ZmFsc2U7XHJcbiAgICAgICAgfSBcclxuICAgICAgICBpZiAoIWdldF9mZWF0dXJlcyAmJiAhZm9yY2UgJiYgIXRoaXMuZm9yY2VfcmVkcmF3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2VfcmVkcmF3PWZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnBhaW50SW1hZ2UoKTtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLmNhbGxfdXBkYXRlX2xpc3RlbmVyKXtcclxuICAgICAgICAgICAgXHRzZWxmLmxpc3RlbmVycy52aWV3X2NoYW5nZWQuZm9yRWFjaCgoZnVuYyk9PntmdW5jKHNlbGYuY2hyLHBhcnNlSW50KHNlbGYuc3RhcnQpLHBhcnNlSW50KHNlbGYuZW5kKSl9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWxmLmNhbGxfdXBkYXRlX2xpc3RlbmVyPWZhbHNlO1xyXG4gICAgICAgXHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICBzZWxmLnJldHJpZXM9MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEV4cGFuZCB0aGUgcmVxdWVzdGVkIHJhbmdlIHNvIHdlIGNhbiBwYW4gYSBiaXQgd2l0aG91dCByZWxvYWRpbmdcclxuICAgICAgICAgICAgdGhpcy5mb3JjZV9yZWRyYXc9ZmFsc2U7XHJcbiAgICAgICAgICAgIHBpeGVsV2lkdGggPSAoKHRoaXMuYnVmZmVyX2xldmVsKjIpKzEpICogdGhpcy5jYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgIGJwV2lkdGggPSBNYXRoLnJvdW5kKHBpeGVsV2lkdGgqdGhpcy5icFBlclBpeGVsKTtcclxuICAgICAgICAgICAgYnBTdGFydCA9IE1hdGgubWF4KDAsIE1hdGgucm91bmQodGhpcy5zdGFydC0odGhpcy5idWZmZXJfbGV2ZWwqdGhpcy5jYW52YXMud2lkdGgqdGhpcy5icFBlclBpeGVsKSkpO1xyXG4gICAgICAgICAgICBicEVuZCA9IGJwU3RhcnQgKyBicFdpZHRoO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5sb2FkaW5nKXtcclxuICAgICAgICAgICAgXHRpZiAoZm9yY2UgJiYgcmFuZ2VfZnJvbV90aWxlKXtcclxuICAgICAgICAgICAgXHRcdHNlbGYudXBkYXRlX3JlcXVpcmVkPXRydWU7XHJcbiAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICBcdGVsc2V7XHJcbiAgICAgICAgICAgIFx0XHRzZWxmLnVwZGF0ZV9yZXF1aXJlZD1cImxvY2F0aW9uXCI7XHJcbiAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICBcdHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmFuZ2VfZnJvbV90aWxlKXtcclxuICAgICAgICAgICAgXHRpZiAodGhpcy50aWxlKXtcclxuICAgICAgICAgICAgICAgICAgICBicFN0YXJ0PXRoaXMudGlsZS5zdGFydEJQO1xyXG4gICAgICAgICAgICAgICAgICAgIGJwRW5kPXRoaXMudGlsZS5lbmRCUDtcclxuICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0ge3N0YXJ0OiBicFN0YXJ0LCBlbmQ6IGJwRW5kfTtcclxuICAgICAgICAgICAgc2VsZi50cmFja0Rpdi5maW5kKFwiLm1sdi1hbGVydFwiKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIFV0aWxzLnN0YXJ0U3Bpbm5lckF0UGFyZW50RWxlbWVudChzZWxmLnRyYWNrRGl2KTtcclxuXHJcblxyXG4gICAgICAgICAgICBzZWxmLmdldEFsbEZlYXR1cmVzKCBicFN0YXJ0LCBicEVuZCwhZ2V0X2ZlYXR1cmVzLHtwaXhlbFdpZHRoOnBpeGVsV2lkdGgsYnBQZXJQaXhlbDpzZWxmLmJwUGVyUGl4ZWx9KVxyXG5cclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhbGxfZmVhdHVyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsX2ZlYXR1cmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlci53aWR0aCA9IHBpeGVsV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5oZWlnaHQgPSBzZWxmLmZpeGVkX2hlaWdodF9tb2RlP3NlbGYuZ2V0VHJhY2tzSGVpZ2h0KCk6c2VsZi5jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHggPSBidWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2hvd19zY2FsZSl7XHJcbiAgICAgICAgXHRcdFx0XHRcdHNlbGYuc2NhbGVfYnVmZmVyPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBcdFx0XHRcdFx0c2VsZi5zY2FsZV9idWZmZXIud2lkdGggPSAyMDA7XHJcbiAgICAgICAgXHRcdFx0XHRcdHNlbGYuc2NhbGVfYnVmZmVyLmhlaWdodCA9IGJ1ZmZlci5oZWlnaHQ7XHJcbiAgICAgICAgXHRcdFx0XHRcdHNlbGYuc2NhbGVfYnVmZmVyX2N0eD1zZWxmLnNjYWxlX2J1ZmZlci5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGN0eCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicFN0YXJ0OiBicFN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJwUGVyUGl4ZWw6IHNlbGYuYnBQZXJQaXhlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbFdpZHRoOiBidWZmZXIud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGl4ZWxIZWlnaHQ6IGJ1ZmZlci5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyOmNoclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9wPTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZ3JvdXBzPXt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGN1bGF0ZU1heFNjYWxlKGFsbF9mZWF0dXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gYWxsX2ZlYXR1cmVzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRsZXQgdHJhY2sgPSBzZWxmLnRyYWNrc1tzZWxmLnRyYWNrX29yZGVyW2ldXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRvcHRpb25zLmZlYXR1cmVzPWFsbF9mZWF0dXJlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRsZXQgZ3JvdXAgPSB0cmFjay5jb25maWcuZ3JvdXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiAoZ3JvdXApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0aWYgKCFzZWxmLmdyb3Vwc1tncm91cF0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0XHRzZWxmLmdyb3Vwc1tncm91cF09e3RvcDp0b3AsaGVpZ2h0OnRyYWNrLmNvbmZpZy5oZWlnaHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0XHRcdC8vZmlyc3QgdGltZSBpbmNyZWFzZSB0b3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRcdFx0dG9wKz10cmFjay5jb25maWcuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0b3B0aW9ucy50b3A9c2VsZi5ncm91cHNbZ3JvdXBdLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRcdG9wdGlvbnMuaGVpZ2h0PXNlbGYuZ3JvdXBzW2dyb3VwXS5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0b3B0aW9ucy50b3AgPXRvcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0bGV0IGRpc2MgPSAgIHNlbGYuZml4ZWRfaGVpZ2h0X21vZGUgfHwgdHJhY2suY29uZmlnLmRpc2NyZXRlIHx8IGdyb3VwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdGlmIChkaXNjKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRcdGxldCBoPWdyb3VwP29wdGlvbnMuaGVpZ2h0OnRyYWNrLmNvbmZpZy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0XHRjdHguc2F2ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y3R4LnJlY3QoMCxvcHRpb25zLnRvcCxvcHRpb25zLnBpeGVsV2lkdGgsaCk7XHJcblx0XHRcdFx0XHRcdFx0XHRjdHguY2xpcCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXQ9IHRyYWNrLmRyYXdGZWF0dXJlcyhvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc2MgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0Y3R4LnJlc3RvcmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiAoIWdyb3VwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFx0XHRcdHRvcCs9dHJhY2suY29uZmlnLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFx0XHRcdHRyYWNrLmJvdHRvbT10b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9mZnNldCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdHRvcD1vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnNob3dfc2NhbGUpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0dHJhY2suZHJhd1NjYWxlKG9wdGlvbnMucGl4ZWxIZWlnaHQsc2VsZi5zY2FsZV9idWZmZXJfY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIHNlbGYuaGlnaGxpZ2h0ZWRfcmVnaW9ucyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0bGV0IHJlZ2lvbiA9IHNlbGYuaGlnaGxpZ2h0ZWRfcmVnaW9uc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRpZiAoc2VsZi5jaHIgIT09IHJlZ2lvbi5jaHIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0Y29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdGlmIChyZWdpb24uZW5kPGJwU3RhcnQgfHxyZWdpb24uc3RhcnQ+YnBFbmQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdFx0Y29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx0c2VsZi5kcmF3SGlnaGxpZ2h0ZWRSZWdpb24ocmVnaW9uLG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmV0cmllcz0wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aWxlID0gbmV3IFRpbGUoY2hyLCBicFN0YXJ0LCBicEVuZCwgc2VsZi5icFBlclBpeGVsLCBidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBhaW50SW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmNhbGxfdXBkYXRlX2xpc3RlbmVyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHRzZWxmLmxpc3RlbmVycy52aWV3X2NoYW5nZWQuZm9yRWFjaCgoZnVuYyk9PntmdW5jKHNlbGYuY2hyLHBhcnNlSW50KHNlbGYuc3RhcnQpLHBhcnNlSW50KHNlbGYuZW5kKSl9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGxfdXBkYXRlX2xpc3RlbmVyPWZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdHguY2xlYXJSZWN0KDAsIDAsIHNlbGYuY2FudmFzLndpZHRoLCBzZWxmLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi51cGRhdGVfcmVxdWlyZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIFx0aWYgKHNlbGYudXBkYXRlX3JlcXVpcmVkPT09XCJsb2NhdGlvblwiKXtcclxuICAgICAgICAgICAgICAgICAgICBcdFx0c2VsZi51cGRhdGUoc2VsZi5jaHIsc2VsZi5zdGFydCxzZWxmLmVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHRcdHNlbGYudXBkYXRlX3JlcXVpcmVkPWZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgICAgICAgIFx0ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBcdFx0c2VsZi51cGRhdGVfcmVxdWlyZWQ9ZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgXHRcdHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgICAgICAgICAgfVx0XHJcbiAgICAgICAgICAgICAgICAgICAgVXRpbHMuc3RvcFNwaW5uZXJBdFBhcmVudEVsZW1lbnQoc2VsZi50cmFja0Rpdik7XHJcblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnJldHJpZXM8MyAmJiBlcnJvciE9PVwiVGltZWQgb3V0XCIpe1xyXG4gICAgICAgICAgICAgICAgICAgIFx0c2VsZi5yZXRyaWVzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgXHRzZWxmLnJlcGFpbnQoZm9yY2UscmFuZ2VfZnJvbV90aWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5zdG9wU3Bpbm5lckF0UGFyZW50RWxlbWVudChzZWxmLnRyYWNrRGl2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2FkaW5nPWZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZvcmNlX3JlZHJhdz10cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5wcmVzZW50QWxlcnQoc2VsZi50cmFja0RpdixlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdmlld0lzUmVhZHkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYWNrO1xyXG4gICAgICAgIH1cclxuIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhdXRvU2NhbGUoZmVhdHVyZXMsbWluLG1heCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZlYXR1cmVzKXtcclxuICAgICAgICAgICAgICAgIFx0cmV0dXJuKHttaW46MCxtYXg6MX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHRcdGZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgXHRcdG1pbiA9IE1hdGgubWluKG1pbiwgZi52YWx1ZSk7XHJcbiAgICAgICAgICAgXHRcdFx0bWF4ID0gTWF0aC5tYXgobWF4LCBmLnZhbHVlKTtcclxuICAgICAgICBcdFx0fSk7XHJcbiAgICAgICAgXHRcdHJldHVybiB7bWluOiBtaW4sIG1heDogbWF4fTtcclxuICAgIFx0XHRcclxuICAgIH1cclxuXHJcbiAgICBjYWxjdWxhdGVNYXhTY2FsZShhbGxfZmVhdHVyZXMpe1xyXG4gICAgXHQgIGxldCBncm91cHM9e307XHJcbiAgICBcdCAgZm9yICh2YXIgaSBpbiBhbGxfZmVhdHVyZXMpe1xyXG4gICAgICAgICAgICAgIGxldCB0cmFjayA9IHRoaXMudHJhY2tzW3RoaXMudHJhY2tfb3JkZXJbaV1dO1xyXG4gICAgICAgICAgICAgIHRyYWNrLnNldF9zY2FsZT1udWxsO1xyXG4gICAgICAgICAgICAgIGxldCBncm91cCA9dHJhY2suY29uZmlnLmdyb3VwO1xyXG4gICAgICAgICAgICAgaWYgKGdyb3VwICYmIHRyYWNrLmNvbmZpZy5zY2FsZSE9PVwiZml4ZWRcIiAmJiAhKHRyYWNrLmNvbmZpZy5zY2FsZV9saW5rX3RvKSl7XHJcbiAgICAgICAgICAgICBcdFx0dHJhY2suY29uZmlnLnNjYWxlX2dyb3VwPWdyb3VwO1xyXG4gICAgICAgICAgICAgfSAgICAgICBcdFxyXG4gICAgICAgICAgICAgZ3JvdXAgPSB0cmFjay5jb25maWcuc2NhbGVfZ3JvdXBcclxuICAgICAgICAgICAgIGlmIChncm91cCl7XHJcbiAgICAgICAgICAgICBcdGxldCBncm91cF9pbmZvPSBncm91cHNbZ3JvdXBdO1xyXG4gICAgICAgICAgICAgXHRpZiAoIWdyb3VwX2luZm8pe1xyXG4gICAgICAgICAgICAgXHRcdGdyb3VwX2luZm89e3RyYWNrczpbdHJhY2tdLGZlYXR1cmVzOlthbGxfZmVhdHVyZXNbaV1dfVxyXG4gICAgICAgICAgICAgXHRcdGdyb3Vwc1tncm91cF09Z3JvdXBfaW5mb1xyXG5cclxuICAgICAgICAgICAgIFx0XHRcclxuICAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgXHRlbHNle1xyXG4gICAgICAgICAgICAgXHRcdGdyb3VwX2luZm8uZmVhdHVyZXMucHVzaChhbGxfZmVhdHVyZXNbaV0pO1xyXG4gICAgICAgICAgICAgXHRcdGdyb3VwX2luZm8udHJhY2tzLnB1c2godHJhY2spO1xyXG4gICAgICAgICAgICAgXHR9XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgIH1cclxuICAgIFx0ICB9XHJcbiAgICBcdCAgZm9yIChsZXQgbmFtZSBpbiBncm91cHMpe1xyXG4gICAgXHQgIFx0bGV0IGc9IGdyb3Vwc1tuYW1lXTtcclxuICAgIFx0ICBcdGlmICghZy5pZ25vcmUpe1xyXG4gICAgXHQgIFx0XHRsZXQgbWluPTA7XHJcbiAgICBcdCAgXHRcdGxldCBtYXggPSAtTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgIFx0ICBcdFx0bGV0IHNjYWxlPW51bGw7XHJcbiAgICBcdCAgXHRcdGZvciAobGV0IGYgb2YgZy5mZWF0dXJlcyl7XHJcbiAgICBcdCAgXHRcdFx0IHNjYWxlPSB0aGlzLmF1dG9TY2FsZShmLG1pbixtYXgpXHJcbiAgICBcdCAgXHRcdFx0IG1pbj0gc2NhbGUubWluO1xyXG4gICAgXHQgIFx0XHRcdCBtYXg9c2NhbGUubWF4O1xyXG4gICAgXHQgIFx0XHR9XHJcbiAgICBcdCAgXHRcdGZvciAobGV0IHQgb2YgZy50cmFja3Mpe1xyXG4gICAgXHQgIFx0XHRcdHQuc2V0X3NjYWxlPXNjYWxlO1xyXG4gICAgXHQgIFx0XHR9XHJcbiAgICBcdCAgXHR9XHJcbiAgICBcdCAgfSBcclxuICAgIH1cclxuXHJcbiAgICBkcmF3SGlnaGxpZ2h0ZWRSZWdpb24ocmVnaW9uLG9wdGlvbnMpe1xyXG4gICAgXHRsZXQgc3RhcnQ9IChyZWdpb24uc3RhcnQtb3B0aW9ucy5icFN0YXJ0KS9vcHRpb25zLmJwUGVyUGl4ZWw7XHJcbiAgICBcdHN0YXJ0ID0gc3RhcnQ8MD8wOnN0YXJ0O1xyXG5cclxuICAgIFx0bGV0IHdpZHRoID0gKHJlZ2lvbi5lbmQtcmVnaW9uLnN0YXJ0KS9vcHRpb25zLmJwUGVyUGl4ZWw7XHJcbiAgICBcdHdpZHRoID0gd2lkdGg8Mz8zOndpZHRoO1xyXG4gICAgXHR3aWR0aCA9d2lkdGg+b3B0aW9ucy5waXhlbFdpZHRoP29wdGlvbnMucGl4ZWxXaWR0aDp3aWR0aDtcclxuXHRcdG9wdGlvbnMuY29udGV4dC5nbG9iYWxBbHBoYT0wLjE7XHJcblx0XHRvcHRpb25zLmNvbnRleHQuZmlsbFN0eWxlPXJlZ2lvbi5jb2xvcjtcclxuICAgIFx0b3B0aW9ucy5jb250ZXh0LmZpbGxSZWN0KHN0YXJ0LDAsd2lkdGgsb3B0aW9ucy5waXhlbEhlaWdodCk7XHJcbiAgICBcdG9wdGlvbnMuY29udGV4dC5nbG9iYWxBbHBoYT0xLjA7XHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBwYWludEltYWdlKCkge1xyXG5cclxuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd19zY2FsZSl7XHJcbiAgICAgICAgXHR0aGlzLnNjYWxlX2N0eC5jbGVhclJlY3QoMCwgMCwxMDAsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgXHR0aGlzLnNjYWxlX2N0eC5kcmF3SW1hZ2UodGhpcy5zY2FsZV9idWZmZXIsMCx0aGlzLnlPZmZzZXQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50aWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMueE9mZnNldCA9IE1hdGgucm91bmQoKHRoaXMudGlsZS5zdGFydEJQIC0gdGhpcy5zdGFydCkvdGhpcy5icFBlclBpeGVsKTtcclxuICAgICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMudGlsZS5pbWFnZSwgdGhpcy54T2Zmc2V0LCB0aGlzLnlPZmZzZXQpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFsbG93VXNlckZlYXR1cmVPdmVyKCl7XHJcbiAgICBcdGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICBcdCB0aGlzLnRyYWNrRGl2Lm9uKFwibW91c2Vtb3ZlLmZlYXR1cmVfb3ZlclwiLGZ1bmN0aW9uIChlKSB7XHJcbiAgICBcdCBcdGlmIChzZWxmLmxvYWRpbmcpe1xyXG4gICAgXHQgXHRcdHJldHVybjtcclxuICAgIFx0IFx0fVxyXG4gICAgXHQgXHRjbGVhclRpbWVvdXQoc2VsZi5tb3RvKTtcclxuICAgIFx0IFx0c2VsZi5tb3RvPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgIFx0IFx0XHRpZiAoIXNlbGYuaXNfZHJhZ2dpbmcpe1xyXG5cdFx0XHRcdFx0bGV0IGluZm89c2VsZi5nZXRGZWF0dXJlQXQoZSk7XHJcblx0XHRcdFx0XHRsZXQgaSA9IHNlbGYubW91c2Vfb3Zlcl9mZWF0dXJlO1xyXG5cdFx0XHRcdFx0aWYgKGluZm8uZmVhdHVyZSApe1xyXG5cdFx0XHRcdFx0XHRpZihpICYmIGkuZmVhdHVyZSE9PWluZm8uZmVhdHVyZSl7XHJcblx0XHRcdFx0XHRcdFx0c2VsZi5saXN0ZW5lcnMuZmVhdHVyZV9vdmVyLmZvckVhY2goKGZ1bmMpPT57ZnVuYyhpLnRyYWNrLGkuZmVhdHVyZSxlLFwib3V0XCIpfSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAoKCFpKSB8fCAoaS5mZWF0dXJlIT09aW5mby5mZWF0dXJlKSl7XHJcblx0XHRcdFx0XHRcdFx0c2VsZi5saXN0ZW5lcnMuZmVhdHVyZV9vdmVyLmZvckVhY2goKGZ1bmMpPT57ZnVuYyhpbmZvLnRyYWNrLGluZm8uZmVhdHVyZSxlLFwib3ZlclwiKX0pO1xyXG5cdFx0XHRcdFx0XHRcdHNlbGYubW91c2Vfb3Zlcl9mZWF0dXJlPWluZm87XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdGxldCBpID0gc2VsZi5tb3VzZV9vdmVyX2ZlYXR1cmVcclxuXHRcdFx0XHRcdFx0aWYgKGkpe1xyXG5cdFx0XHRcdFx0XHRcdHNlbGYubGlzdGVuZXJzLmZlYXR1cmVfb3Zlci5mb3JFYWNoKChmdW5jKT0+e2Z1bmMoaS50cmFjayxpLmZlYXR1cmUsZSxcIm91dFwiKX0pO1xyXG5cdFx0XHRcdFx0XHRcdHNlbGYubW91c2Vfb3Zlcl9mZWF0dXJlPW51bGw7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuICAgIFx0IFx0XHR9XHJcbiAgICBcdCBcdH0sMTApO1xyXG4gICAgXHQgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUZlYXR1cmVPdmVySGFuZGxlcigpe1xyXG4gICAgXHRcdHRoaXMudHJhY2tEaXYub2ZmKFwibW91c2Vkb3duLmZlYXR1cmVfb3ZlclwiKTtcclxuICAgIH1cclxuXHJcblxyXG5cdGFsbG93VXNlckZlYXR1cmVDbGljaygpe1xyXG4gICAgXHRsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgXHR0aGlzLmFsbG93VXNlckZlYXR1cmVPdmVyKCk7XHJcbiAgICBcdHRoaXMuYWRkTGlzdGVuZXIoXCJmZWF0dXJlX292ZXJcIixmdW5jdGlvbih0cmFjayxmZWF0dXJlLG92ZXIsdHlwZSl7XHJcbiAgICBcdFx0aWYoIWZlYXR1cmUpe1xyXG4gICAgXHRcdFx0c2VsZi50cmFja0Rpdi5jc3MoXCJjdXJzb3JcIixcImRlZmF1bHRcIilcclxuICAgIFx0XHR9XHJcbiAgICBcdFx0bGV0IHBvaW50ZXI9KHR5cGU9PT1cIm92ZXJcIik/XCJwb2ludGVyXCI6XCJkZWZhdWx0XCI7XHJcbiAgICBcdFx0c2VsZi50cmFja0Rpdi5jc3MoXCJjdXJzb3JcIixwb2ludGVyKTtcclxuXHJcbiAgICBcdH0pXHJcblxyXG4gICAgXHQgdGhpcy50cmFja0Rpdi5vbihcIm1vdXNlZG93bi5mZWF0dXJlX2NsaWNrXCIsZnVuY3Rpb24gKGUpIHtcclxuICAgIFx0IFx0aWYgKHNlbGYubG9hZGluZyl7XHJcbiAgICBcdCBcdFx0cmV0dXJuO1xyXG4gICAgXHQgXHR9XHJcbiAgICBcdCBcdGNsZWFyVGltZW91dChzZWxmLnRvKTtcclxuICAgIFx0IFx0c2VsZi50bz1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICBcdCBcdFx0aWYgKCFzZWxmLmlzX2RyYWdnaW5nKXtcclxuXHRcdFx0XHRcdGxldCBpbmZvPXNlbGYuZ2V0RmVhdHVyZUF0KGUpO1xyXG5cdFx0XHRcdFx0aWYgKGluZm8udHJhY2spe1xyXG5cdFx0XHRcdFx0XHRzZWxmLmxpc3RlbmVycy5mZWF0dXJlX2NsaWNrZWQuZm9yRWFjaCgoZnVuYyk9PntmdW5jKGluZm8udHJhY2ssaW5mby5mZWF0dXJlLGUpfSk7XHJcblx0XHRcdFx0XHR9XHJcbiAgICBcdCBcdFx0fVxyXG4gICAgXHQgXHR9LDIwMCk7XHJcbiAgICBcdCB9KTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbW92ZUZlYXR1cmVPdmVySGFuZGxlcigpe1xyXG4gICAgXHR0aGlzLnRyYWNrRGl2Lm9mZihcIm1vdXNlZG93bi5mZWF0dXJlX2NsaWNrXCIpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgYWxsb3dVc2VyRHJhZygpe1xyXG4gICAgXHRsZXQgc2VsZj10aGlzO1xyXG4gICAgXHQgdGhpcy50cmFja0Rpdi5vbihcIm1vdXNlZG93bi5kcmFnaGFuZGxlclwiLGZ1bmN0aW9uIChlKSB7XHJcbiAgICBcdCBcdGlmIChlLnNoaWZ0S2V5KXtcclxuICAgIFx0IFx0XHRyZXR1cm47XHJcbiAgICBcdCBcdH1cclxuICAgICAgICAgICAgdmFyIGNhbnZhc0Nvb3JkcyA9IFV0aWxzLnRyYW5zbGF0ZU1vdXNlQ29vcmRpbmF0ZXMoZSwgc2VsZi5jYW52YXMpO1xyXG4gICAgICAgICAgICBzZWxmLmlzTW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5zdGFydF9kcmFnZ2luZz10cnVlO1xyXG4gICAgICAgICAgICBzZWxmLmxhc3RNb3VzZVggPSBjYW52YXNDb29yZHMueDtcclxuICAgICAgICAgICAgc2VsZi5sYXN0TW91c2VZPSBjYW52YXNDb29yZHMueTtcclxuICAgICAgICAgICAgc2VsZi5tb3VzZURvd25YID0gc2VsZi5sYXN0TW91c2VYO1xyXG5cclxuICAgICAgICB9KVxyXG4gICAgICAgXHQub24oXCJtb3VzZW1vdmUuZHJhZ2hhbmRsZXJcIixmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBsZXQgY2FudmFzQ29vcmRzID0gVXRpbHMudHJhbnNsYXRlTW91c2VDb29yZGluYXRlcyhlLCBzZWxmLmNhbnZhcyk7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLmlzX2RyYWdnaW5nIHx8IHNlbGYuc3RhcnRfZHJhZ2dpbmcpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBjYW52YXNDb29yZHMueC1zZWxmLmxhc3RNb3VzZVg7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnBfZGlmZj1zZWxmLmJwUGVyUGl4ZWwqZGlmZjtcclxuICAgICAgICAgICAgICAgIHNlbGYuc3RhcnQtPWJwX2RpZmY7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmVuZC09YnBfZGlmZjtcclxuICAgICAgICAgICAgICAgIGxldCBkZCA9IHNlbGYuY2FudmFzLmhlaWdodC1zZWxmLnRpbGUuaW1hZ2UuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHlfZGlmZj0wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRkPDAgfHwgc2VsZi55T2Zmc2V0ICE9PTApe1xyXG4gICAgICAgICAgICAgICAgXHRsZXQgeV9kaWZmPSAgY2FudmFzQ29vcmRzLnktc2VsZi5sYXN0TW91c2VZO1xyXG4gICAgICAgICAgICAgICAgXHRzZWxmLnlPZmZzZXQrPXlfZGlmZjtcclxuICAgICAgICAgICAgICAgIFx0aWYgKHNlbGYueU9mZnNldD4wKXtcclxuICAgICAgICAgICAgICAgIFx0XHRzZWxmLnlPZmZzZXQ9MDtcclxuICAgICAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgICAgXHRlbHNlIGlmIChzZWxmLnlPZmZzZXQ8ZGQpe1xyXG5cdFx0XHRcdFx0XHRzZWxmLnlPZmZzZXQ9ZGQ7XHJcbiAgICAgICAgICAgICAgICBcdH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGYucmVwYWludCgpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0TW91c2VYPWNhbnZhc0Nvb3Jkcy54O1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0TW91c2VZPWNhbnZhc0Nvb3Jkcy55O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc3RhcnRfZHJhZ2dpbmcgJiYgKGRpZmY+NSB8fCB5X2RpZmY+NSkpe1xyXG4gICAgICAgICAgICAgICAgXHRzZWxmLmlzX2RyYWdnaW5nPXRydWU7XHJcbiAgICAgICAgICAgICAgICBcdHNlbGYuc3RhcnRfZHJhZ2dpbmc9ZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNldXAuZHJhZ2hhbmRsZXJcIixmdW5jdGlvbiAoZSkgeyAgIFxyXG4gICAgICAgICAgICAgIHNlbGYuaXNfZHJhZ2dpbmc9ZmFsc2U7XHJcbiAgICAgICAgICAgICAgc2VsZi5zdGFydF9kcmFnZ2luZz1mYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVEcmFnSGFuZGxlcigpe1xyXG4gICAgXHR0aGlzLnRyYWNrRGl2Lm9mZihcIm1vdXNlZG93bi5kcmFnaGFuZGxlciBtb3VzZW1vdmUuZHJhZ2hhbmRsZXIgbW91c2V1cC5kcmFnaGFuZGxlclwiKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0Q29vcmRzKGUpe1xyXG4gICAgXHQgbGV0IHggPSBlLnBhZ2VYIC0gJCh0aGlzLmNhbnZhcykub2Zmc2V0KCkubGVmdDtcclxuICAgICAgICAgbGV0IHkgPSBlLnBhZ2VZIC0gJCh0aGlzLmNhbnZhcykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgICByZXR1cm4ge3gseX07XHJcbiAgICBcdFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhbGxvd1VzZXJab29tKCl7XHJcbiAgICBcdGxldCBzZWxmID0gdGhpcztcclxuICAgIFx0dGhpcy50cmFja0Rpdi5vbignbW91c2V3aGVlbC56b29tICBtb3VzZS56b29tIERPTU1vdXNlU2Nyb2xsJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdFx0bGV0IGRlbHRhWT0gZXZlbnQub3JpZ2luYWxFdmVudC5kZWx0YVk7XHJcblx0XHRcdGlmIChkZWx0YVkgPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0ZGVsdGFZPWV2ZW50Lm9yaWdpbmFsRXZlbnQuZGV0YWlsXHJcblx0XHRcdH1cclxuICAgIFx0IFx0aWYgKHNlbGYubG9hZGluZyB8fCAoc2VsZi5icFBlclBpeGVsPDAuMDUgJiYgZGVsdGFZPjApKXtcclxuICAgIFx0IFx0XHRyZXR1cm47XHJcbiAgICBcdCBcdH1cclxuICAgIFx0IFx0XHJcbiAgIFxyXG4gICAgXHQgXHRsZXQgY2FudmFzQ29vcmRzID0gc2VsZi5fZ2V0Q29vcmRzKGV2ZW50Lm9yaWdpbmFsRXZlbnQpO1xyXG4gICAgICAgICAgICBsZXQgZmFjdG9yID0gZGVsdGFZPDA/MjowLjU7XHJcbiAgICAgICAgICAgIGxldCBtYnA9IChzZWxmLnN0YXJ0KyBjYW52YXNDb29yZHMueCAqIHNlbGYuYnBQZXJQaXhlbClcclxuICAgICAgICAgICAgbGV0IG5ld19sZW5ndGggPSAoc2VsZi5lbmQtc2VsZi5zdGFydCkqZmFjdG9yO1xyXG4gICAgICAgICAgICBsZXQgbmV3X3N0YXJ0ID0gbWJwLSgoY2FudmFzQ29vcmRzLngvc2VsZi5jYW52YXMud2lkdGgpKm5ld19sZW5ndGgpO1xyXG4gICAgICAgICAgICBzZWxmLnN0YXJ0PSAgbmV3X3N0YXJ0XHJcbiAgICAgICAgICAgIHNlbGYuZW5kPSBuZXdfc3RhcnQrbmV3X2xlbmd0aDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNlbGYucmVwYWludCgpOyAgICAgIFxyXG4gICAgICAgICB9KTtcclxuICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVVc2VyWm9vbSgpe1xyXG5cdFx0dGhpcy50cmFja0Rpdi5vZmYoXCJtb3VzZXdoZWVsLnpvb21cIik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgYWxsb3dVc2VyUmFuZ2VTZWxlY3Rpb24oKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy50cmFja0Rpdi5vbihcIm1vdXNlZG93bi5zZWxlY3Rpb25cIixmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zdGFydF9zZWxlY3QgPVV0aWxzLnRyYW5zbGF0ZU1vdXNlQ29vcmRpbmF0ZXMoZSx0aGlzKS54O1xyXG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSBzZWxmLnN0YXJ0X3NlbGVjdCtcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RfZGl2PSQoXCI8ZGl2PlwiKS5jc3Moe1wicG9zaXRpb25cIjpcImFic29sdXRlXCIsXCJvcGFjaXR5XCI6MC4yLFwiYmFja2dyb3VuZC1jb2xvclwiOlwiYmx1ZVwiLFwidG9wXCI6XCIwcHhcIixcImhlaWdodFwiOnRkLmNzcyhcImhlaWdodFwiKSxsZWZ0OmxlZnQsXCJ3aWR0aFwiOlwiMHB4XCJ9KVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHRkKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNlbW92ZS5zZWxlY3Rpb25cIixmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkgJiYgc2VsZi5zdGFydF9zZWxlY3Qpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHg9VXRpbHMudHJhbnNsYXRlTW91c2VDb29yZGluYXRlcyhlLHRoaXMpLng7XHJcbiAgICAgICAgICAgICAgICBpZiAoeDxzZWxmLnN0YXJ0X3NlbGVjdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RfZGl2LmNzcyh7XCJsZWZ0XCI6eCtcInB4XCIsXCJ3aWR0aFwiOihzZWxmLnN0YXJ0X3NlbGVjdC14KStcInB4XCJ9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RfZGl2LmNzcyh7XCJsZWZ0XCI6c2VsZi5zdGFydF9zZWxlY3QrXCJweFwiLFwid2lkdGhcIjooeC1zZWxmLnN0YXJ0X3NlbGVjdCkrXCJweFwifSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNldXAuc2VsZWN0aW9uXCIsZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLnN0YXJ0X3NlbGVjdCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgeD1VdGlscy50cmFuc2xhdGVNb3VzZUNvb3JkaW5hdGVzKGUsdGhpcykueDtcclxuICAgICAgICAgICAgICAgIGxldCBzdGFydCA9IHNlbGYuc3RhcnQgKyAoc2VsZi5zdGFydF9zZWxlY3Qqc2VsZi5icFBlclBpeGVsKTtcclxuICAgICAgICAgICAgICAgIGxldCBlbmQgPSAgc2VsZi5zdGFydCArICh4KnNlbGYuYnBQZXJQaXhlbCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0X3NlbGVjdD1udWxsO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RfZGl2LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0PmVuZCl7XHJcbiAgICAgICAgICAgICAgICBcdGxldCB0ZW1wPWVuZDtcclxuICAgICAgICAgICAgICAgIFx0ZW5kPXN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgXHRzdGFydD10ZW1wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5saXN0ZW5lcnMucmFuZ2Vfc2VsZWN0ZWQuZm9yRWFjaCgoZnVuYyk9PntmdW5jKHNlbGYuY2hyLHN0YXJ0LGVuZCl9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIHJlbW92ZUFsbG93U2VsZWN0aW9uKCl7XHJcbiAgICBcdHRoaXMudHJhY2tEaXYub2ZmKFwibW91c2Vkb3duLnNlbGVjdGlvbiBtb3VzZW1vdmUuc2VsZWN0aW9uIG1vdXNldXAuc2VsZWN0aW9uXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEltYWdlKCl7XHJcbiAgICBcdCB2YXIgaW1nVVJMID0gdGhpcy5jYW52YXNbMF0udG9EYXRhVVJMKE1JTUVfVFlQRSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgYWxsb3dVc2VyRHJvcCgpe1xyXG4gICAgICAgIGxldCBkaXYgPSB0aGlzLnRyYWNrRGl2O1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBkaXYuZHJvcHBhYmxlKHtcclxuICAgICAgICBcdG92ZXI6ZnVuY3Rpb24oZSx1aSl7XHJcbiAgICAgICAgXHRcdGxldCB0cmFjayA9IHVpLmRyYWdnYWJsZS5kYXRhKFwidHJhY2tcIik7XHJcbiAgICAgICAgXHRcdGxldCBwYW5lbCA9IHVpLmRyYWdnYWJsZS5kYXRhKFwicGFuZWxcIik7XHJcbiAgICAgICAgXHRcdGlmIChwYW5lbD09PXNlbGYpe1xyXG4gICAgICAgIFx0XHRcdHJldHVybjtcclxuICAgICAgICBcdFx0fVxyXG4gICAgICAgIFx0XHRpZiAgKHRyYWNrICl7XHJcbiAgICAgICAgXHRcdFx0bGV0IGljb24gPSBcIjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2hlY2snPjwvc3Bhbj5cIjtcclxuICAgICAgICBcdFx0XHRpZiAodHJhY2subm9fZHJvcCB8fCBzZWxmLnRyYWNrc1t0cmFjay50cmFja19pZF0pe1xyXG4gICAgICAgIFx0XHRcdFx0aWNvbj1cIjxzcGFuIGNsYXNzPSd1aS1pY29uICB1aS1pY29uLWNsb3NldGhpY2snPjwvc3Bhbj5cIlxyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0XHRzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgXHRcdFx0dWkuaGVscGVyLnByZXBlbmQoaWNvbikuY3NzKFwid2hpdGUtc3BhY2VcIixcIm5vd3JhcFwiKTtcclxuICAgICAgICBcdFx0XHR9LDIwKTtcclxuXHJcbiAgICAgICAgXHRcdH1cclxuICAgICAgICBcdH0sXHJcbiAgICAgICAgXHRncmVlZHk6dHJ1ZSxcclxuICAgICAgICBcdG91dDpmdW5jdGlvbihlLHVpKXtcclxuICAgICAgICBcdFx0dWkuaGVscGVyLmZpbmQoXCIudWktaWNvblwiKS5yZW1vdmUoKTtcclxuICAgICAgICBcdH0sXHJcbiAgICAgICAgICAgIGRyb3A6ZnVuY3Rpb24oZSx1aSl7XHJcbiAgICAgICAgICAgICAgICAgbGV0IHRyYWNrID0gJCh1aS5kcmFnZ2FibGVbMF0pLmRhdGEoXCJ0cmFja1wiKTtcclxuICAgICAgICAgICAgICAgICB1aS5oZWxwZXIuZmluZChcIi51aS1pY29uXCIpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICBpZiAoIXRyYWNrKXtcclxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIGxldCBwYW5lbD0kKHVpLmRyYWdnYWJsZVswXSkuZGF0YShcInBhbmVsXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICBpZiAocGFuZWw9PT1zZWxmIHx8IHRyYWNrLm5vX2Ryb3AgfHwgc2VsZi50cmFja3NbdHJhY2sudHJhY2tfaWRdKSB7ICBcclxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgXHQgaWYgKHBhbmVsKXtcclxuICAgICAgICAgICAgICAgIFx0XHQgcGFuZWwucmVtb3ZlVHJhY2sodHJhY2sudHJhY2tfaWQpO1xyXG4gICAgICAgICAgICAgICAgXHRcdCBwYW5lbC51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIFx0IH1cclxuICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkVHJhY2sodHJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIC8qKlxyXG5cdCogR2V0cyB0aGUgZmVhdHVyZSB0aGF0IHdhcyBjbGlja2VkXHJcblx0KiBAcGFyYW0ge0pRdWVyeSBFdmVudH0gZSAtIENhbiBiZSBhbnkgb2JqZWN0LSBhbGwgdGhhdCBpcyByZXF1aXJlZCBpcyBwYWdlWCBhbmQgUGFnZVlcclxuXHQqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRyYWNrIC0gdGhlIHRyYWNrIGNvbmZpZyBhdCB0aGUgZXZlbnQgcG9zaXRpb24ob3IgbnVsbCkgYW5kXHJcblx0KiBmZWF0dXJlIC0gdGhlIGZlYXR1cmUgYXQgdGhlIHBvc3RpdGlvbiAob3IgbnVsbCkuIFxyXG5cdCovXHJcblxyXG4gICAgIGdldEZlYXR1cmVBdChlKXtcclxuICAgIFx0IGxldCBjbyA9IFV0aWxzLnRyYW5zbGF0ZU1vdXNlQ29vcmRpbmF0ZXMoZSwgdGhpcy5jYW52YXMpO1xyXG4gICAgXHQgY28ueS09dGhpcy55T2Zmc2V0O1xyXG4gICAgXHQgbGV0IGdsID0gTWF0aC5yb3VuZCh0aGlzLnN0YXJ0Kyhjby54KnRoaXMuYnBQZXJQaXhlbCkpO1xyXG4gICAgXHQgZm9yIChsZXQgdCBpbiB0aGlzLnRyYWNrcyl7XHJcbiAgICBcdCBcdGxldCB0cmFjayA9IHRoaXMudHJhY2tzW3RdO1xyXG4gICAgXHQgXHRpZiAoY28ueT50cmFjay50b3AgJiYgY28ueTx0cmFjay5ib3R0b20pe1xyXG4gICAgXHQgXHRcdHJldHVybiB7dHJhY2s6dHJhY2ssXHJcbiAgICBcdCBcdFx0XHRcdGZlYXR1cmU6dHJhY2suZ2V0RmVhdHVyZUF0KGdsLHRoaXMuY2hyLGNvLHRoaXMuYnBQZXJQaXhlbCx0aGlzLmN0eCx0aGlzLnlPZmZzZXQpXHJcbiAgICBcdCBcdFx0fTtcclxuICAgIFx0IFx0fVx0XHRcclxuICAgIFx0IH1cclxuICAgIFx0IHJldHVybiB7dHJhY2s6bnVsbCxmZWF0dXJlOm51bGx9O1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgYWxsb3dVc2VyUmVzaXplKGRpcmVjdGlvbil7XHJcbiAgICBcdGxldCBoYW5kbGVzPVwiYWxsXCI7XHJcbiAgICBcdGlmIChkaXJlY3Rpb249PT1cInZlcnRpY2FsXCIpe1xyXG4gICAgXHRcdGhhbmRsZXM9XCJuLHNcIjtcclxuICAgIFx0fVxyXG4gICAgXHRlbHNlIGlmIChkaXJlY3Rpb249PT1cImhvcml6b250YWxcIil7XHJcbiAgICBcdFx0aGFuZGxlcz1cImUsd1wiO1xyXG4gICAgXHR9XHJcbiAgICAgICAgbGV0IGRpdiA9IHRoaXMudHJhY2tEaXY7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG5cdFx0XHJcbiAgICAgICAgZGl2LnJlc2l6YWJsZSh7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgcmVzaXplOmZ1bmN0aW9uKGUsdWkpe1xyXG4gICAgICAgICAgICBcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIFx0aWYgKHNlbGYubG9hZGluZyl7XHJcbiAgICAgICAgICAgIFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIFx0fVxyXG5cclxuICAgICAgICAgICAgXHRjbGVhclRpbWVvdXQoc2VsZi50byk7XHJcbiAgICAgICAgICAgIFx0c2VsZi50bz1zZXRUaW1lb3V0KGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICBcdFx0c2VsZi5zZXRXaWR0aCh1aS5zaXplLndpZHRoKTtcclxuICAgICAgICAgICAgXHRcdHNlbGYuc2V0SGVpZ2h0KHVpLnNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgXHRcdHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIFx0fSwxMDApXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFuZGxlczpoYW5kbGVzXHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgICAvKipcclxuXHQqIEFsbG93cyB0aGUgdXNlciB0byBtb3ZlIHRoZSBwYW5lbCB2aWEgYSBoYW5kbGUgaW4gdGhlXHJcblx0KiB0b3AgcmlnaHQgaGFuZCBjb3JuZXJcclxuXHQqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3Rpb24gLSBlaXRoZXIgdmVydGljYWwgb3IgaG9yem9udGFsLCB3aWxsIHJlc3RyaWN0IG1vdmVtZW50IFxyXG5cdCogaW4gdGhpcyBwbGFuZVxyXG5cdCogQHBhcmFtIHtib29sZWFufSBpZiB0cnVlIHRoZW4gdGhlIHBhbmVsIHdpbGwgYmUgY29uc3RyYWluZWQgd2l0aGluIGl0cyBwYXJlbnQgXHJcblx0Ki9cclxuICAgIGFsbG93VXNlck1vdmUoZGlyZWN0aW9uLGNvbnRhaW4pe1xyXG4gICAgXHRsZXQgYXhpcz1mYWxzZTtcclxuICAgIFx0bGV0IGljb249IFwiZmEtYXJyb3dzLWFsdFwiO1xyXG4gICAgXHRpZiAoZGlyZWN0aW9uPT1cInZlcnRpY2FsXCIpe1xyXG4gICAgXHRcdGF4aXM9XCJ5XCI7XHJcbiAgICBcdFx0aWNvbiArPVwiLXZcIjtcclxuICAgIFx0fVxyXG4gICAgXHRlbHNlIGlmIChkaXJlY3Rpb249PVwiaG9yaXpvbnRhbFwiKXtcclxuICAgIFx0XHRheGlzPVwieFwiO1xyXG4gICAgXHRcdGljb24rPVwiLWhcIjtcclxuICAgIFx0fVxyXG4gICAgXHRsZXQgZGl2ID0gdGhpcy50cmFja0RpdjtcclxuXHRcdGRpdi5maW5kKFwiLnBhbmVsLWljb24tZGl2XCIpLnByZXBlbmQoJChcIjxzcGFuIGNsYXNzPSd0cmFjay1oYW5kbGUgZmFzIFwiK2ljb24rXCInPjwvc3Bhbj5cIikuY3NzKHtcImN1cnNvclwiOlwibW92ZVwifSkpO1xyXG4gICAgICAgIGxldCBzZWxmID10aGlzO1xyXG4gICAgICAgIGxldCBjPWZhbHNlO1xyXG4gICAgICAgIGlmIChjb250YWluKXtcclxuICAgICAgICBcdGM9XCJwYXJlbnRcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGl2LmRyYWdnYWJsZSh7aGFuZGxlOlwiLnRyYWNrLWhhbmRsZVwiLGF4aXM6YXhpcyxjb250YWlubWVudDpjfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWxsb3dVc2VyQ2xvc2UoKXtcclxuXHRcdGxldCBkaXYgPSB0aGlzLnRyYWNrRGl2O1xyXG5cdFx0bGV0IHNlbGYgPXRoaXM7XHJcblx0XHRsZXQgaWNvbj0kKFwiPHNwYW4gY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9zcGFuPlwiKVxyXG5cdFx0XHRcdC5jbGljaygoKT0+e1xyXG5cdFx0XHRcdFx0ICBzZWxmLmxpc3RlbmVycy5wYW5lbF9jbG9zZWQuZm9yRWFjaCgoZnVuYyk9PntmdW5jKHNlbGYpfSk7XHJcblx0XHRcdFx0XHRcdGRpdi5yZW1vdmUoKVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0ZGl2LmZpbmQoXCIucGFuZWwtaWNvbi1kaXZcIikuYXBwZW5kKGljb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFdpZHRoKHdpZHRoKXtcclxuICAgICAgICB0aGlzLnRyYWNrRGl2LndpZHRoKHdpZHRoKTtcclxuICAgICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgd2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEhlaWdodChoZWlnaHQpe1xyXG4gICAgICAgICQodGhpcy50cmFja0RpdikuaGVpZ2h0KGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLGhlaWdodCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd19zY2FsZSl7XHJcbiAgICAgICAgXHR0aGlzLnNjYWxlX2NhbnZhc1swXS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIixoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIHJlZHJhd1RpbGUoZmVhdHVyZXMpIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnRpbGUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBjaHIgPSBzZWxmLnRpbGUuY2hyLFxyXG4gICAgICAgICAgICBicFN0YXJ0ID0gc2VsZi50aWxlLnN0YXJ0QlAsXHJcbiAgICAgICAgICAgIGJwRW5kID0gc2VsZi50aWxlLmVuZEJQLFxyXG4gICAgICAgICAgICBidWZmZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcclxuICAgICAgICAgICAgYnBQZXJQaXhlbCA9IHNlbGYudGlsZS5zY2FsZTtcclxuXHJcbiAgICAgICAgYnVmZmVyLndpZHRoID0gc2VsZi50aWxlLmltYWdlLndpZHRoO1xyXG4gICAgICAgIGJ1ZmZlci5oZWlnaHQgPSBzZWxmLnRpbGUuaW1hZ2UuaGVpZ2h0O1xyXG4gICAgICAgIHZhciBjdHggPSBidWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgIFxyXG5cclxuICAgICAgICBzZWxmLnRyYWNrLmRyYXcoe1xyXG4gICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZXMsXHJcbiAgICAgICAgICAgIGNvbnRleHQ6IGN0eCxcclxuICAgICAgICAgICAgYnBTdGFydDogYnBTdGFydCxcclxuICAgICAgICAgICAgYnBQZXJQaXhlbDogYnBQZXJQaXhlbCxcclxuICAgICAgICAgICAgcGl4ZWxXaWR0aDogYnVmZmVyLndpZHRoLFxyXG4gICAgICAgICAgICBwaXhlbEhlaWdodDogYnVmZmVyLmhlaWdodFxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgc2VsZi50aWxlID0gbmV3IFRpbGUoY2hyLCBicFN0YXJ0LCBicEVuZCwgYnBQZXJQaXhlbCwgYnVmZmVyKTtcclxuICAgICAgICBzZWxmLnBhaW50SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5jbGFzcyBUaWxle1xyXG5cdGNvbnN0cnVjdG9yIChjaHIsIHRpbGVTdGFydCwgdGlsZUVuZCwgc2NhbGUsIGltYWdlKSB7XHJcblx0XHR0aGlzLmNociA9IGNocjtcclxuXHRcdHRoaXMuc3RhcnRCUCA9IHRpbGVTdGFydDtcclxuXHRcdHRoaXMuZW5kQlAgPSB0aWxlRW5kO1xyXG5cdFx0dGhpcy5zY2FsZSA9IHNjYWxlO1xyXG5cdFx0dGhpcy5pbWFnZSA9IGltYWdlO1xyXG5cdH1cclxuXHJcblx0Y29udGFpbnNSYW5nZShjaHIsIHN0YXJ0LCBlbmQsIHNjYWxlKSB7XHJcblx0XHRpZiAoc3RhcnQ8MCl7XHJcblx0XHRcdHN0YXJ0PTA7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5zY2FsZS50b0ZpeGVkKDMpID09PSBzY2FsZS50b0ZpeGVkKDMpICYmIHN0YXJ0ID49IHRoaXMuc3RhcnRCUCAmJiBlbmQgPD0gdGhpcy5lbmRCUCAmJiBjaHIgPT09IHRoaXMuY2hyO1xyXG5cdH1cclxuXHJcblx0b3ZlcmxhcHNSYW5nZShjaHIsIHN0YXJ0LCBlbmQpIHtcclxuXHRcdHJldHVybiB0aGlzLmNociA9PT0gY2hyICYmIHRoaXMuZW5kQlAgPj0gc3RhcnQgJiYgdGhpcy5zdGFydEJQIDw9IGVuZDtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuXHQgXHJcbmV4cG9ydCB7TUxWUGFuZWx9OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBOzs7Ozs7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7O0FBS0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbENBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFtQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTNDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUEyQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBRUE7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUpBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBSkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQVFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFaQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBYUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTs7Ozs7Ozs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFJQTs7O0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUdBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFoQkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBZ0JBO0FBQ0E7OztBQUdBO0FBQ0E7QUFEQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU1BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUlBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQVNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFYQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTFDQTtBQTRDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBakJBO0FBbUJBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7Ozs7OztBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUFNQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../MLVPanel/src/panel.js\n");

/***/ }),

/***/ "../MLVPanel/src/panel_legend.js":
/*!**********************************!*\
  !*** .Panel/src/panel_legend.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.PanelLegend = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _track_dialog = __webpack_require__(/*! ./track_dialog.js */ \"../MLVPanel/src/track_dialog.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PanelLegend = function () {\n    function PanelLegend(panel, config) {\n        _classCallCheck(this, PanelLegend);\n\n        if (!config) {\n            config = {};\n        }\n\n        this.panel = panel;\n        this.track_index = {};\n        this.div = $(\"<div>\").attr({ \"class\": \"mlv-track-legend\" }).mousedown(function (e) {\n            e.stopPropagation();\n        });\n\n        if (config.draggable || config.draggable === undefined) {\n            this.div.draggable({\n                containment: \"parent\"\n            });\n        }\n\n        if (config.transparent == false || config.transparent === undefined) {\n            this.div.css(\"background-color\", \"white\");\n        }\n\n        this.li = $(\"<ul>\").css({ \"list-style-type\": \"none\", \"padding\": \"4px\", \"margin\": \"4px\" });\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = panel.track_order[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var id = _step.value;\n\n                this.addTrack(panel.tracks[id].config);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        var self = this;\n        this.div.append(this.li);\n        this.li.sortable({\n            helper: \"clone\",\n            stop: function stop(e, ui) {\n                self._reOrder(ui.item);\n            }\n        });\n\n        panel.trackDiv.append(this.div);\n    }\n\n    _createClass(PanelLegend, [{\n        key: \"swapOrder\",\n        value: function swapOrder(id1, id2) {\n            var el1 = null;\n            var el2 = null;\n            this.li.children().each(function (i, el) {\n                var e = $(el);\n                var track = e.data(\"track\");\n\n                if (track.track_id === id2) {\n                    el2 = e;\n                } else if (track.track_id === id1) {\n                    el1 = e;\n                }\n            });\n\n            el1.detach();\n            el1.insertAfter(el2);\n        }\n    }, {\n        key: \"_reOrder\",\n        value: function _reOrder(item) {\n            var group = item.data(\"track\").group;\n            var item_id = item.data(\"track\").track_id;\n            var order = [];\n            var group_index = 0;\n            var other_group_members = [];\n            this.li.children().each(function (i, el) {\n                var track = $(el).data(\"track\");\n                if (group && track.group === group) {\n                    if (track.track_id === item_id) {\n                        group_index = order.length;\n                        order.push(track.track_id);\n                    } else {\n                        other_group_members.push(track.track_id);\n                    }\n                    return;\n                }\n                order.push(track.track_id);\n            });\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = other_group_members[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var tid = _step2.value;\n\n                    order.splice(group_index + 1, 0, tid);\n                    group_index++;\n                    this.track_index[tid].detach().insertAfter(item);\n                    item = this.track_index[tid];\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            this.panel.track_order = order;\n\n            this.panel.update();\n        }\n    }, {\n        key: \"updateTrack\",\n        value: function updateTrack(track_id) {\n            var element = this.track_index[track_id];\n            var track = element.data(\"track\");\n            element.children().each(function (index, el) {\n                el = $(el);\n                if (index == 0) {\n                    el.css(\"color\", track.color);\n                } else if (index == 1) {\n                    el.text(track.short_label);\n                }\n            });\n            this.li.width(null);\n        }\n    }, {\n        key: \"addTrack\",\n        value: function addTrack(track, index) {\n            var self = this;\n            var item = $(\"<li>\").data({ track: track, panel: this.panel }).click(function (e) {\n                new _track_dialog.MLVTrackDialog(track, self.panel);\n            });\n            var span = $(\"<span>\");\n            var icon = \"fas fa-signature\";\n            if (track.format === \"feature\") {\n                icon = \"fas fa-stream\";\n            } else if (track.format === \"ruler\") {\n                icon = \"fas fa-ruler-horizontal\";\n            }\n\n            span.attr(\"class\", icon).css({ \"color\": track.color });\n            /*if (track.format==='line'){\r\n                span.height(2);\r\n            }\r\n            if (track.display===\"line\"){\r\n                span.height(4)\r\n            }\r\n            */\n            var text = $(\"<span>\").attr(\"class\", \"mlv-track-legend-text\");\n            item.append(span).append(text);\n            var t_sp = $(\"<span>\").width(15).appendTo(item);\n            if (track.allow_user_remove) {\n                var rm = $(\"<i class='fas  fa-trash'></i>\").click(function (e) {\n                    self.panel.removeTrack(track.track_id);\n                    self.removeTrack(track.track_id);\n                }).css(\"float\", \"right\").appendTo(t_sp);\n            }\n            if (index === 0) {\n                this.li.prepend(item);\n            } else if (index) {\n                var pos_el = this.li.children()[index - 1];\n                item.insertAfter($(pos_el));\n            } else {\n                this.li.append(item);\n            }\n            this.track_index[track.track_id] = item;\n            this.updateTrack(track.track_id);\n        }\n    }, {\n        key: \"removeTrack\",\n        value: function removeTrack(track_id) {\n            this.li.children().each(function (index, element) {\n                element = $(element);\n                var t = element.data(\"track\");\n                if (t && t.track_id === track_id) {\n                    element.remove();\n                }\n            });\n            delete this.track_index[track_id];\n        }\n    }, {\n        key: \"hide\",\n        value: function hide() {\n            this.div.hide();\n        }\n    }]);\n\n    return PanelLegend;\n}();\n\nexports.PanelLegend = PanelLegend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/panel_legend.js\n");

/***/ }),

/***/ "../MLVPanel/src/track_dialog.js":
/*!**********************************!*\
  !*** .Panel/src/track_dialog.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.AddTrackDialog = exports.MLVTrackDialog = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tracks = __webpack_require__(/*! ./tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MLVTrackDialog = function () {\n    function MLVTrackDialog(config, panel) {\n        _classCallCheck(this, MLVTrackDialog);\n\n        this.config = _tracks.MLVTrack.parseConfig(config);\n        this.panel = panel;\n        this.div = $(\"<div>\").attr(\"class\", \"mlv-track-dialog\");\n\n        this.div.dialog({\n            autoOpen: true,\n            close: function close() {\n                $(this).dialog('destroy').remove();\n            },\n            title: this.config.short_label,\n            width: 250,\n            draggable: true\n\n        }).dialogFix();\n\n        this.id = MLVTrackDialog.id++;\n\n        this.init();\n    }\n\n    _createClass(MLVTrackDialog, [{\n        key: \"_updatePanelScale\",\n        value: function _updatePanelScale() {\n            if (!this.panel) {\n                return;\n            }\n            this.panel.setTrackAttribute(this.config.track_id, \"max_y\", this.config.max_y);\n            this.panel.setTrackAttribute(this.config.track_id, \"min_y\", this.config.min_y);\n            this.panel.update();\n        }\n    }, {\n        key: \"_reOrderTrack\",\n        value: function _reOrderTrack(other_track) {\n            var this_i = this.panel.track_order.indexOf(this.config.track_id);\n            var other_i = this.panel.track_order.indexOf(other_track);\n            if (this_i < other_i) {\n                var temp = this.panel.track_order[this_i];\n                this.panel.track_order[this_i] = this.panel.track_order[other_i];\n                this.panel.track_order[other_i] = temp;\n                if (this.panel.legend) {\n                    this.panel.legend.swapOrder(this.config.track_id, other_track);\n                }\n            }\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var self = this;\n\n            var color_input = $(\"<input>\").attr({ type: \"color\" }).change(function (e) {\n                var color = $(this).val();\n                self.config.color = $(this).val();\n                if (self.panel) {\n                    self.panel.setTrackAttribute(self.config.track_id, \"color\", self.config.color);\n                    self.panel.update();\n                }\n            });\n            var color_div = $(\"<div class='t-d-div'></div>\");\n\n            color_div.append(\"<label>Color</label><br>\");\n            color_div.append(color_input).appendTo(this.div);\n            color_input.val(self.config.color).height(15);\n            this.div.append(\"<hr>\");\n            if (this.config.format === \"wig\") {\n                var scale_name = \"sc-ra-name-\" + this.id;\n                var scale_div = $(\"<div class='t-d-div'></div>\").append(\"<label>Scale</label><br>\");\n                scale_div.append($(\"<input>\").attr({ type: \"radio\", value: \"automatic\", checked: this.config.scale === \"automatic\", name: scale_name }));\n                scale_div.append($(\"<span>\").text(\"Automatic\"));\n                scale_div.append($(\"<input>\").attr({ type: \"radio\", value: \"fixed\", checked: this.config.scale === \"fixed\", name: scale_name }));\n                scale_div.append($(\"<span>\").text(\"Fixed\"));\n                scale_div.append($(\"<input>\").attr({ type: \"radio\", value: \"dynamic\", checked: this.config.scale === \"dynamic\", name: scale_name }));\n                scale_div.append($(\"<span>\").text(\"Dynamic\"));\n                scale_div.appendTo(this.div);\n                $(\"input[name='\" + scale_name + \"']\").click(function (e) {\n                    var scale = $(\"input[name='\" + scale_name + \"']:checked\").val();\n                    self.config.scale = scale;\n                    if (scale === \"fixed\") {\n                        self.config.scale_group = \"\";\n                        self.sg_input.val(\"\");\n                    }\n                    if (self.panel) {\n                        self.panel.setTrackAttribute(self.config.track_id, \"scale\", scale);\n                        self.panel.setTrackAttribute(self.config.track_id, \"scale_group\", self.config.scale_group);\n                        delete self.panel.tracks[self.config.track_id].max_y;\n                        self.panel.update();\n                    }\n                });\n                self.scale_slider = $(\"<div>\").slider({\n\n                    range: true,\n                    min: self.config.min_y,\n                    max: self.config.max_y,\n                    values: [self.config.min_y, self.config.max_y],\n                    slide: function slide(event, ui) {\n                        self.config.max_y = ui.values[1];\n                        self.config.min_y = ui.values[0];\n                        self._updatePanelScale();\n                        self.min_y_input.val(ui.values[0]);\n                        self.max_y_input.val(ui.values[1]);\n                    }\n                }).css(\"margin\", \"5px 3px\");\n                self.scale_slider.appendTo(scale_div);\n                self.scale_slider.slider(\"option\", \"values\", [self.config.min_y, self.config.max_y]);\n                self.min_y_input = $(\"<input>\").on(\"blur keypress\", function (e) {\n                    if (e.type === \"keypress\" && !(e.which === 13)) {\n                        return;\n                    }\n                    var y = self.min_y_input.val();\n                    y = parseFloat(y);\n                    if (y < self.config.min_y) {\n                        self.scale_slider.slider(\"option\", \"min\", y);\n                    }\n                    self.scale_slider.slider(\"option\", \"values\", [y, self.config.max_y]);\n                    self.config.min_y = y;\n                    self._updatePanelScale();\n                }).appendTo(scale_div).width(40).val(self.config.min_y);\n                self.max_y_input = $(\"<input>\").on(\"blur keypress\", function (e) {\n                    if (e.type === \"keypress\" && !(e.which === 13)) {\n                        return;\n                    }\n                    var y = self.max_y_input.val();\n                    y = parseFloat(y);\n                    var range = y - self.min_y_input.val();\n                    self.scale_slider.slider(\"option\", \"step\", range / 100);\n                    self.scale_slider.slider(\"option\", \"max\", y);\n                    self.scale_slider.slider(\"option\", \"values\", [self.config.min_y, y]);\n                    self.config.max_y = y;\n                    self._updatePanelScale();\n                }).appendTo(scale_div).width(40).css({ \"float\": \"right\" }).val(self.config.max_y);\n\n                scale_div.append(\"<br>Linked To:\");\n                var _track = this.panel.tracks[this.config.track_id];\n\n                this.link_opt = $(\"<select>\").css(\"max-width\", \"140px\").change(function (e) {\n                    var val = $(this).val();\n                    var dis = true;\n                    if (!val) {\n                        dis = false;\n                    }\n                    self.max_y_input.attr(\"disabled\", dis);\n                    self.min_y_input.attr(\"disabled\", dis);\n                    self.scale_slider.slider(\"option\", \"disabled\", dis);\n                    self._reOrderTrack(val);\n                    self.config.scale_link_to = val;\n                    self.panel.setTrackAttribute(self.config.track_id, \"scale_link_to\", val);\n\n                    self.panel.update();\n                });\n                scale_div.append(this.link_opt);\n                this.link_opt.append($(\"<option>\").val(null).text(\"none\"));\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = this.panel.track_order[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var tn = _step.value;\n\n                        var c = this.panel.tracks[tn].config;\n\n                        if (c.format !== \"wig\" || c.track_id === this.config.track_id || c.scale_link_to) {\n                            continue;\n                        }\n                        this.link_opt.append($(\"<option>\").val(c.track_id).text(c.short_label));\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                this.link_opt.val(this.config.scale_link_to);\n\n                if (this.config.scale_link_to) {\n                    this.max_y_input.attr(\"disabled\", true);\n                    this.min_y_input.attr(\"disabled\", true);\n                    this.scale_slider.slider(\"option\", \"disabled\", true);\n                }\n\n                scale_div.append(\"<br>\").append(\"<span>Scale Group:</span>\");\n                this.sg_input = $(\"<input>\").on(\"blur keypress\", function (e) {\n                    if (e.type === \"keypress\" && !(e.which === 13)) {\n                        return;\n                    }\n                    self.config.scale_group = $(this).val();\n                    self.panel.setTrackAttribute(self.config.track_id, \"scale_group\", self.config.scale_group);\n                    self.panel.update();\n                }).width(120);\n                this.sg_input.val(this.config.scale_group).appendTo(scale_div);\n\n                this.div.append(\"<hr>\");\n\n                this.div.append(\"<hr>\");\n\n                var display_name = \"di-ra-name-\" + this.id;\n                var display_div = $(\"<div class='t-d-div'></div>\").append(\"<label>Display</label><br>\");\n                display_div.append($(\"<input>\").attr({ type: \"radio\", value: \"fill\", checked: this.config.display === \"fill\" || !this.config.display_type, name: display_name }));\n                display_div.append($(\"<span>\").text(\"Fill\"));\n                display_div.append($(\"<input>\").attr({ type: \"radio\", value: \"line\", checked: this.config.display === \"line\", name: display_name }));\n                display_div.append($(\"<span>\").text(\"Line\"));\n                this.div.append(display_div);\n                $(\"input[name='\" + display_name + \"']\").click(function (e) {\n                    var display = $(\"input[name='\" + display_name + \"']:checked\").val();\n                    self.config.display = display;\n                    if (self.panel) {\n                        self.panel.setTrackAttribute(self.config.track_id, \"display\", display);\n                        self.panel.update();\n                    }\n                });\n                display_div.append(\"<br>\");\n\n                display_div.append(\"<label>group:</label>\").append(\"<br>\");\n                var input = $(\"<input>\").on(\"blur keypress\", function (e) {\n                    if (e.type === \"keypress\" && !(e.which === 13)) {\n                        return;\n                    }\n                    self.config.group = $(this).val();\n                    self.panel.setTrackAttribute(self.config.track_id, \"group\", self.config.group);\n                    self.panel.update();\n                });\n                input.val(this.config.group).appendTo(display_div);\n\n                this.div.append(\"<hr>\");\n            }\n            var discrete_div = $(\"<div>\").append(\"<label>Discrete</label>\");\n            var check = $(\"<input>\").attr({ type: \"checkbox\" }).prop(\"checked\", this.config.discrete).click(function (e) {\n                self.config.discrete = $(this).prop(\"checked\");\n                if (self.panel) {\n                    self.panel.setTrackAttribute(self.config.track_id, \"discrete\", self.config.discrete);\n                    self.panel.update();\n                }\n                if (self.config.discrete) {\n                    self.height_div.show();\n                } else {\n                    self.height_div.hide();\n                }\n            }).appendTo(discrete_div);\n            if (this.panel.fixed_height_mode) {\n                check.attr(\"disabled\", true);\n            }\n            discrete_div.appendTo(this.div);\n\n            // if (this.config.discrete || this.panel.fixed_height_mode){\n            this.height_div = $(\"<div class='t-d-div'></div>\");\n\n            this.height_div.append(\"<label>height:</label>\").appendTo(this.div);\n\n            var height_slider = $(\"<div>\").slider({\n                min: 10,\n                max: 500,\n                value: self.config.height,\n                slide: function slide(event, ui) {\n                    self.config.height = ui.value;\n                    self.panel.setTrackAttribute(self.config.track_id, \"height\", self.config.height);\n                    self.panel.update();\n                }\n            }).css({ \"margin\": \"5px 3px\" });\n            height_slider.appendTo(this.height_div);\n            if (!self.panel.fixed_height_mode) {\n                if (!self.config.discrete) {\n                    this.height_div.hide();\n                }\n            }\n\n            if (this.config.format === \"feature\" || this.config.type === \"bam\") {\n\n                var feature_div = $(\"<div>\").append(\"<label>Feature Height</label><br>\");\n                self.feature_height_slider = $(\"<div>\").slider({\n                    max: 40,\n                    min: 3,\n                    slide: function slide(e, ui) {\n                        self.config.featureHeight = ui.value;\n                        if (self.panel) {\n                            self.panel.setTrackAttribute(self.config.track_id, \"featureHeight\", self.config.featureHeight);\n                            self.panel.update();\n                        }\n                    }\n                });\n                self.feature_height_slider.slider(\"option\", \"value\", self.config.featureHeight);\n                feature_div.append(self.feature_height_slider).appendTo(this.div);\n                this.div.append(\"<hr>\");\n            }\n            if (this.config.format === \"feature\") {\n\n                var feature_display_div = $(\"<div>\").append(\"<label>Display</label><br>\");\n\n                self.feature_display_select = $(\"<select>\").append(\"<option>EXPANDED</option>\").append(\"<option>SQUISHED</option>\").append(\"<option>COLLAPSED</option>\").change(function (e) {\n                    self.config.displayMode = $(this).val();\n                    if (self.panel) {\n                        self.panel.setTrackAttribute(self.config.track_id, \"displayMode\", self.config.displayMode);\n                        self.panel.update();\n                    }\n                }).val(self.config.displayMode);\n                feature_display_div.append(self.feature_display_select).appendTo(this.div);\n                this.div.append(\"<hr>\");\n            }\n\n            var op_div = $(\"<div>\").append(\"<label>Opacity</label><br>\");\n\n            self.opacity_slider = $(\"<div>\").slider({\n                max: 1.0,\n                min: 0.0,\n                step: 0.05,\n                slide: function slide(e, ui) {\n                    self.config.opacity = ui.value;\n                    if (self.panel) {\n                        self.panel.setTrackAttribute(self.config.track_id, \"opacity\", self.config.opacity);\n                        self.panel.update();\n                    }\n                }\n            });\n            op_div.append(self.opacity_slider).appendTo(this.div);\n            self.opacity_slider.slider(\"option\", \"value\", self.config.opacity);\n            var track = this.panel.tracks[this.config.track_id];\n            track.addExtraControls(this);\n\n            var p = this.div.parent();\n        }\n    }]);\n\n    return MLVTrackDialog;\n}();\n\nvar AddTrackDialog = function () {\n    function AddTrackDialog(callback, config) {\n        _classCallCheck(this, AddTrackDialog);\n\n        if (!config) {\n            config = {};\n        }\n        this.config = config;\n        this.div = $(\"<div>\").attr(\"class\", \"add-track-dialog\");\n        this.id = MLVTrackDialog.id++;\n        this.callback = callback;\n        var self = this;\n        this.div.dialog({\n            autoOpen: true,\n            buttons: [{\n                text: \"Add\",\n                click: function click(e) {\n                    self.getConfig();\n                    $(this).dialog(\"close\");\n                }\n            }],\n            close: function close() {\n                $(this).dialog('destroy').remove();\n            },\n            title: \"Add Track\",\n            width: 250\n\n        }).dialogFix();\n\n        this.init();\n    }\n\n    _createClass(AddTrackDialog, [{\n        key: \"getConfig\",\n        value: function getConfig() {\n            var type = $(\"input[name='\" + this.type_radio + \"']:checked\").val();\n            var config = { url: this.url_input.val(), type: type, short_label: this.name_input.val() };\n            this.callback(config);\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var self = this;\n            this.div.append(\"<label>Paste URL</label>\");\n            this.url_input = $(\"<textarea>\").appendTo(this.div).css({ width: \"95%\" });\n            this.url_input.on(\"blur keypress\", function (e) {\n                if (e.originalEvent.type === \"keypress\" && e.charCode !== 13) {\n                    return;\n                }\n                self._getInfoFromUrl($(this).val());\n            });\n            this.div.append($(\"<label>Name</label>\"));\n            this.name_input = $(\"<input>\").appendTo(this.div);\n            this.div.append($(\"<label>Type</label>\"));\n            var radio_div = $(\"<div>\").appendTo(this.div);\n            this.type_radio = 'track-add-radio-' + this.id;\n            for (var type in _tracks.MLVTrack.track_types) {\n                if (this.config.allowed_track_types && this.config.allowed_track_types.indexOf(type) === -1) {\n                    continue;\n                }\n                this.addRadioButton(radio_div, type);\n            }\n        }\n    }, {\n        key: \"setAddFunction\",\n        value: function setAddFunction(func) {\n            this.callback = callback;\n        }\n    }, {\n        key: \"_getInfoFromUrl\",\n        value: function _getInfoFromUrl(url) {\n            var type = _tracks.MLVTrack.getTypeFromURL(url).type;\n            var name = _tracks.MLVTrack.calculateLabel(url);\n            if (url.includes(\"hgTracks\")) {\n                name = \"UCSC Session\";\n                type = \"ucsc_track\";\n            }\n            this.name_input.val(name);\n            $(\"[name='\" + this.type_radio + \"']\").val([type]);\n        }\n    }, {\n        key: \"addRadioButton\",\n        value: function addRadioButton(div, type) {\n            var sp = $(\"<span>\").css({ \"display\": \"inline-block\", \"margin-right\": \"3px\" });\n            sp.append($(\"<input>\").attr({ type: \"radio\", value: type, name: this.type_radio }));\n            sp.append($(\"<span>\").text(_tracks.MLVTrack.track_types[type].name));\n            div.append(sp);\n        }\n    }]);\n\n    return AddTrackDialog;\n}();\n\nMLVTrackDialog.id = 0;\n\nexports.MLVTrackDialog = MLVTrackDialog;\nexports.AddTrackDialog = AddTrackDialog;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/track_dialog.js\n");

/***/ }),

/***/ "../MLVPanel/src/tracks.js":
/*!****************************!*\
  !*** .Panel/src/tracks.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Graphics = exports.MLVBigBedTrack = exports.RulerTrack = exports.MLVBedTrack = exports.MLVWigTrack = exports.MLVTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\nhe MIT License (MIT)\r\nr\nopyright (c) 2014 Broad Institute\r\nr\nermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * The above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nr\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nr\nr\nn\nvar _bigwig = __webpack_require__(/*! ./bigwig.js */ \"../MLVPanel/src/bigwig.js\");\n\nvar _feature = __webpack_require__(/*! ./feature.js */ \"../MLVPanel/src/feature.js\");\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MLVTrack = function () {\n  function MLVTrack(config) {\n    _classCallCheck(this, MLVTrack);\n\n    this.config = config;\n  }\n\n  _createClass(MLVTrack, [{\n    key: \"_setFeatureSource\",\n    value: function _setFeatureSource() {\n      //overriden by tracks with feature sources\n    }\n  }, {\n    key: \"drawScale\",\n    value: function drawScale(ctx) {\n      //overidden in tracks with scale\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return $.extend(true, {}, this.config);\n    }\n  }, {\n    key: \"setConfigAttribute\",\n    value: function setConfigAttribute(attribute, value) {\n      this.config[attribute] = value;\n      if (attribute === \"url\") {\n        this._setFeatureSource();\n      }\n    }\n  }, {\n    key: \"getFeatureAt\",\n    value: function getFeatureAt(genomicLocation, chr, yOffset, bpPerPixel) {\n      return null;\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      if (this.config.url !== config.url) {\n        this.config = config;\n        this._setFeatureSource();\n      } else {\n        this._setFeatureSource();\n      }\n    }\n\n    /**\r\n    * Reteives the features requested, the default is just to get the features\r\n    * from the feature source \r\n    * @param {string} chr - The chromosome \r\n    * @param {integer} start - The start of the range from which to obtain features\r\n    * @param {integer} end - The end of the range from which to obtain features \r\n    * @param {boolean} force - If true then cached features should not be used\r\n    * but fresh features retrieved\r\n    * @param {Object} data - contains bp  ber pixel and width of the canvas \r\n    */\n\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(chr, bpStart, bpEnd, force, data) {\n      return this.feature_source.getFeatures(chr, bpStart, bpEnd, force, data);\n    }\n  }, {\n    key: \"addExtraControls\",\n    value: function addExtraControls(div, panel) {}\n  }], [{\n    key: \"calculateLabel\",\n    value: function calculateLabel(url) {\n      if (typeof url !== \"string\") {\n        url = url[0];\n      }\n      var arr = url.split(\"/\");\n      var label = arr[arr.length - 1];\n      arr = label.split(\".\");\n      label = arr[0];\n      return label;\n    }\n  }, {\n    key: \"getTypeFromURL\",\n    value: function getTypeFromURL(url) {\n      var config = {};\n      if (typeof url !== \"string\") {\n        return config;\n      }\n      if (url.endsWith(\"bw\")) {\n        config.type = \"bigwig\";\n        config.format = \"wig\";\n      } else if (url.endsWith(\".bed.gz\")) {\n        config.type = \"bed\";\n        config.format = \"feature\";\n      } else if (url.endsWith(\".bb\") && !config.type) {\n        config.type = \"bigbed\";\n        config.format = \"feature\";\n      } else if (url.endsWith(\".fasta\")) {\n        config.type = \"fasta\";\n        config.format = \"sequence\";\n      } else if (url.endsWith(\".bam\")) {\n        config.type = \"bam\";\n        config.format = \"alignment\";\n      }\n      return config;\n    }\n  }, {\n    key: \"parseConfig\",\n    value: function parseConfig(con) {\n      var config = $.extend(true, {}, con);\n\n      if (!config.type && config.url) {\n        var info = MLVTrack.getTypeFromURL(config.url);\n        if (info.type) {\n          config.type = info.type;\n          config.format = info.format;\n        }\n      }\n      if (config.type === \"bed\" || config.type === \"bigbed\") {\n        config.format = \"feature\";\n      }\n      if (!config.short_label && config.url) {\n        config.short_label = MLVTrack.calculateLabel(config.url);\n      }\n\n      if (!config.track_id) {\n        config.track_id = config.url;\n      }\n\n      if (config.format === \"feature\") {\n        config.displayMode = config.displayMode || \"COLLAPSED\"; // COLLAPSED | EXPANDED | SQUISHED\n        config.labelDisplayMode = \"SLANT\";\n        config.squishedCallHeight = config.squishedCallHeight || 30;\n        config.expandedCallHeight = config.expandedCallHeight || 15;\n        config.featureHeight = config.featureHeight || 12;\n      }\n\n      if (config.format === \"wig\" || config.type === \"bigwig\") {\n        if (!config.scale) {\n          config.scale = \"dynamic\";\n        }\n        if (!config.min_y) {\n          config.min_y = 0;\n        }\n        if (!config.max_y) {\n          config.max_y = 100;\n        }\n        if (!config.height) {\n          config.height = 100;\n        }\n      }\n      if (config.type === \"bam\") {\n        if (!config.featureHeight) {\n          config.featureHeight = 12;\n        }\n      }\n      if (!config.height) {\n        config.height = 100;\n      }\n\n      if (!config.color) {\n        if (config.type === \"bam\") {\n          config.color = \"#D3D3D3\";\n        } else {\n          config.color = \"black\";\n        }\n      }\n      if (!config.opacity) {\n        config.opacity = 1.0;\n      }\n\n      return config;\n    }\n  }, {\n    key: \"getTrack\",\n    value: function getTrack(config) {\n      config = MLVTrack.parseConfig(config);\n      var cl = MLVTrack.track_types[config.type];\n      if (!cl) {\n        throw new Error(\"Track type \" + config.type + \" not recognised\");\n      }\n      return new cl[\"class\"](config);\n    }\n  }]);\n\n  return MLVTrack;\n}();\n\nMLVTrack.custom_tracks = {};\n\nMLVTrack.track_types = {};\n\n//*******************js/rulerTrack.js**********************\n\n\nvar RulerTrack = function (_MLVTrack) {\n  _inherits(RulerTrack, _MLVTrack);\n\n  function RulerTrack(config) {\n    _classCallCheck(this, RulerTrack);\n\n    if (!config) {\n      config = { \"track_id\": \"ruler\" + RulerTrack.count, format: \"ruler\", short_label: \"Ruler\", type: \"ruler\" };\n    }\n\n    var _this = _possibleConstructorReturn(this, (RulerTrack.__proto__ || Object.getPrototypeOf(RulerTrack)).call(this, config));\n\n    _this.height = 30;\n    _this.config.height = 30;\n    _this.name = \"\";\n\n    _this.disableButtons = true;\n    _this.ignoreTrackMenu = true;\n    _this.order = -Number.MAX_VALUE;\n\n    RulerTrack.count++;\n    return _this;\n  }\n\n  _createClass(RulerTrack, [{\n    key: \"getFeatures\",\n    value: function getFeatures(chr, bpStart, bpEnd) {\n\n      return new Promise(function (fulfill, reject) {\n        fulfill([]);\n      });\n    }\n  }, {\n    key: \"drawFeatures\",\n    value: function drawFeatures(options) {\n\n      var fontStyle,\n          ctx = options.context,\n          range,\n          ts,\n          spacing,\n          nTick,\n          x;\n\n      fontStyle = { textAlign: 'center', font: '10px PT Sans', fillStyle: \"rgba(64, 64, 64, 1)\", strokeStyle: \"rgba(64, 64, 64, 1)\" };\n\n      range = Math.floor(1100 * options.bpPerPixel);\n      ts = RulerTrack.findSpacing(range);\n      spacing = ts.majorTick;\n\n      // Find starting point closest to the current origin\n      nTick = Math.floor(options.bpStart / spacing) - 1;\n      x = 0;\n      var y_pos = options.top + this.height;\n      //canvas.setProperties({textAlign: 'center'});\n      Graphics.setProperties(ctx, fontStyle);\n      while (x < options.pixelWidth) {\n\n        var l = Math.floor(nTick * spacing),\n            shim = 2;\n\n        x = Math.round((l - 1 - options.bpStart + 0.5) / options.bpPerPixel);\n        var chrPosition = formatNumber(l / ts.unitMultiplier, 0) + \" \" + ts.majorUnit;\n\n        if (nTick % 1 == 0) {\n          Graphics.fillText(ctx, chrPosition, x, y_pos - 15);\n        }\n\n        Graphics.strokeLine(ctx, x, y_pos - 10, x, y_pos - shim);\n\n        nTick++;\n      }\n      Graphics.strokeLine(ctx, 0, y_pos - shim, options.pixelWidth, y_pos - shim);\n\n      function formatNumber(anynum, decimal) {\n        //decimal  - the number of decimals after the digit from 0 to 3\n        //-- Returns the passed number as a string in the xxx,xxx.xx format.\n        //anynum = eval(obj.value);\n        var divider = 10;\n        switch (decimal) {\n          case 0:\n            divider = 1;\n            break;\n          case 1:\n            divider = 10;\n            break;\n          case 2:\n            divider = 100;\n            break;\n          default:\n            //for 3 decimal places\n            divider = 1000;\n        }\n\n        var workNum = Math.abs(Math.round(anynum * divider) / divider);\n\n        var workStr = \"\" + workNum;\n\n        if (workStr.indexOf(\".\") == -1) {\n          workStr += \".\";\n        }\n\n        var dStr = workStr.substr(0, workStr.indexOf(\".\"));\n        var dNum = dStr - 0;\n        var pStr = workStr.substr(workStr.indexOf(\".\"));\n\n        while (pStr.length - 1 < decimal) {\n          pStr += \"0\";\n        }\n\n        if (pStr == '.') pStr = '';\n\n        //--- Adds a comma in the thousands place.\n        if (dNum >= 1000) {\n          var dLen = dStr.length;\n          dStr = parseInt(\"\" + dNum / 1000) + \",\" + dStr.substring(dLen - 3, dLen);\n        }\n\n        //-- Adds a comma in the millions place.\n        if (dNum >= 1000000) {\n          dLen = dStr.length;\n          dStr = parseInt(\"\" + dNum / 1000000) + \",\" + dStr.substring(dLen - 7, dLen);\n        }\n        var retval = dStr + pStr;\n        //-- Put numbers in parentheses if negative.\n        if (anynum < 0) {\n          retval = \"(\" + retval + \")\";\n        }\n\n        //You could include a dollar sign in the return value.\n        //retval =  \"$\"+retval\n        return retval;\n      }\n      return y_pos;\n    }\n  }], [{\n    key: \"findSpacing\",\n    value: function findSpacing(maxValue) {\n\n      if (maxValue < 10) {\n        return new TickSpacing(1, \"\", 1);\n      }\n\n      // Now man zeroes?\n      var nZeroes = Math.floor(log10(maxValue));\n      var majorUnit = \"\";\n      var unitMultiplier = 1;\n      if (nZeroes > 9) {\n        majorUnit = \"gb\";\n        unitMultiplier = 1000000000;\n      }\n      if (nZeroes > 6) {\n        majorUnit = \"mb\";\n        unitMultiplier = 1000000;\n      } else if (nZeroes > 3) {\n        majorUnit = \"kb\";\n        unitMultiplier = 1000;\n      }\n\n      var nMajorTicks = maxValue / Math.pow(10, nZeroes - 1);\n      if (nMajorTicks < 25) {\n        return new TickSpacing(Math.pow(10, nZeroes - 1), majorUnit, unitMultiplier);\n      } else {\n        return new TickSpacing(Math.pow(10, nZeroes) / 2, majorUnit, unitMultiplier);\n      }\n\n      function log10(x) {\n        var dn = Math.log(10);\n        return Math.log(x) / dn;\n      }\n    }\n  }]);\n\n  return RulerTrack;\n}(MLVTrack);\n\nRulerTrack.count = 0;\n\nMLVTrack.track_types[\"ruler\"] = {\n  \"class\": RulerTrack,\n  name: \"Ruler\"\n\n};\n\nvar TickSpacing = function TickSpacing(majorTick, majorUnit, unitMultiplier) {\n  _classCallCheck(this, TickSpacing);\n\n  this.majorTick = majorTick;\n  this.majorUnit = majorUnit;\n  this.unitMultiplier = unitMultiplier;\n};\n\nvar MLVBedTrack = function (_MLVTrack2) {\n  _inherits(MLVBedTrack, _MLVTrack2);\n\n  function MLVBedTrack(config) {\n    _classCallCheck(this, MLVBedTrack);\n\n    var _this2 = _possibleConstructorReturn(this, (MLVBedTrack.__proto__ || Object.getPrototypeOf(MLVBedTrack)).call(this, config));\n\n    _this2._setFeatureSource();\n    _this2.filter_function = null;\n    _this2.color_function = null;\n\n    return _this2;\n  }\n\n  _createClass(MLVBedTrack, [{\n    key: \"_setFeatureSource\",\n    value: function _setFeatureSource() {\n      this.feature_source = new _feature.TabixBedFeatureSource(this.config);\n    }\n  }, {\n    key: \"setFilterFunction\",\n    value: function setFilterFunction(func) {\n      this.filter_function = func;\n    }\n  }, {\n    key: \"setColorFunction\",\n    value: function setColorFunction(func) {\n      this.color_function = func;\n    }\n  }, {\n    key: \"getCurrentFeatures\",\n    value: function getCurrentFeatures(chr, start, end) {\n      return this.feature_source.featureCache.queryFeatures(chr, start, end);\n    }\n  }, {\n    key: \"drawFeatures\",\n    value: function drawFeatures(options) {\n      var max_y_val = 0;\n      var track = this,\n          py,\n          featureList = options.features,\n          ctx = options.context,\n          bpPerPixel = options.bpPerPixel,\n          bpStart = options.bpStart,\n          pixelWidth = options.pixelWidth,\n          pixelHeight = options.pixelHeight,\n          offset = 0,\n          bpEnd = bpStart + pixelWidth * bpPerPixel + 1;\n      var top = 0;\n      if (options.top) {\n        top = options.top;\n      }\n      this.top = top;\n      var conf = this.config;\n      var windowX = 0;\n      var windowX1 = windowX + pixelWidth;\n\n      this.config.squishedCallHeight = this.config.featureHeight + 10;\n      this.config.expandedCallHeight = this.config.featureHeight / 2 + 2;\n      var ki = null;\n      if (featureList.length > 50000) {\n        ki = Math.round(featureList.length / 50000) + 1;\n      }\n\n      if (featureList) {\n        var opacity = this.config.opacity ? this.config.opacity : 1;\n        ctx.globalAlpha = opacity;\n\n        for (var gene, i = 0, len = featureList.length; i < len; i++) {\n          if (ki && i % ki !== 0) {\n            continue;\n          }\n          gene = featureList[i];\n          if (this.filter_function && !this.filter_function(gene)) {\n            gene.display = false;\n            continue;\n          }\n          gene.display = true;\n          if (gene.end < bpStart) continue;\n          if (gene.start > bpEnd) break;\n          var coord = this.calculateFeatureCoordinates(gene, bpStart, bpPerPixel);\n          var h = conf.featureHeight;\n          if (conf.displayMode === \"SQUISHED\" && gene.row != undefined) {\n            h = conf.featureHeight / 2;\n            py = conf.expandedCallHeight * gene.row + 2;\n          } else if (conf.displayMode === \"EXPANDED\" && gene.row != undefined) {\n            py = conf.squishedCallHeight * gene.row + 5;\n          } else {\n            // collapsed\n            py = 5;\n          }\n          py += top;\n          if (py + h > max_y_val) {\n            max_y_val = py + h;\n          }\n          coord.py = py;\n          coord.h = h;\n          var info = { bpPerPixel: bpPerPixel, bpStart: bpStart, pixelWidth: pixelWidth };\n          if (this.color_function) {\n            gene.color = this.color_function(gene);\n          }\n\n          this.renderFeature(gene, coord, ctx, info);\n          this.renderFeatureLabel(ctx, gene, coord.px, coord.px1, py, windowX, windowX1);\n        }\n        ctx.globalAlpha = 1;\n      } else {\n        console.log(\"No feature list\");\n      }\n      this.bottom = max_y_val;\n      if (this.config.displayMode === \"COLLAPSED\") {\n        max_y_val += 25;\n      }\n      return max_y_val;\n    }\n\n    /**\r\n       * @param ctx       the canvas 2d context\r\n       * @param feature\r\n       * @param featureX  feature start x-coordinate\r\n       * @param featureX1 feature end x-coordinate\r\n       * @param featureY  feature y-coordinate\r\n       * @param windowX   visible window start x-coordinate\r\n       * @param windowX1  visible window end x-coordinate\r\n       */\n\n  }, {\n    key: \"renderFeatureLabel\",\n    value: function renderFeatureLabel(ctx, feature, featureX, featureX1, featureY, windowX, windowX1) {\n      var info = this.config;\n      var geneColor, geneFontStyle, transform, boxX, boxX1, // label should be centered between these two x-coordinates\n      labelX, labelY, textFitsInBox;\n\n      // feature outside of viewable window\n      if (featureX1 < windowX || featureX > windowX1) {\n        boxX = featureX;\n        boxX1 = featureX1;\n      } else {\n        // center label within visible portion of the feature\n        boxX = Math.max(featureX, windowX);\n        boxX1 = Math.min(featureX1, windowX1);\n      }\n\n      var text = feature.name;\n      if (this.label_function) {\n        text = this.label_function(feature);\n      }\n\n      //if (igv.browser.selection && \"genes\" === this.config.type && feature.name !== undefined) {\n      // TODO -- for gtex, figure out a better way to do this\n      //geneColor = igv.browser.selection.colorForGene(feature.name);\n      //  }\n\n      textFitsInBox = boxX1 - boxX > ctx.measureText(text).width;\n      //geneColor=\"black\";\n\n      if ((textFitsInBox || geneColor) && info.displayMode != \"SQUISHED\" && text) {\n        geneFontStyle = {\n          font: '10px PT Sans',\n          textAlign: 'center',\n          fillStyle: geneColor || info.color,\n          strokeStyle: geneColor || info.color\n        };\n\n        if (info.displayMode === \"COLLAPSED\" && info.labelDisplayMode === \"SLANT\") {\n          transform = { rotate: { angle: 45 } };\n          delete geneFontStyle.textAlign;\n        }\n\n        labelX = boxX + (boxX1 - boxX) / 2;\n        labelY = getFeatureLabelY(featureY, transform);\n\n        Graphics.fillText(ctx, text, labelX, labelY, geneFontStyle, transform);\n      }\n      function getFeatureLabelY(featureY, transform) {\n        return transform ? featureY + info.featureHeight + 14 : featureY + info.featureHeight + 7;\n      }\n    }\n  }, {\n    key: \"calculateFeatureCoordinates\",\n    value: function calculateFeatureCoordinates(feature, bpStart, xScale) {\n      var px = Math.round((feature.start - bpStart) / xScale),\n          px1 = Math.round((feature.end - bpStart) / xScale),\n          pw = px1 - px;\n\n      if (pw < 3) {\n        pw = 3;\n        px -= 1;\n      }\n\n      return {\n        px: px,\n        px1: px1,\n        pw: pw\n      };\n    }\n\n    /**\r\n        * Renders the feature to the canvas\r\n        * @param feature - The feature itself\r\n        * @param coord An object containing information on where to draw the feature\r\n        * px1,px2 the left and right pixels - pw - the width\r\n        * py the top, h - the height\r\n        * @param ctx - The context to draw the feature\r\n        * @param info - An object containing information about the genomic location\r\n        * bpStart.bpPerPixel and pixelWidth\r\n        * \r\n        */\n\n  }, {\n    key: \"renderFeature\",\n    value: function renderFeature(feature, coord, ctx, info) {\n      var e,\n          x,\n          cy,\n          direction,\n          exon,\n          ePx,\n          ePx1,\n          ePxU,\n          ePw,\n          py2,\n          h2,\n          step = 20,\n          color = this.config.color;\n      if (feature.color) {\n        color = feature.color;\n      }\n\n      ctx.fillStyle = color;\n      ctx.strokeStyle = color;\n\n      cy = coord.py + coord.h / 2;\n      h2 = coord.h / 2;\n      py2 = cy - h2 / 2;\n\n      var exonCount = feature.exons ? feature.exons.length : 0;\n      if (exonCount == 0) {\n        // single-exon transcript\n        ctx.fillRect(coord.px, coord.py, coord.pw, coord.h);\n      } else {\n        // multi-exon transcript\n        coord.px = Math.max(coord.px, 0);\n        coord.px1 = Math.min(coord.px1, info.pixelWidth);\n        Graphics.strokeLine(ctx, coord.px + 1, cy, coord.px1 - 1, cy); // center line for introns\n        direction = feature.strand == '+' ? 1 : -1;\n\n        for (x = coord.px + step / 2; x < coord.px1; x += step) {\n\n          // draw arrowheads along central line indicating transcribed orientation\n          Graphics.strokeLine(ctx, x - direction * 2, cy - 2, x, cy);\n          Graphics.strokeLine(ctx, x - direction * 2, cy + 2, x, cy);\n        }\n        for (e = 0; e < exonCount; e++) {\n          // draw the exons\n          exon = feature.exons[e];\n          ePx = Math.round((exon.start - info.bpStart) / info.bpPerPixel);\n          ePx1 = Math.round((exon.end - info.bpStart) / info.bpPerPixel);\n          ePw = Math.max(1, ePx1 - ePx);\n\n          if (exon.utr) {\n            ctx.fillRect(ePx, py2, ePw, h2); // Entire exon is UTR\n          } else {\n            if (exon.cdStart) {\n              ePxU = Math.round((exon.cdStart - info.bpStart) / info.bpPerPixel);\n              ctx.fillRect(ePx, py2, ePxU - ePx, h2); // start is UTR\n              ePw -= ePxU - ePx;\n              ePx = ePxU;\n            }\n            if (exon.cdEnd) {\n              ePxU = Math.round((exon.cdEnd - info.bpStart) / info.bpPerPixel);\n              ctx.fillRect(ePxU, py2, ePx1 - ePxU, h2); // start is UTR\n              ePw -= ePx1 - ePxU;\n              ePx1 = ePxU;\n            }\n\n            ctx.fillRect(ePx, coord.py, ePw, coord.h);\n\n            // Arrows\n            if (ePw > step + 5) {\n              ctx.fillStyle = \"white\";\n              ctx.strokeStyle = \"white\";\n              for (x = ePx + step / 2; x < ePx1; x += step) {\n                // draw arrowheads along central line indicating transcribed orientation\n                Graphics.strokeLine(ctx, x - direction * 2, cy - 2, x, cy);\n                Graphics.strokeLine(ctx, x - direction * 2, cy + 2, x, cy);\n              }\n              ctx.fillStyle = color;\n              ctx.strokeStyle = color;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getFeatureAt\",\n    value: function getFeatureAt(genomicLocation, chr, coord, bpPerPixel) {\n      var yOffset = coord.y - this.top;\n      // We use the featureCache property rather than method to avoid async load.  If the\n      // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.\n      if (this.feature_source.featureCache) {\n\n        var tolerance = 2 * bpPerPixel,\n            // We need some tolerance around genomicLocation, start with +/- 2 pixels\n        featureList = this.feature_source.featureCache.queryFeatures(chr, genomicLocation - tolerance, genomicLocation + tolerance),\n            row;\n\n        if (this.config.displayMode != \"COLLAPSED\") {\n          row = Math.floor(this.config.displayMode === \"SQUISHED\" ? yOffset / this.config.expandedCallHeight : yOffset / this.config.squishedCallHeight);\n        }\n\n        if (featureList && featureList.length > 0) {\n\n          var popupData = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var feature = _step.value;\n\n              if (feature.end >= genomicLocation - tolerance && feature.start <= genomicLocation + tolerance) {\n\n                // If row number is specified use it\n                if ((row === undefined || feature.row === undefined || row === feature.row) && feature.display) {\n                  return feature;\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return MLVBedTrack;\n}(MLVTrack);\n\nMLVTrack.track_types[\"bed\"] = {\n  \"class\": MLVBedTrack,\n  name: \"bed(tabix)\"\n};\n\nvar MLVBigBedTrack = function (_MLVBedTrack) {\n  _inherits(MLVBigBedTrack, _MLVBedTrack);\n\n  function MLVBigBedTrack(config) {\n    _classCallCheck(this, MLVBigBedTrack);\n\n    return _possibleConstructorReturn(this, (MLVBigBedTrack.__proto__ || Object.getPrototypeOf(MLVBigBedTrack)).call(this, config));\n  }\n\n  _createClass(MLVBigBedTrack, [{\n    key: \"_setFeatureSource\",\n    value: function _setFeatureSource() {\n      this.feature_source = new _feature.BigBedFeatureSource(this.config);\n    }\n  }]);\n\n  return MLVBigBedTrack;\n}(MLVBedTrack);\n\nMLVTrack.track_types[\"bigbed\"] = {\n  \"class\": MLVBigBedTrack,\n  \"name\": \"BigBed\"\n\n};\n\nvar MLVWigTrack = function (_MLVTrack3) {\n  _inherits(MLVWigTrack, _MLVTrack3);\n\n  function MLVWigTrack(config) {\n    _classCallCheck(this, MLVWigTrack);\n\n    config.format = \"wig\";\n\n    var _this4 = _possibleConstructorReturn(this, (MLVWigTrack.__proto__ || Object.getPrototypeOf(MLVWigTrack)).call(this, config));\n\n    _this4._setFeatureSource();\n    return _this4;\n  }\n\n  _createClass(MLVWigTrack, [{\n    key: \"_setFeatureSource\",\n    value: function _setFeatureSource() {\n      this.feature_source = new _bigwig.BWSource(this.config);\n    }\n  }, {\n    key: \"drawScale\",\n    value: function drawScale(pixel_height, ctx) {\n      if (this.config.scale_link_to && this.config.group) {\n        return;\n      }\n      var bot = pixel_height;\n      var top = 0;\n\n      if (this.config.discrete) {\n        top = this.top;\n        bot = this.bottom;\n      }\n      var range = this.max_y - this.min_y;\n\n      ctx.beginPath();\n      ctx.moveTo(0, top);\n      ctx.lineTo(0, bot);\n      ctx.moveTo(0, top);\n      ctx.lineTo(20, top);\n      ctx.moveTo(0, bot);\n      ctx.lineTo(20, bot);\n      ctx.font = \"12px Arial\";\n      ctx.stroke();\n      ctx.textBaseline = \"top\";\n      ctx.fillStyle = \"black\";\n      ctx.fillText(this.max_y.toFixed(2), 20, top);\n      ctx.textBaseline = \"alphabetic\";\n      ctx.fillText(this.min_y, 20, bot);\n    }\n  }, {\n    key: \"drawFeatures\",\n    value: function drawFeatures(options) {\n      var self = this,\n          features = options.features,\n          color = self.config.color,\n          ctx = options.context,\n          bpPerPixel = options.bpPerPixel,\n          bpStart = options.bpStart,\n          pixelWidth = options.pixelWidth,\n          pixelHeight = options.pixelHeight,\n          y_offset = this.config.discrete ? options.top : 0,\n          bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\n          featureValueMinimum = void 0,\n          featureValueMaximum = void 0,\n          featureValueRange = void 0,\n          $dataRangeTrackLabel = void 0,\n          str = void 0,\n          min = void 0,\n          max = void 0;\n      if (this.config.group) {\n        pixelHeight = options.height;\n      } else if (this.config.discrete) {\n        pixelHeight = this.config.height;\n      }\n\n      if (!color) {\n        color = \"black\";\n      }\n      self.prev_coords = { x: 0, y: 0 };\n\n      if (features) {\n        if (self.scale_link_to) {\n          var t = self.scale_link_to.config;\n          if (t) {\n            self.config.scale = t.scale;\n            self.max_y = self.scale_link_to.max_y;\n            self.min_y = self.scale_link_to.min_y;\n          }\n        } else if (self.set_scale) {\n          self.min_y = self.set_scale.min;\n          self.max_y = self.set_scale.max;\n        } else if (self.max_y === undefined && self.config.scale === \"automatic\" || self.config.scale === \"dynamic\") {\n          var s = autoscale(features);\n          self.min_y = s.min;\n          self.max_y = s.max;\n        } else if (self.config.scale === \"fixed\") {\n          self.min_y = self.config.min_y;\n          self.max_y = self.config.max_y;\n        }\n\n        featureValueRange = self.max_y - self.min_y;\n\n        //$dataRangeTrackLabel = $(this.trackView.trackDiv).find('.igv-data-range-track-label');\n        //\n        //min = (Math.floor(track.dataRange.min) === track.dataRange.min) ? track.dataRange.min : track.dataRange.min.toFixed(2);\n        //max = (Math.floor(track.dataRange.max) === track.dataRange.max) ? track.dataRange.max : track.dataRange.max.toFixed(2);\n        //str = '[' + min + ' - ' + max + ']';\n        //\n        //$dataRangeTrackLabel.text(str);\n        var prev_x = 0;\n        var prev_y = 0;\n        ctx.globalAlpha = this.config.opacity ? this.config.opacity : 1;\n\n        if (self.is_line) {\n          var y = (1.0 - self.config.value / featureValueRange) * pixelHeight;\n          Graphics.strokeLine(ctx, 0, y, pixelWidth, y, { \"strokeStyle\": self.config.color, \"lineWidth\": self.config.width ? self.config.width : 1 });\n        } else {\n          features.forEach(renderFeature);\n        }\n\n        ctx.globalAlpha = 1;\n        if (self.config.threshold) {\n          var _y = y_offset + (1.0 - self.config.threshold / featureValueRange) * pixelHeight;\n          Graphics.strokeLine(ctx, 0, _y, pixelWidth, _y, { \"strokeStyle\": \"black\", \"lineWidth\": 1 });\n        }\n      }\n\n      function renderFeature(feature, index, featureList) {\n\n        var yUnitless, heightUnitLess, x, y, width, height, rectEnd, rectBaseline;\n\n        if (feature.end < bpStart) return;\n        if (feature.start > bpEnd) return;\n        if (feature.end === feature.start) {\n          feature.start -= 1;\n        }\n\n        x = Math.floor((feature.start - bpStart) / bpPerPixel);\n\n        rectEnd = Math.floor((feature.end - bpStart) / bpPerPixel);\n        width = Math.max(0, rectEnd - x);\n\n        //height = ((feature.value - featureValueMinimum) / featureValueRange) * pixelHeight;\n        //rectBaseline = pixelHeight - height;\n        //canvas.fillRect(rectOrigin, rectBaseline, rectWidth, rectHeight, {fillStyle: track.color});\n\n        if (signsDiffer(self.min_y, self.max_y)) {\n\n          if (feature.value < 0) {\n            yUnitless = self.max_y / featureValueRange;\n            heightUnitLess = -feature.value / featureValueRange;\n          } else {\n            yUnitless = (self.max_y - feature.value) / featureValueRange;\n            heightUnitLess = feature.value / featureValueRange;\n          }\n        } else if (self.min_y < 0) {\n          yUnitless = 0;\n          heightUnitLess = -feature.value / featureValueRange;\n        } else {\n          yUnitless = 1.0 - (feature.value - self.min_y) / featureValueRange;\n          heightUnitLess = (feature.value + self.min_y) / featureValueRange;\n        }\n\n        y = yUnitless * pixelHeight + y_offset;\n        y = y < y_offset ? y_offset : y;\n        height = heightUnitLess * pixelHeight;\n        height = height > pixelHeight ? pixelHeight : height;\n\n        //canvas.fillRect(x, yUnitless * pixelHeight, width, heightUnitLess * pixelHeight, { fillStyle: igv.randomRGB(64, 255) });\n        if (self.config.display === 'line') {\n          if (self.prev_coords.x) {\n            Graphics.strokeLine(ctx, x, y, self.prev_coords.x, self.prev_coords.y, { \"strokeStyle\": color, \"lineWidth\": 3 });\n          }\n          self.prev_coords.x = x;\n          self.prev_coords.y = y;\n        } else {\n          Graphics.fillRect(ctx, x, y, width, height, { fillStyle: color });\n        }\n      }\n      function autoscale(features) {\n        var min = 0,\n            max = -Number.MAX_VALUE;\n        features.forEach(function (f) {\n          min = Math.min(min, f.value);\n          max = Math.max(max, f.value);\n        });\n        return { min: min, max: max };\n      }\n\n      function signsDiffer(a, b) {\n        return a > 0 && b < 0 || a < 0 && b > 0;\n      }\n      this.top = y_offset;\n      this.bottom = y_offset + pixelHeight;\n      if (this.config.discrete) {\n        return this.bottom;\n      } else {\n        this.top = 0;\n        this.bottom = 0;\n      }\n    }\n  }]);\n\n  return MLVWigTrack;\n}(MLVTrack);\n\nMLVTrack.track_types[\"bigwig\"] = {\n  \"class\": MLVWigTrack,\n  name: \"BigWig\"\n};\n\nvar LineTrack = function (_MLVWigTrack) {\n  _inherits(LineTrack, _MLVWigTrack);\n\n  function LineTrack(config) {\n    _classCallCheck(this, LineTrack);\n\n    var _this5 = _possibleConstructorReturn(this, (LineTrack.__proto__ || Object.getPrototypeOf(LineTrack)).call(this, config));\n\n    _this5.is_line = true;\n    return _this5;\n  }\n\n  _createClass(LineTrack, [{\n    key: \"getFeatures\",\n    value: function getFeatures(chr, bpStart, bpEnd) {\n      return new Promise(function (fulfill, reject) {\n        fulfill([]);\n      });\n    }\n  }]);\n\n  return LineTrack;\n}(MLVWigTrack);\n\nMLVTrack.track_types[\"line\"] = {\n  \"class\": LineTrack,\n  name: \"Line Track\"\n};\n\nvar SequenceTrack = function (_MLVTrack4) {\n  _inherits(SequenceTrack, _MLVTrack4);\n\n  function SequenceTrack(config) {\n    _classCallCheck(this, SequenceTrack);\n\n    var _this6 = _possibleConstructorReturn(this, (SequenceTrack.__proto__ || Object.getPrototypeOf(SequenceTrack)).call(this, config));\n\n    _this6._setFeatureSource(config);\n    _this6.sequenceType = config.sequenceType || \"dna\";\n    _this6.height = 15;\n    return _this6;\n  }\n\n  _createClass(SequenceTrack, [{\n    key: \"_setFeatureSource\",\n    value: function _setFeatureSource(config) {\n      this.feature_source = new _feature.FastaSequence(config.url);\n    }\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(chr, bpStart, bpEnd, force, data) {\n      var self = this;\n      return new Promise(function (fulfill, reject) {\n        if (data.bpPerPixel > 1 /*igv.browser.trackViewportWidthBP() > 30000*/) {\n            fulfill(null);\n          } else {\n          self.feature_source.getSequence(chr, bpStart, bpEnd).then(fulfill).catch(reject);\n        }\n      });\n    }\n  }, {\n    key: \"drawFeatures\",\n    value: function drawFeatures(options) {\n\n      var sequence = options.features,\n          ctx = options.context,\n          bpPerPixel = options.bpPerPixel,\n          bpStart = options.bpStart,\n          pixelWidth = options.pixelWidth,\n          bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\n          len,\n          w,\n          y,\n          pos,\n          offset,\n          b,\n          p0,\n          p1,\n          pc,\n          c;\n\n      var y_pos1 = options.top;\n      var y_pos2 = y_pos1 + 5;\n\n      if (sequence) {\n\n        len = sequence.length;\n        w = 1 / bpPerPixel;\n\n        y = y_pos1 + this.height / 2;\n        for (pos = bpStart; pos <= bpEnd; pos++) {\n\n          offset = pos - bpStart;\n          if (offset < len) {\n            //                            var b = sequence.charAt(offset);\n            b = sequence[offset];\n            p0 = Math.floor(offset * w);\n            p1 = Math.floor((offset + 1) * w);\n            pc = Math.round((p0 + p1) / 2);\n\n            if (this.color) {\n              c = this.color;\n            } else if (\"dna\" === this.sequenceType) {\n              c = Graphics.nucleotideColors[b];\n            } else {\n              c = \"rgb(0, 0, 150)\";\n            }\n\n            if (!c) c = \"gray\";\n\n            if (bpPerPixel > 0.15) {\n\n              Graphics.fillRect(ctx, p0, y_pos1, p1 - p0, 10, { fillStyle: c });\n            } else {\n\n              Graphics.strokeText(ctx, b, pc, y, {\n                strokeStyle: c,\n                font: 'normal 10px Arial',\n                textAlign: 'center'\n              });\n            }\n          }\n        }\n      }\n      return y_pos1 + 10;\n    }\n  }]);\n\n  return SequenceTrack;\n}(MLVTrack);\n\nMLVTrack.track_types[\"fasta\"] = {\n  \"class\": SequenceTrack,\n  name: \"Fasta\"\n\n  //*******js/ifv-canvas.js***********************\n\n\n};\nvar Graphics = function () {\n  function Graphics() {\n    _classCallCheck(this, Graphics);\n  }\n\n  _createClass(Graphics, null, [{\n    key: \"setProperties\",\n    value: function setProperties(ctx, properties) {\n\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key)) {\n          var value = properties[key];\n          ctx[key] = value;\n        }\n      }\n    }\n  }, {\n    key: \"strokeLine\",\n    value: function strokeLine(ctx, x1, y1, x2, y2, properties) {\n\n      x1 = Math.floor(x1) + 0.5;\n      y1 = Math.floor(y1) + 0.5;\n      x2 = Math.floor(x2) + 0.5;\n      y2 = Math.floor(y2) + 0.5;\n\n      //log(\"stroke line, prop: \" + properties);\n\n      ctx.save();\n      if (properties) Graphics.setProperties(ctx, properties);\n\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"fillRect\",\n    value: function fillRect(ctx, x, y, w, h, properties) {\n\n      var c;\n      x = Math.round(x);\n      y = Math.round(y);\n\n      if (properties) {\n        ctx.save();\n        Graphics.setProperties(ctx, properties);\n      }\n\n      ctx.fillRect(x, y, w, h);\n\n      if (properties) ctx.restore();\n    }\n  }, {\n    key: \"fillPolygon\",\n    value: function fillPolygon(ctx, x, y, properties) {\n      ctx.save();\n      if (properties) Graphics.setProperties(ctx, properties);\n      Graphics.doPath(ctx, x, y);\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"strokePolygon\",\n    value: function strokePolygon(ctx, x, y, properties) {\n      ctx.save();\n      if (properties) Graphics.setProperties(ctx, properties);\n      Graphics.doPath(ctx, x, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"fillText\",\n    value: function fillText(ctx, text, x, y, properties, transforms) {\n\n      if (properties) {\n        ctx.save();\n        Graphics.setProperties(ctx, properties);\n      }\n\n      ctx.save();\n\n      ctx.translate(x, y);\n      if (transforms) {\n\n        for (var transform in transforms) {\n          var value = transforms[transform];\n\n          // TODO: Add error checking for robustness\n          if (transform == 'translate') {\n            ctx.translate(value['x'], value['y']);\n          }\n          if (transform == 'rotate') {\n            ctx.rotate(value['angle'] * Math.PI / 180);\n          }\n        }\n      }\n\n      ctx.fillText(text, 0, 0);\n      ctx.restore();\n\n      if (properties) ctx.restore();\n    }\n  }, {\n    key: \"strokeText\",\n    value: function strokeText(ctx, text, x, y, properties, transforms) {\n\n      ctx.save();\n      if (properties) {\n        Graphics.setProperties(ctx, properties);\n      }\n\n      ctx.translate(x, y);\n      if (transforms) {\n\n        for (var transform in transforms) {\n          var value = transforms[transform];\n\n          // TODO: Add error checking for robustness\n          if (transform == 'translate') {\n            ctx.translate(value['x'], value['y']);\n          }\n          if (transform == 'rotate') {\n            ctx.rotate(value['angle'] * Math.PI / 180);\n          }\n        }\n      }\n\n      ctx.strokeText(text, 0, 0);\n      ctx.restore();\n    }\n  }, {\n    key: \"strokeCircle\",\n    value: function strokeCircle(ctx, x, y, radius) {\n\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI);\n      ctx.stroke();\n    }\n  }, {\n    key: \"fillCircle\",\n    value: function fillCircle(ctx, x, y, radius) {\n\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI);\n      ctx.fill();\n    }\n  }, {\n    key: \"drawArrowhead\",\n    value: function drawArrowhead(ctx, x, y, size, lineWidth) {\n\n      ctx.save();\n      if (!size) {\n        size = 5;\n      }\n      if (lineWidth) {\n        ctx.lineWidth = lineWidth;\n      }\n      ctx.beginPath();\n      ctx.moveTo(x, y - size / 2);\n      ctx.lineTo(x, y + size / 2);\n      ctx.lineTo(x + size, y);\n      ctx.lineTo(x, y - size / 2);\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"dashedLine\",\n    value: function dashedLine(ctx, x1, y1, x2, y2, dashLen, properties) {\n      ctx.save();\n      x1 = Math.round(x1);\n      y1 = Math.round(y1);\n      x2 = Math.round(x2);\n      y2 = Math.round(y2);\n      dashLen = Math.round(dashLen);\n      log(\"dashedLine\");\n      if (properties) Graphics.setProperties(ctx, properties);\n\n      if (dashLen == undefined) dashLen = 2;\n      ctx.moveTo(x1, y1);\n\n      var dX = x2 - x1;\n      var dY = y2 - y1;\n      var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);\n      var dashX = dX / dashes;\n      var dashY = dY / dashes;\n\n      var q = 0;\n      while (q++ < dashes) {\n        x1 += dashX;\n        y1 += dashY;\n        ctx[q % 2 == 0 ? 'moveTo' : 'lineTo'](x1, y1);\n      }\n      ctx[q % 2 == 0 ? 'moveTo' : 'lineTo'](x2, y2);\n\n      ctx.restore();\n    }\n  }, {\n    key: \"doPath\",\n    value: function doPath(ctx, x, y) {\n\n      var i,\n          len = x.length;\n      for (i = 0; i < len; i++) {\n        x[i] = Math.round(x[i]);\n        y[i] = Math.round(y[i]);\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(x[0], y[0]);\n      for (i = 1; i < len; i++) {\n        ctx.lineTo(x[i], y[i]);\n      }\n      ctx.closePath();\n    }\n  }]);\n\n  return Graphics;\n}();\n\nGraphics.nucleotideColors = {\n  \"A\": \"green\",\n  \"T\": \"red\",\n  \"G\": \"black\",\n  \"C\": \"blue\",\n  \"a\": \"green\",\n  \"t\": \"red\",\n  \"c\": \"black\",\n  \"g\": \"blue\"\n\n};\n\nexports.MLVTrack = MLVTrack;\nexports.MLVWigTrack = MLVWigTrack;\nexports.MLVBedTrack = MLVBedTrack;\nexports.RulerTrack = RulerTrack;\nexports.MLVBigBedTrack = MLVBigBedTrack;\nexports.Graphics = Graphics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/tracks.js\n");

/***/ }),

/***/ "../MLVPanel/src/utils.js":
/*!***************************!*\
  !*** .Panel/src/utils.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Broad Institute\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\n\nvar parseUri_options = {\n    strictMode: false,\n    key: [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"],\n    q: {\n        name: \"queryKey\",\n        parser: /(?:^|&)([^&=]*)=?([^&]*)/g\n    },\n    parser: {\n        strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n    }\n};\n\nvar Utils = function () {\n    function Utils() {\n        _classCallCheck(this, Utils);\n    }\n\n    _createClass(Utils, null, [{\n        key: \"addAlphaToRGB\",\n        value: function addAlphaToRGB(rgbString, alpha) {\n\n            if (rgbString.startsWith(\"rgb\")) {\n                return rgbString.replace(\"rgb\", \"rgba\").replace(\")\", \", \" + alpha + \")\");\n            } else {\n                console.log(rgbString + \" is not an rgb style string\");\n                return rgbString;\n            }\n        }\n    }, {\n        key: \"presentAlert\",\n        value: function presentAlert(track_div, error) {\n            var div = $(\"<div>\").css({ \"position\": \"absolute\", \"background-color\": \"white\" }).attr(\"class\", \"mlv-alert\").appendTo(track_div);\n            var div1 = $(\"<div>\").css({ \"display\": \"flex\", \"justify-content\": \"center\" }).appendTo(div);\n            div1.append($('<i class=\"fas fa-exclamation-circle\"></i>').css({ color: \"red\", \"font-size\": \"16px\", \"text-align\": \"center\" }));\n            div.append($(\"<div>\" + error + \"</div>\").css({ color: \"red\", \"font-size\": \"14px\", \"text-align\": \"center\" }));\n            var left = Math.round(track_div.width() / 2 - div.width() / 2);\n            var top = Math.round(track_div.height() / 2 - div.height() / 2);\n            div.css({ \"left\": left + \"px\", top: top + \"px\" });\n        }\n    }, {\n        key: \"spinner\",\n        value: function spinner(size) {\n\n            // spinner\n            var $container, $spinner;\n\n            $spinner = $('<i class=\"fa fa-lg fa-spinner fa-spin igv-spinner\">').css({ position: \"absolute\", top: \"50%\", left: \"50%\" });\n            if (size) {\n                $spinner.css(\"font-size\", size);\n            }\n\n            return $spinner[0];\n        }\n\n        /**\r\n         * Find spinner\r\n         */\n\n    }, {\n        key: \"getSpinnerObjectWithParentElement\",\n        value: function getSpinnerObjectWithParentElement(parentElement) {\n            return parentElement.find(\"div.igv-spinner-container\");\n        }\n    }, {\n        key: \"startSpinnerAtParentElement\",\n\n\n        /**\r\n         * Start the spinner for the parent element, if it has one\r\n         */\n        value: function startSpinnerAtParentElement(parentElement) {\n            parentElement.children(\".fa-spinner\").show();\n        }\n    }, {\n        key: \"stopSpinnerAtParentElement\",\n\n\n        /**\r\n         * Stop the spinner for the parent element, if it has one\r\n         * @param parentElement\r\n         */\n        value: function stopSpinnerAtParentElement(parentElement) {\n            parentElement.children(\".fa-spinner\").hide();\n        }\n    }, {\n        key: \"parseUri\",\n        value: function parseUri(str) {\n\n            var o = parseUri_options,\n                m = o.parser[o.strictMode ? \"strict\" : \"loose\"].exec(str),\n                uri = {},\n                i = 14;\n\n            while (i--) {\n                uri[o.key[i]] = m[i] || \"\";\n            }uri[o.q.name] = {};\n            uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {\n                if ($1) uri[o.q.name][$1] = $2;\n            });\n\n            return uri;\n        }\n    }, {\n        key: \"domElementRectAsString\",\n        value: function domElementRectAsString(element) {\n            return \" x \" + element.clientLeft + \" y \" + element.clientTop + \" w \" + element.clientWidth + \" h \" + element.clientHeight;\n        }\n    }, {\n        key: \"isNumber\",\n        value: function isNumber(n) {\n\n            if (\"\" === n) {\n\n                return false;\n            } else if (undefined === n) {\n\n                return false;\n            } else {\n\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            }\n        }\n    }, {\n        key: \"guid\",\n        value: function guid() {\n            return (\"0000\" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n        }\n    }, {\n        key: \"random\",\n\n\n        // Returns a random number between min (inclusive) and max (exclusive)\n        value: function random(min, max) {\n            return Math.random() * (max - min) + min;\n        }\n    }, {\n        key: \"numberFormatter\",\n\n\n        // StackOverflow: http://stackoverflow.com/a/10810674/116169\n        value: function numberFormatter(rawNumber) {\n\n            var dec = String(rawNumber).split(/[.,]/),\n                sep = ',',\n                decsep = '.';\n\n            return dec[0].split('').reverse().reduce(function (prev, now, i) {\n                return i % 3 === 0 ? prev + sep + now : prev + now;\n            }).split('').reverse().join('') + (dec[1] ? decsep + dec[1] : '');\n        }\n    }, {\n        key: \"numberUnFormatter\",\n        value: function numberUnFormatter(formatedNumber) {\n\n            return formatedNumber.split(\",\").join().replace(\",\", \"\", \"g\");\n        }\n    }, {\n        key: \"translateMouseCoordinates\",\n\n\n        /**\r\n         * Translate the mouse coordinates for the event to the coordinates for the given target element\r\n         * @param e\r\n         * @param target\r\n         * @returns {{x: number, y: number}}\r\n         */\n        value: function translateMouseCoordinates(e, target) {\n\n            var eFixed = $.event.fix(e),\n                // Sets pageX and pageY for browsers that don't support them\n            posx = eFixed.pageX - $(target).offset().left,\n                posy = eFixed.pageY - $(target).offset().top;\n\n            return { x: posx, y: posy };\n        }\n    }, {\n        key: \"formatPopoverText\",\n\n\n        /**\r\n         * Format markup for popover text from an array of name value pairs [{name, value}]\r\n         */\n        value: function formatPopoverText(nameValueArray) {\n\n            var markup = \"<table class=\\\"igv-popover-table\\\">\";\n\n            nameValueArray.forEach(function (nameValue) {\n\n                if (nameValue.name) {\n                    //markup += \"<tr><td class=\\\"igv-popover-td\\\">\" + \"<span class=\\\"igv-popoverName\\\">\" + nameValue.name + \"</span>\" + \"<span class=\\\"igv-popoverValue\\\">\" + nameValue.value + \"</span>\" + \"</td></tr>\";\n                    markup += \"<tr><td class=\\\"igv-popover-td\\\">\" + \"<div class=\\\"igv-popoverNameValue\\\">\" + \"<span class=\\\"igv-popoverName\\\">\" + nameValue.name + \"</span>\" + \"<span class=\\\"igv-popoverValue\\\">\" + nameValue.value + \"</span>\" + \"</div>\" + \"</td></tr>\";\n                } else {\n                    // not a name/value pair\n                    markup += \"<tr><td>\" + nameValue.toString() + \"</td></tr>\";\n                }\n            });\n\n            markup += \"</table>\";\n            return markup;\n        }\n    }, {\n        key: \"throttle\",\n        value: function throttle(fn, threshhold, scope) {\n            threshhold || (threshhold = 200);\n            var last, deferTimer;\n\n            return function () {\n                var context = scope || this;\n\n                var now = +new Date(),\n                    args = arguments;\n                if (last && now < last + threshhold) {\n                    // hold on to it\n                    clearTimeout(deferTimer);\n                    deferTimer = setTimeout(function () {\n                        last = now;\n                        fn.apply(context, args);\n                    }, threshhold);\n                } else {\n                    last = now;\n                    fn.apply(context, args);\n                }\n            };\n        }\n    }, {\n        key: \"splitStringRespectingQuotes\",\n        value: function splitStringRespectingQuotes(string, delim) {\n\n            var tokens = [],\n                len = string.length,\n                i,\n                n = 0,\n                quote = false,\n                c;\n\n            if (len > 0) {\n\n                tokens[n] = string.charAt(0);\n                for (i = 1; i < len; i++) {\n                    c = string.charAt(i);\n                    if (c === '\"') {\n                        quote = !quote;\n                    } else if (!quote && c === delim) {\n                        n++;\n                        tokens[n] = \"\";\n                    } else {\n                        tokens[n] += c;\n                    }\n                }\n            }\n            return tokens;\n        }\n    }, {\n        key: \"addAjaxExtensions\",\n\n\n        /**\r\n         * Extend jQuery's ajax function to handle binary requests.   Credit to Henry Algus:\r\n         *\r\n         * http://www.henryalgus.com/reading-binary-files-using-jquery-ajax/\r\n         */\n        value: function addAjaxExtensions() {\n\n            // use this transport for \"binary\" data type\n            $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\n\n                return {\n                    // create new XMLHttpRequest\n                    send: function send(_, callback) {\n                        // setup all variables\n                        var xhr = new XMLHttpRequest(),\n                            url = options.url,\n                            type = options.type,\n                            responseType = \"arraybuffer\",\n                            data = options.data || null;\n\n                        xhr.addEventListener('load', function () {\n                            var data = {};\n                            data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            callback(xhr.status, xhr.statusText, data, xhr.getAllResponseHeaders());\n                        });\n\n                        xhr.open(type, url);\n                        xhr.responseType = responseType;\n\n                        if (options.headers) {\n                            for (var prop in options.headers) {\n                                if (options.headers.hasOwnProperty(prop)) {\n                                    xhr.setRequestHeader(prop, options.headers[prop]);\n                                }\n                            }\n                        }\n\n                        // TODO -- set any other options values\n                    },\n                    abort: function abort() {\n                        jqXHR.abort();\n                    }\n                };\n            });\n        }\n    }, {\n        key: \"isStringOrNumber\",\n\n\n        /**\r\n         * Test if the given value is a string or number.  Not using typeof as it fails on boxed primitives.\r\n         *\r\n         * @param value\r\n         * @returns boolean\r\n         */\n        value: function isStringOrNumber(value) {\n            return value.substring || value.toFixed ? true : false;\n        }\n    }, {\n        key: \"constrainBBox\",\n        value: function constrainBBox($child, $parent) {\n\n            var delta,\n                topLeft,\n                bboxChild = {},\n                bboxParent = {};\n\n            bboxParent.left = bboxParent.top = 0;\n            bboxParent.right = $parent.outerWidth();\n            bboxParent.bottom = $parent.outerHeight();\n\n            topLeft = $child.offset();\n\n            bboxChild.left = topLeft.left - $parent.offset().left;\n            bboxChild.top = topLeft.top - $parent.offset().top;\n            bboxChild.right = bboxChild.left + $child.outerWidth();\n            bboxChild.bottom = bboxChild.top + $child.outerHeight();\n\n            delta = bboxChild.bottom - bboxParent.bottom;\n            if (delta > 0) {\n\n                // clamp to trackContainer bottom\n                topLeft.top -= delta;\n\n                bboxChild.top -= delta;\n                bboxChild.bottom -= delta;\n\n                delta = bboxChild.top - bboxParent.top;\n                if (delta < 0) {\n                    topLeft.top -= delta;\n                }\n            }\n\n            return topLeft;\n        }\n    }, {\n        key: \"log\",\n        value: function log(message) {\n            if (igv.enableLogging && console && console.log) {\n                console.log(message);\n            }\n        }\n    }]);\n\n    return Utils;\n}();\n\nexports.Utils = Utils;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/utils.js\n");

/***/ }),

/***/ "../MLVPanel/src/vendor/inflate.js":
/*!************************************!*\
  !*** .Panel/src/vendor/inflate.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\nvar MAX_WBITS = 15; // 32K LZ77 window\nvar DEF_WBITS = MAX_WBITS;\nvar MAX_MEM_LEVEL = 9;\nvar MANY = 1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT = 0x20;\n\nvar Z_NO_FLUSH = 0;\nvar Z_PARTIAL_FLUSH = 1;\nvar Z_SYNC_FLUSH = 2;\nvar Z_FULL_FLUSH = 3;\nvar Z_FINISH = 4;\n\nvar Z_DEFLATED = 8;\n\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_NEED_DICT = 2;\nvar Z_ERRNO = -1;\nvar Z_STREAM_ERROR = -2;\nvar Z_DATA_ERROR = -3;\nvar Z_MEM_ERROR = -4;\nvar Z_BUF_ERROR = -5;\nvar Z_VERSION_ERROR = -6;\n\nvar METHOD = 0; // waiting for method byte\nvar FLAG = 1; // waiting for flag byte\nvar DICT4 = 2; // four dictionary check bytes to go\nvar DICT3 = 3; // three dictionary check bytes to go\nvar DICT2 = 4; // two dictionary check bytes to go\nvar DICT1 = 5; // one dictionary check byte to go\nvar DICT0 = 6; // waiting for inflateSetDictionary\nvar BLOCKS = 7; // decompressing blocks\nvar CHECK4 = 8; // four check bytes to go\nvar CHECK3 = 9; // three check bytes to go\nvar CHECK2 = 10; // two check bytes to go\nvar CHECK1 = 11; // one check byte to go\nvar DONE = 12; // finished check, done\nvar BAD = 13; // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE = 0; // get type bits (3, including end bit)\nvar IB_LENS = 1; // get lengths for stored\nvar IB_STORED = 2; // processing stored block\nvar IB_TABLE = 3; // get table lengths\nvar IB_BTREE = 4; // get bit lengths tree for a dynamic block\nvar IB_DTREE = 5; // get length, distance trees for a dynamic block\nvar IB_CODES = 6; // processing fixed or dynamic block\nvar IB_DRY = 7; // output remaining window bytes\nvar IB_DONE = 8; // finished last block, done\nvar IB_BAD = 9; // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];\nvar fixed_td = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577];\n\n// Tables for deflate from PKZIP's appnote.txt.\nvar cplens = [// Copy lengths for literal codes 257..285\n3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];\n\n// see note #13 above about 258\nvar cplext = [// Extra bits for literal codes 257..285\n0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n];\n\nvar cpdist = [// Copy offsets for distance codes 0..29\n1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n\nvar cpdext = [// Extra bits for distance codes\n0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {}\n\nZStream.prototype.inflateInit = function (w, nowrap) {\n  if (!w) {\n    w = DEF_WBITS;\n  }\n  if (nowrap) {\n    nowrap = false;\n  }\n  this.istate = new Inflate();\n  return this.istate.inflateInit(this, nowrap ? -w : w);\n};\n\nZStream.prototype.inflate = function (f) {\n  if (this.istate == null) return Z_STREAM_ERROR;\n  return this.istate.inflate(this, f);\n};\n\nZStream.prototype.inflateEnd = function () {\n  if (this.istate == null) return Z_STREAM_ERROR;\n  var ret = istate.inflateEnd(this);\n  this.istate = null;\n  return ret;\n};\nZStream.prototype.inflateSync = function () {\n  // if(istate == null) return Z_STREAM_ERROR;\n  return istate.inflateSync(this);\n};\nZStream.prototype.inflateSetDictionary = function (dictionary, dictLength) {\n  // if(istate == null) return Z_STREAM_ERROR;\n  return istate.inflateSetDictionary(this, dictionary, dictLength);\n};\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n  this.was = [0];\n}\n\nInflate.prototype.inflateReset = function (z) {\n  if (z == null || z.istate == null) return Z_STREAM_ERROR;\n\n  z.total_in = z.total_out = 0;\n  z.msg = null;\n  z.istate.mode = z.istate.nowrap != 0 ? BLOCKS : METHOD;\n  z.istate.blocks.reset(z, null);\n  return Z_OK;\n};\n\nInflate.prototype.inflateEnd = function (z) {\n  if (this.blocks != null) this.blocks.free(z);\n  this.blocks = null;\n  return Z_OK;\n};\n\nInflate.prototype.inflateInit = function (z, w) {\n  z.msg = null;\n  this.blocks = null;\n\n  // handle undocumented nowrap option (no zlib header or check)\n  var nowrap = 0;\n  if (w < 0) {\n    w = -w;\n    nowrap = 1;\n  }\n\n  // set window size\n  if (w < 8 || w > 15) {\n    this.inflateEnd(z);\n    return Z_STREAM_ERROR;\n  }\n  this.wbits = w;\n\n  z.istate.blocks = new InfBlocks(z, z.istate.nowrap != 0 ? null : this, 1 << w);\n\n  // reset state\n  this.inflateReset(z);\n  return Z_OK;\n};\n\nInflate.prototype.inflate = function (z, f) {\n  var r, b;\n\n  if (z == null || z.istate == null || z.next_in == null) return Z_STREAM_ERROR;\n  f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n  r = Z_BUF_ERROR;\n  while (true) {\n    switch (z.istate.mode) {\n      case METHOD:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        if (((z.istate.method = z.next_in[z.next_in_index++]) & 0xf) != Z_DEFLATED) {\n          z.istate.mode = BAD;\n          z.msg = \"unknown compression method\";\n          z.istate.marker = 5; // can't try inflateSync\n          break;\n        }\n        if ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n          z.istate.mode = BAD;\n          z.msg = \"invalid window size\";\n          z.istate.marker = 5; // can't try inflateSync\n          break;\n        }\n        z.istate.mode = FLAG;\n      case FLAG:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        b = z.next_in[z.next_in_index++] & 0xff;\n\n        if (((z.istate.method << 8) + b) % 31 != 0) {\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5; // can't try inflateSync\n          break;\n        }\n\n        if ((b & PRESET_DICT) == 0) {\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need = (z.next_in[z.next_in_index++] & 0xff) << 24 & 0xff000000;\n        z.istate.mode = DICT3;\n      case DICT3:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++] & 0xff) << 16 & 0xff0000;\n        z.istate.mode = DICT2;\n      case DICT2:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++] & 0xff) << 8 & 0xff00;\n        z.istate.mode = DICT1;\n      case DICT1:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need += z.next_in[z.next_in_index++] & 0xff;\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0; // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if (r == Z_DATA_ERROR) {\n          z.istate.mode = BAD;\n          z.istate.marker = 0; // can try inflateSync\n          break;\n        }\n        if (r == Z_OK) {\n          r = f;\n        }\n        if (r != Z_STREAM_END) {\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if (z.istate.nowrap != 0) {\n          z.istate.mode = DONE;\n          break;\n        }\n        z.istate.mode = CHECK4;\n      case CHECK4:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need = (z.next_in[z.next_in_index++] & 0xff) << 24 & 0xff000000;\n        z.istate.mode = CHECK3;\n      case CHECK3:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++] & 0xff) << 16 & 0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++] & 0xff) << 8 & 0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if (z.avail_in == 0) return r;r = f;\n\n        z.avail_in--;z.total_in++;\n        z.istate.need += z.next_in[z.next_in_index++] & 0xff;\n\n        if (z.istate.was[0] != z.istate.need) {\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5; // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n};\n\nInflate.prototype.inflateSetDictionary = function (z, dictionary, dictLength) {\n  var index = 0;\n  var length = dictLength;\n  if (z == null || z.istate == null || z.istate.mode != DICT0) return Z_STREAM_ERROR;\n\n  if (z._adler.adler32(1, dictionary, 0, dictLength) != z.adler) {\n    return Z_DATA_ERROR;\n  }\n\n  z.adler = z._adler.adler32(0, null, 0, 0);\n\n  if (length >= 1 << z.istate.wbits) {\n    length = (1 << z.istate.wbits) - 1;\n    index = dictLength - length;\n  }\n  z.istate.blocks.set_dictionary(dictionary, index, length);\n  z.istate.mode = BLOCKS;\n  return Z_OK;\n};\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255];\n\nInflate.prototype.inflateSync = function (z) {\n  var n; // number of bytes to look at\n  var p; // pointer to bytes\n  var m; // number of marker bytes found in a row\n  var r, w; // temporaries to save total_in and total_out\n\n  // set up\n  if (z == null || z.istate == null) return Z_STREAM_ERROR;\n  if (z.istate.mode != BAD) {\n    z.istate.mode = BAD;\n    z.istate.marker = 0;\n  }\n  if ((n = z.avail_in) == 0) return Z_BUF_ERROR;\n  p = z.next_in_index;\n  m = z.istate.marker;\n\n  // search\n  while (n != 0 && m < 4) {\n    if (z.next_in[p] == mark[m]) {\n      m++;\n    } else if (z.next_in[p] != 0) {\n      m = 0;\n    } else {\n      m = 4 - m;\n    }\n    p++;n--;\n  }\n\n  // restore\n  z.total_in += p - z.next_in_index;\n  z.next_in_index = p;\n  z.avail_in = n;\n  z.istate.marker = m;\n\n  // return no joy or set up to restart on a new block\n  if (m != 4) {\n    return Z_DATA_ERROR;\n  }\n  r = z.total_in;w = z.total_out;\n  this.inflateReset(z);\n  z.total_in = r;z.total_out = w;\n  z.istate.mode = BLOCKS;\n  return Z_OK;\n};\n\n// Returns true if inflate is currently at the end of a block generated\n// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n// implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n// but removes the length bytes of the resulting empty stored block. When\n// decompressing, PPP checks that at the end of input packet, inflate is\n// waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function (z) {\n  if (z == null || z.istate == null || z.istate.blocks == null) return Z_STREAM_ERROR;\n  return z.istate.blocks.sync_point();\n};\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n  this.hufts = new Int32Array(MANY * 3);\n  this.window = new Uint8Array(w);\n  this.end = w;\n  this.checkfn = checkfn;\n  this.mode = IB_TYPE;\n  this.reset(z, null);\n\n  this.left = 0; // if STORED, bytes left to copy \n\n  this.table = 0; // table lengths (14 bits) \n  this.index = 0; // index into blens (or border) \n  this.blens = null; // bit lengths of codes \n  this.bb = new Int32Array(1); // bit length tree depth \n  this.tb = new Int32Array(1); // bit length decoding tree \n\n  this.codes = new InfCodes();\n\n  this.last = 0; // true if this block is the last block \n\n  // mode independent information \n  this.bitk = 0; // bits in bit buffer \n  this.bitb = 0; // bit buffer \n  this.read = 0; // window read pointer \n  this.write = 0; // window write pointer \n  this.check = 0; // check on output \n\n  this.inftree = new InfTree();\n}\n\nInfBlocks.prototype.reset = function (z, c) {\n  if (c) c[0] = this.check;\n  if (this.mode == IB_CODES) {\n    this.codes.free(z);\n  }\n  this.mode = IB_TYPE;\n  this.bitk = 0;\n  this.bitb = 0;\n  this.read = this.write = 0;\n\n  if (this.checkfn) z.adler = this.check = z._adler.adler32(0, null, 0, 0);\n};\n\nInfBlocks.prototype.proc = function (z, r) {\n  var t; // temporary storage\n  var b; // bit buffer\n  var k; // bits in bit buffer\n  var p; // input data pointer\n  var n; // bytes available there\n  var q; // output window write pointer\n  var m; // bytes to end of window or read pointer\n\n  // copy input/output information to locals (UPDATE macro restores)\n  {\n    p = z.next_in_index;n = z.avail_in;b = this.bitb;k = this.bitk;\n  }\n  {\n    q = this.write;m = q < this.read ? this.read - q - 1 : this.end - q;\n  }\n\n  // process input based on current state\n  while (true) {\n    switch (this.mode) {\n      case IB_TYPE:\n\n        while (k < 3) {\n          if (n != 0) {\n            r = Z_OK;\n          } else {\n            this.bitb = b;this.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;z.next_in_index = p;\n            this.write = q;\n            return this.inflate_flush(z, r);\n          };\n          n--;\n          b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n        t = b & 7;\n        this.last = t & 1;\n\n        switch (t >>> 1) {\n          case 0:\n            // stored \n            {\n              b >>>= 3;k -= 3;\n            }\n            t = k & 7; // go to byte boundary\n\n            {\n              b >>>= t;k -= t;\n            }\n            this.mode = IB_LENS; // get length of stored block\n            break;\n          case 1:\n            // fixed\n            {\n              var bl = new Int32Array(1);\n              var bd = new Int32Array(1);\n              var tl = [];\n              var td = [];\n\n              inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n            }\n\n            {\n              b >>>= 3;k -= 3;\n            }\n\n            this.mode = IB_CODES;\n            break;\n          case 2:\n            // dynamic\n\n            {\n              b >>>= 3;k -= 3;\n            }\n\n            this.mode = IB_TABLE;\n            break;\n          case 3:\n            // illegal\n\n            {\n              b >>>= 3;k -= 3;\n            }\n            this.mode = BAD;\n            z.msg = \"invalid block type\";\n            r = Z_DATA_ERROR;\n\n            this.bitb = b;this.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            this.write = q;\n            return this.inflate_flush(z, r);\n        }\n        break;\n      case IB_LENS:\n        while (k < 32) {\n          if (n != 0) {\n            r = Z_OK;\n          } else {\n            this.bitb = b;this.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;z.next_in_index = p;\n            this.write = q;\n            return this.inflate_flush(z, r);\n          };\n          n--;\n          b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n\n        if ((~b >>> 16 & 0xffff) != (b & 0xffff)) {\n          this.mode = BAD;\n          z.msg = \"invalid stored block lengths\";\n          r = Z_DATA_ERROR;\n\n          this.bitb = b;this.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          this.write = q;\n          return this.inflate_flush(z, r);\n        }\n        this.left = b & 0xffff;\n        b = k = 0; // dump bits\n        this.mode = left != 0 ? IB_STORED : this.last != 0 ? IB_DRY : IB_TYPE;\n        break;\n      case IB_STORED:\n        if (n == 0) {\n          this.bitb = b;this.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          write = q;\n          return this.inflate_flush(z, r);\n        }\n\n        if (m == 0) {\n          if (q == end && read != 0) {\n            q = 0;m = q < this.read ? this.read - q - 1 : this.end - q;\n          }\n          if (m == 0) {\n            this.write = q;\n            r = this.inflate_flush(z, r);\n            q = this.write;m = q < this.read ? this.read - q - 1 : this.end - q;\n            if (q == this.end && this.read != 0) {\n              q = 0;m = q < this.read ? this.read - q - 1 : this.end - q;\n            }\n            if (m == 0) {\n              this.bitb = b;this.bitk = k;\n              z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n              this.write = q;\n              return this.inflate_flush(z, r);\n            }\n          }\n        }\n        r = Z_OK;\n\n        t = this.left;\n        if (t > n) t = n;\n        if (t > m) t = m;\n        arrayCopy(z.next_in, p, window, q, t);\n        p += t;n -= t;\n        q += t;m -= t;\n        if ((this.left -= t) != 0) break;\n        this.mode = this.last != 0 ? IB_DRY : IB_TYPE;\n        break;\n      case IB_TABLE:\n\n        while (k < 14) {\n          if (n != 0) {\n            r = Z_OK;\n          } else {\n            this.bitb = b;this.bitk = k;\n            z.avail_in = n;\n            z.total_in += p - z.next_in_index;z.next_in_index = p;\n            this.write = q;\n            return this.inflate_flush(z, r);\n          };\n          n--;\n          b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n\n        this.table = t = b & 0x3fff;\n        if ((t & 0x1f) > 29 || (t >> 5 & 0x1f) > 29) {\n          this.mode = IB_BAD;\n          z.msg = \"too many length or distance symbols\";\n          r = Z_DATA_ERROR;\n\n          this.bitb = b;this.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          this.write = q;\n          return this.inflate_flush(z, r);\n        }\n        t = 258 + (t & 0x1f) + (t >> 5 & 0x1f);\n        if (this.blens == null || this.blens.length < t) {\n          this.blens = new Int32Array(t);\n        } else {\n          for (var i = 0; i < t; i++) {\n            this.blens[i] = 0;\n          }\n        }\n\n        {\n          b >>>= 14;k -= 14;\n        }\n\n        this.index = 0;\n        this.mode = IB_BTREE;\n      case IB_BTREE:\n        while (this.index < 4 + (this.table >>> 10)) {\n          while (k < 3) {\n            if (n != 0) {\n              r = Z_OK;\n            } else {\n              this.bitb = b;this.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;z.next_in_index = p;\n              this.write = q;\n              return this.inflate_flush(z, r);\n            };\n            n--;\n            b |= (z.next_in[p++] & 0xff) << k;\n            k += 8;\n          }\n\n          this.blens[INFBLOCKS_BORDER[this.index++]] = b & 7;\n\n          {\n            b >>>= 3;k -= 3;\n          }\n        }\n\n        while (this.index < 19) {\n          this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n        }\n\n        this.bb[0] = 7;\n        t = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n        if (t != Z_OK) {\n          r = t;\n          if (r == Z_DATA_ERROR) {\n            this.blens = null;\n            this.mode = IB_BAD;\n          }\n\n          this.bitb = b;this.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          write = q;\n          return this.inflate_flush(z, r);\n        }\n\n        this.index = 0;\n        this.mode = IB_DTREE;\n      case IB_DTREE:\n        while (true) {\n          t = this.table;\n          if (!(this.index < 258 + (t & 0x1f) + (t >> 5 & 0x1f))) {\n            break;\n          }\n\n          var h; //int[]\n          var i, j, c;\n\n          t = this.bb[0];\n\n          while (k < t) {\n            if (n != 0) {\n              r = Z_OK;\n            } else {\n              this.bitb = b;this.bitk = k;\n              z.avail_in = n;\n              z.total_in += p - z.next_in_index;z.next_in_index = p;\n              this.write = q;\n              return this.inflate_flush(z, r);\n            };\n            n--;\n            b |= (z.next_in[p++] & 0xff) << k;\n            k += 8;\n          }\n\n          //\t  if (this.tb[0]==-1){\n          //            dlog(\"null...\");\n          //\t  }\n\n          t = this.hufts[(this.tb[0] + (b & inflate_mask[t])) * 3 + 1];\n          c = this.hufts[(this.tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n          if (c < 16) {\n            b >>>= t;k -= t;\n            this.blens[this.index++] = c;\n          } else {\n            // c == 16..18\n            i = c == 18 ? 7 : c - 14;\n            j = c == 18 ? 11 : 3;\n\n            while (k < t + i) {\n              if (n != 0) {\n                r = Z_OK;\n              } else {\n                this.bitb = b;this.bitk = k;\n                z.avail_in = n;\n                z.total_in += p - z.next_in_index;z.next_in_index = p;\n                this.write = q;\n                return this.inflate_flush(z, r);\n              };\n              n--;\n              b |= (z.next_in[p++] & 0xff) << k;\n              k += 8;\n            }\n\n            b >>>= t;k -= t;\n\n            j += b & inflate_mask[i];\n\n            b >>>= i;k -= i;\n\n            i = this.index;\n            t = this.table;\n            if (i + j > 258 + (t & 0x1f) + (t >> 5 & 0x1f) || c == 16 && i < 1) {\n              this.blens = null;\n              this.mode = IB_BAD;\n              z.msg = \"invalid bit length repeat\";\n              r = Z_DATA_ERROR;\n\n              this.bitb = b;this.bitk = k;\n              z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n              this.write = q;\n              return this.inflate_flush(z, r);\n            }\n\n            c = c == 16 ? this.blens[i - 1] : 0;\n            do {\n              this.blens[i++] = c;\n            } while (--j != 0);\n            this.index = i;\n          }\n        }\n\n        this.tb[0] = -1;\n        {\n          var bl = new Int32Array(1);\n          var bd = new Int32Array(1);\n          var tl = new Int32Array(1);\n          var td = new Int32Array(1);\n          bl[0] = 9; // must be <= 9 for lookahead assumptions\n          bd[0] = 6; // must be <= 9 for lookahead assumptions\n\n          t = this.table;\n          t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + (t >> 5 & 0x1f), this.blens, bl, bd, tl, td, this.hufts, z);\n\n          if (t != Z_OK) {\n            if (t == Z_DATA_ERROR) {\n              this.blens = null;\n              this.mode = BAD;\n            }\n            r = t;\n\n            this.bitb = b;this.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            this.write = q;\n            return this.inflate_flush(z, r);\n          }\n          this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n        }\n        this.mode = IB_CODES;\n      case IB_CODES:\n        this.bitb = b;this.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        this.write = q;\n\n        if ((r = this.codes.proc(this, z, r)) != Z_STREAM_END) {\n          return this.inflate_flush(z, r);\n        }\n        r = Z_OK;\n        this.codes.free(z);\n\n        p = z.next_in_index;n = z.avail_in;b = this.bitb;k = this.bitk;\n        q = this.write;m = q < this.read ? this.read - q - 1 : this.end - q;\n\n        if (this.last == 0) {\n          this.mode = IB_TYPE;\n          break;\n        }\n        this.mode = IB_DRY;\n      case IB_DRY:\n        this.write = q;\n        r = this.inflate_flush(z, r);\n        q = this.write;m = q < this.read ? this.read - q - 1 : this.end - q;\n        if (this.read != this.write) {\n          this.bitb = b;this.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          this.write = q;\n          return this.inflate_flush(z, r);\n        }\n        this.mode = DONE;\n      case IB_DONE:\n        r = Z_STREAM_END;\n\n        this.bitb = b;this.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        this.write = q;\n        return this.inflate_flush(z, r);\n      case IB_BAD:\n        r = Z_DATA_ERROR;\n\n        this.bitb = b;this.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        this.write = q;\n        return this.inflate_flush(z, r);\n\n      default:\n        r = Z_STREAM_ERROR;\n\n        this.bitb = b;this.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        this.write = q;\n        return this.inflate_flush(z, r);\n    }\n  }\n};\n\nInfBlocks.prototype.free = function (z) {\n  this.reset(z, null);\n  this.window = null;\n  this.hufts = null;\n};\n\nInfBlocks.prototype.set_dictionary = function (d, start, n) {\n  arrayCopy(d, start, window, 0, n);\n  this.read = this.write = n;\n};\n\n// Returns true if inflate is currently at the end of a block generated\n// by Z_SYNC_FLUSH or Z_FULL_FLUSH. \nInfBlocks.prototype.sync_point = function () {\n  return this.mode == IB_LENS;\n};\n\n// copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function (z, r) {\n  var n;\n  var p;\n  var q;\n\n  // local copies of source and destination pointers\n  p = z.next_out_index;\n  q = this.read;\n\n  // compute number of bytes to copy as far as end of window\n  n = (q <= this.write ? this.write : this.end) - q;\n  if (n > z.avail_out) n = z.avail_out;\n  if (n != 0 && r == Z_BUF_ERROR) r = Z_OK;\n\n  // update counters\n  z.avail_out -= n;\n  z.total_out += n;\n\n  // update check information\n  if (this.checkfn != null) z.adler = this.check = z._adler.adler32(this.check, this.window, q, n);\n\n  // copy as far as end of window\n  arrayCopy(this.window, q, z.next_out, p, n);\n  p += n;\n  q += n;\n\n  // see if more to copy at beginning of window\n  if (q == this.end) {\n    // wrap pointers\n    q = 0;\n    if (this.write == this.end) this.write = 0;\n\n    // compute bytes to copy\n    n = this.write - q;\n    if (n > z.avail_out) n = z.avail_out;\n    if (n != 0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if (this.checkfn != null) z.adler = this.check = z._adler.adler32(this.check, this.window, q, n);\n\n    // copy\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n  }\n\n  // update pointers\n  z.next_out_index = p;\n  this.read = q;\n\n  // done\n  return r;\n};\n\n//\n// InfCodes.java\n//\n\nvar IC_START = 0; // x: set up for LEN\nvar IC_LEN = 1; // i: get length/literal/eob next\nvar IC_LENEXT = 2; // i: getting length extra (have base)\nvar IC_DIST = 3; // i: get distance next\nvar IC_DISTEXT = 4; // i: getting distance extra\nvar IC_COPY = 5; // o: copying bytes in window, waiting for space\nvar IC_LIT = 6; // o: got literal, waiting for output space\nvar IC_WASH = 7; // o: got eob, possibly still output waiting\nvar IC_END = 8; // x: got eob and all data flushed\nvar IC_BADCODE = 9; // x: got error\n\nfunction InfCodes() {}\n\nInfCodes.prototype.init = function (bl, bd, tl, tl_index, td, td_index, z) {\n  this.mode = IC_START;\n  this.lbits = bl;\n  this.dbits = bd;\n  this.ltree = tl;\n  this.ltree_index = tl_index;\n  this.dtree = td;\n  this.dtree_index = td_index;\n  this.tree = null;\n};\n\nInfCodes.prototype.proc = function (s, z, r) {\n  var j; // temporary storage\n  var t; // temporary pointer (int[])\n  var tindex; // temporary pointer\n  var e; // extra bits or operation\n  var b = 0; // bit buffer\n  var k = 0; // bits in bit buffer\n  var p = 0; // input data pointer\n  var n; // bytes available there\n  var q; // output window write pointer\n  var m; // bytes to end of window or read pointer\n  var f; // pointer to copy strings from\n\n  // copy input/output information to locals (UPDATE macro restores)\n  p = z.next_in_index;n = z.avail_in;b = s.bitb;k = s.bitk;\n  q = s.write;m = q < s.read ? s.read - q - 1 : s.end - q;\n\n  // process input and output based on current state\n  while (true) {\n    switch (this.mode) {\n      // waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:\n        // x: set up for LEN\n        if (m >= 258 && n >= 10) {\n\n          s.bitb = b;s.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          s.write = q;\n          r = this.inflate_fast(this.lbits, this.dbits, this.ltree, this.ltree_index, this.dtree, this.dtree_index, s, z);\n\n          p = z.next_in_index;n = z.avail_in;b = s.bitb;k = s.bitk;\n          q = s.write;m = q < s.read ? s.read - q - 1 : s.end - q;\n\n          if (r != Z_OK) {\n            this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n            break;\n          }\n        }\n        this.need = this.lbits;\n        this.tree = this.ltree;\n        this.tree_index = this.ltree_index;\n\n        this.mode = IC_LEN;\n      case IC_LEN:\n        // i: get length/literal/eob next\n        j = this.need;\n\n        while (k < j) {\n          if (n != 0) r = Z_OK;else {\n\n            s.bitb = b;s.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n          }\n          n--;\n          b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n\n        tindex = (this.tree_index + (b & inflate_mask[j])) * 3;\n\n        b >>>= this.tree[tindex + 1];\n        k -= this.tree[tindex + 1];\n\n        e = this.tree[tindex];\n\n        if (e == 0) {\n          // literal\n          this.lit = this.tree[tindex + 2];\n          this.mode = IC_LIT;\n          break;\n        }\n        if ((e & 16) != 0) {\n          // length\n          this.get = e & 15;\n          this.len = this.tree[tindex + 2];\n          this.mode = IC_LENEXT;\n          break;\n        }\n        if ((e & 64) == 0) {\n          // next table\n          this.need = e;\n          this.tree_index = tindex / 3 + this.tree[tindex + 2];\n          break;\n        }\n        if ((e & 32) != 0) {\n          // end of block\n          this.mode = IC_WASH;\n          break;\n        }\n        this.mode = IC_BADCODE; // invalid code\n        z.msg = \"invalid literal/length code\";\n        r = Z_DATA_ERROR;\n\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n        return s.inflate_flush(z, r);\n\n      case IC_LENEXT:\n        // i: getting length extra (have base)\n        j = this.get;\n\n        while (k < j) {\n          if (n != 0) r = Z_OK;else {\n\n            s.bitb = b;s.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n          }\n          n--;b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n\n        this.len += b & inflate_mask[j];\n\n        b >>= j;\n        k -= j;\n\n        this.need = this.dbits;\n        this.tree = this.dtree;\n        this.tree_index = this.dtree_index;\n        this.mode = IC_DIST;\n      case IC_DIST:\n        // i: get distance next\n        j = this.need;\n\n        while (k < j) {\n          if (n != 0) r = Z_OK;else {\n\n            s.bitb = b;s.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n          }\n          n--;b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n\n        tindex = (this.tree_index + (b & inflate_mask[j])) * 3;\n\n        b >>= this.tree[tindex + 1];\n        k -= this.tree[tindex + 1];\n\n        e = this.tree[tindex];\n        if ((e & 16) != 0) {\n          // distance\n          this.get = e & 15;\n          this.dist = this.tree[tindex + 2];\n          this.mode = IC_DISTEXT;\n          break;\n        }\n        if ((e & 64) == 0) {\n          // next table\n          this.need = e;\n          this.tree_index = tindex / 3 + this.tree[tindex + 2];\n          break;\n        }\n        this.mode = IC_BADCODE; // invalid code\n        z.msg = \"invalid distance code\";\n        r = Z_DATA_ERROR;\n\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n        return s.inflate_flush(z, r);\n\n      case IC_DISTEXT:\n        // i: getting distance extra\n        j = this.get;\n\n        while (k < j) {\n          if (n != 0) r = Z_OK;else {\n\n            s.bitb = b;s.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            s.write = q;\n            return s.inflate_flush(z, r);\n          }\n          n--;b |= (z.next_in[p++] & 0xff) << k;\n          k += 8;\n        }\n\n        this.dist += b & inflate_mask[j];\n\n        b >>= j;\n        k -= j;\n\n        this.mode = IC_COPY;\n      case IC_COPY:\n        // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while (f < 0) {\n          // modulo window size-\"while\" instead\n          f += s.end; // of \"if\" handles invalid distances\n        }\n        while (this.len != 0) {\n\n          if (m == 0) {\n            if (q == s.end && s.read != 0) {\n              q = 0;m = q < s.read ? s.read - q - 1 : s.end - q;\n            }\n            if (m == 0) {\n              s.write = q;r = s.inflate_flush(z, r);\n              q = s.write;m = q < s.read ? s.read - q - 1 : s.end - q;\n\n              if (q == s.end && s.read != 0) {\n                q = 0;m = q < s.read ? s.read - q - 1 : s.end - q;\n              }\n\n              if (m == 0) {\n                s.bitb = b;s.bitk = k;\n                z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n                s.write = q;\n                return s.inflate_flush(z, r);\n              }\n            }\n          }\n\n          s.window[q++] = s.window[f++];m--;\n\n          if (f == s.end) f = 0;\n          this.len--;\n        }\n        this.mode = IC_START;\n        break;\n      case IC_LIT:\n        // o: got literal, waiting for output space\n        if (m == 0) {\n          if (q == s.end && s.read != 0) {\n            q = 0;m = q < s.read ? s.read - q - 1 : s.end - q;\n          }\n          if (m == 0) {\n            s.write = q;r = s.inflate_flush(z, r);\n            q = s.write;m = q < s.read ? s.read - q - 1 : s.end - q;\n\n            if (q == s.end && s.read != 0) {\n              q = 0;m = q < s.read ? s.read - q - 1 : s.end - q;\n            }\n            if (m == 0) {\n              s.bitb = b;s.bitk = k;\n              z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n              s.write = q;\n              return s.inflate_flush(z, r);\n            }\n          }\n        }\n        r = Z_OK;\n\n        s.window[q++] = this.lit;m--;\n\n        this.mode = IC_START;\n        break;\n      case IC_WASH:\n        // o: got eob, possibly more output\n        if (k > 7) {\n          // return unused byte, if any\n          k -= 8;\n          n++;\n          p--; // can always return one\n        }\n\n        s.write = q;r = s.inflate_flush(z, r);\n        q = s.write;m = q < s.read ? s.read - q - 1 : s.end - q;\n\n        if (s.read != s.write) {\n          s.bitb = b;s.bitk = k;\n          z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n          s.write = q;\n          return s.inflate_flush(z, r);\n        }\n        this.mode = IC_END;\n      case IC_END:\n        r = Z_STREAM_END;\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n        return s.inflate_flush(z, r);\n\n      case IC_BADCODE:\n        // x: got error\n\n        r = Z_DATA_ERROR;\n\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n        return s.inflate_flush(z, r);\n\n      default:\n        r = Z_STREAM_ERROR;\n\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n        return s.inflate_flush(z, r);\n    }\n  }\n};\n\nInfCodes.prototype.free = function (z) {}\n//  ZFREE(z, c);\n\n\n// Called with number of bytes left to write in window at least 258\n// (the maximum string length) and number of input bytes available\n// at least ten.  The ten bytes are six bytes for the longest length/\n// distance pair plus four bytes for overloading the bit buffer.\n\n;InfCodes.prototype.inflate_fast = function (bl, bd, tl, tl_index, td, td_index, s, z) {\n  var t; // temporary pointer\n  var tp; // temporary pointer (int[])\n  var tp_index; // temporary pointer\n  var e; // extra bits or operation\n  var b; // bit buffer\n  var k; // bits in bit buffer\n  var p; // input data pointer\n  var n; // bytes available there\n  var q; // output window write pointer\n  var m; // bytes to end of window or read pointer\n  var ml; // mask for literal/length tree\n  var md; // mask for distance tree\n  var c; // bytes to copy\n  var d; // distance back to copy from\n  var r; // copy source pointer\n\n  var tp_index_t_3; // (tp_index+t)*3\n\n  // load input, output, bit values\n  p = z.next_in_index;n = z.avail_in;b = s.bitb;k = s.bitk;\n  q = s.write;m = q < s.read ? s.read - q - 1 : s.end - q;\n\n  // initialize masks\n  ml = inflate_mask[bl];\n  md = inflate_mask[bd];\n\n  // do until not enough input or output space for fast loop\n  do {\n    // assume called with m >= 258 && n >= 10\n    // get literal/length code\n    while (k < 20) {\n      // max bits for literal/length code\n      n--;\n      b |= (z.next_in[p++] & 0xff) << k;k += 8;\n    }\n\n    t = b & ml;\n    tp = tl;\n    tp_index = tl_index;\n    tp_index_t_3 = (tp_index + t) * 3;\n    if ((e = tp[tp_index_t_3]) == 0) {\n      b >>= tp[tp_index_t_3 + 1];k -= tp[tp_index_t_3 + 1];\n\n      s.window[q++] = tp[tp_index_t_3 + 2];\n      m--;\n      continue;\n    }\n    do {\n\n      b >>= tp[tp_index_t_3 + 1];k -= tp[tp_index_t_3 + 1];\n\n      if ((e & 16) != 0) {\n        e &= 15;\n        c = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n        b >>= e;k -= e;\n\n        // decode distance base of block to copy\n        while (k < 15) {\n          // max bits for distance code\n          n--;\n          b |= (z.next_in[p++] & 0xff) << k;k += 8;\n        }\n\n        t = b & md;\n        tp = td;\n        tp_index = td_index;\n        tp_index_t_3 = (tp_index + t) * 3;\n        e = tp[tp_index_t_3];\n\n        do {\n\n          b >>= tp[tp_index_t_3 + 1];k -= tp[tp_index_t_3 + 1];\n\n          if ((e & 16) != 0) {\n            // get extra bits to add to distance base\n            e &= 15;\n            while (k < e) {\n              // get extra bits (up to 13)\n              n--;\n              b |= (z.next_in[p++] & 0xff) << k;k += 8;\n            }\n\n            d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n            b >>= e;k -= e;\n\n            // do the copy\n            m -= c;\n            if (q >= d) {\n              // offset before dest\n              //  just copy\n              r = q - d;\n              if (q - r > 0 && 2 > q - r) {\n                s.window[q++] = s.window[r++]; // minimum count is three,\n                s.window[q++] = s.window[r++]; // so unroll loop a little\n                c -= 2;\n              } else {\n                s.window[q++] = s.window[r++]; // minimum count is three,\n                s.window[q++] = s.window[r++]; // so unroll loop a little\n                c -= 2;\n              }\n            } else {\n              // else offset after destination\n              r = q - d;\n              do {\n                r += s.end; // force pointer in window\n              } while (r < 0); // covers invalid distances\n              e = s.end - r;\n              if (c > e) {\n                // if source crosses,\n                c -= e; // wrapped copy\n                if (q - r > 0 && e > q - r) {\n                  do {\n                    s.window[q++] = s.window[r++];\n                  } while (--e != 0);\n                } else {\n                  arrayCopy(s.window, r, s.window, q, e);\n                  q += e;r += e;e = 0;\n                }\n                r = 0; // copy rest from start of window\n              }\n            }\n\n            // copy all or what's left\n            do {\n              s.window[q++] = s.window[r++];\n            } while (--c != 0);\n            break;\n          } else if ((e & 64) == 0) {\n            t += tp[tp_index_t_3 + 2];\n            t += b & inflate_mask[e];\n            tp_index_t_3 = (tp_index + t) * 3;\n            e = tp[tp_index_t_3];\n          } else {\n            z.msg = \"invalid distance code\";\n\n            c = z.avail_in - n;c = k >> 3 < c ? k >> 3 : c;n += c;p -= c;k -= c << 3;\n\n            s.bitb = b;s.bitk = k;\n            z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n            s.write = q;\n\n            return Z_DATA_ERROR;\n          }\n        } while (true);\n        break;\n      }\n\n      if ((e & 64) == 0) {\n        t += tp[tp_index_t_3 + 2];\n        t += b & inflate_mask[e];\n        tp_index_t_3 = (tp_index + t) * 3;\n        if ((e = tp[tp_index_t_3]) == 0) {\n\n          b >>= tp[tp_index_t_3 + 1];k -= tp[tp_index_t_3 + 1];\n\n          s.window[q++] = tp[tp_index_t_3 + 2];\n          m--;\n          break;\n        }\n      } else if ((e & 32) != 0) {\n\n        c = z.avail_in - n;c = k >> 3 < c ? k >> 3 : c;n += c;p -= c;k -= c << 3;\n\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n\n        return Z_STREAM_END;\n      } else {\n        z.msg = \"invalid literal/length code\";\n\n        c = z.avail_in - n;c = k >> 3 < c ? k >> 3 : c;n += c;p -= c;k -= c << 3;\n\n        s.bitb = b;s.bitk = k;\n        z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n        s.write = q;\n\n        return Z_DATA_ERROR;\n      }\n    } while (true);\n  } while (m >= 258 && n >= 10);\n\n  // not enough input or output--restore pointers and return\n  c = z.avail_in - n;c = k >> 3 < c ? k >> 3 : c;n += c;p -= c;k -= c << 3;\n\n  s.bitb = b;s.bitk = k;\n  z.avail_in = n;z.total_in += p - z.next_in_index;z.next_in_index = p;\n  s.write = q;\n\n  return Z_OK;\n};\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {}\n\nInfTree.prototype.huft_build = function (b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n  // Given a list of code lengths and a maximum table size, make a set of\n  // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n  // if the given code set is incomplete (the tables are still built in this\n  // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n  // lengths), or Z_MEM_ERROR if not enough memory.\n\n  var a; // counter for codes of length k\n  var f; // i repeats in table every f entries\n  var g; // maximum code length\n  var h; // table level\n  var i; // counter, current code\n  var j; // counter\n  var k; // number of bits in current code\n  var l; // bits per table (returned in m)\n  var mask; // (1 << w) - 1, to avoid cc -O bug on HP\n  var p; // pointer into c[], b[], or v[]\n  var q; // points to current table\n  var w; // bits before this table == (l * h)\n  var xp; // pointer into x\n  var y; // number of dummy codes added\n  var z; // number of entries in current table\n\n  // Generate counts for each bit length\n\n  p = 0;i = n;\n  do {\n    this.c[b[bindex + p]]++;p++;i--; // assume all entries <= BMAX\n  } while (i != 0);\n\n  if (this.c[0] == n) {\n    // null input--all zero length codes\n    t[0] = -1;\n    m[0] = 0;\n    return Z_OK;\n  }\n\n  // Find minimum and maximum length, bound *m by those\n  l = m[0];\n  for (j = 1; j <= BMAX; j++) {\n    if (this.c[j] != 0) break;\n  }k = j; // minimum code length\n  if (l < j) {\n    l = j;\n  }\n  for (i = BMAX; i != 0; i--) {\n    if (this.c[i] != 0) break;\n  }\n  g = i; // maximum code length\n  if (l > i) {\n    l = i;\n  }\n  m[0] = l;\n\n  // Adjust last length count to fill out codes, if needed\n  for (y = 1 << j; j < i; j++, y <<= 1) {\n    if ((y -= this.c[j]) < 0) {\n      return Z_DATA_ERROR;\n    }\n  }\n  if ((y -= this.c[i]) < 0) {\n    return Z_DATA_ERROR;\n  }\n  this.c[i] += y;\n\n  // Generate starting offsets into the value table for each length\n  this.x[1] = j = 0;\n  p = 1;xp = 2;\n  while (--i != 0) {\n    // note that i == g from above\n    this.x[xp] = j += this.c[p];\n    xp++;\n    p++;\n  }\n\n  // Make a table of values in order of bit lengths\n  i = 0;p = 0;\n  do {\n    if ((j = b[bindex + p]) != 0) {\n      this.v[this.x[j]++] = i;\n    }\n    p++;\n  } while (++i < n);\n  n = this.x[g]; // set n to length of v\n\n  // Generate the Huffman codes and for each, make the table entries\n  this.x[0] = i = 0; // first Huffman code is zero\n  p = 0; // grab values in bit order\n  h = -1; // no tables yet--level -1\n  w = -l; // bits decoded == (l * h)\n  this.u[0] = 0; // just to keep compilers happy\n  q = 0; // ditto\n  z = 0; // ditto\n\n  // go through the bit lengths (k already is bits in shortest code)\n  for (; k <= g; k++) {\n    a = this.c[k];\n    while (a-- != 0) {\n      // here i is the Huffman code of length k bits for value *p\n      // make tables up to required level\n      while (k > w + l) {\n        h++;\n        w += l; // previous table always l bits\n        // compute minimum size table less than or equal to l bits\n        z = g - w;\n        z = z > l ? l : z; // table size upper limit\n        if ((f = 1 << (j = k - w)) > a + 1) {\n          // try a k-w bit table\n          // too few codes for k-w bit table\n          f -= a + 1; // deduct codes from patterns left\n          xp = k;\n          if (j < z) {\n            while (++j < z) {\n              // try smaller tables up to z bits\n              if ((f <<= 1) <= this.c[++xp]) break; // enough codes to use up j bits\n              f -= this.c[xp]; // else deduct codes from patterns\n            }\n          }\n        }\n        z = 1 << j; // table entries for j-bit table\n\n        // allocate new table\n        if (this.hn[0] + z > MANY) {\n          // (note: doesn't matter for fixed)\n          return Z_DATA_ERROR; // overflow of MANY\n        }\n        this.u[h] = q = /*hp+*/this.hn[0]; // DEBUG\n        this.hn[0] += z;\n\n        // connect to last table, if there is one\n        if (h != 0) {\n          this.x[h] = i; // save pattern for backing up\n          this.r[0] = j; // bits in this table\n          this.r[1] = l; // bits to dump before this table\n          j = i >>> w - l;\n          this.r[2] = q - this.u[h - 1] - j; // offset to this table\n          arrayCopy(this.r, 0, hp, (this.u[h - 1] + j) * 3, 3); // connect to last table\n        } else {\n          t[0] = q; // first table is returned result\n        }\n      }\n\n      // set up table entry in r\n      this.r[1] = k - w;\n      if (p >= n) {\n        this.r[0] = 128 + 64; // out of values--invalid code\n      } else if (v[p] < s) {\n        this.r[0] = this.v[p] < 256 ? 0 : 32 + 64; // 256 is end-of-block\n        this.r[2] = this.v[p++]; // simple code is just the value\n      } else {\n        this.r[0] = e[this.v[p] - s] + 16 + 64; // non-simple--look up in lists\n        this.r[2] = d[this.v[p++] - s];\n      }\n\n      // fill code-like entries with r\n      f = 1 << k - w;\n      for (j = i >>> w; j < z; j += f) {\n        arrayCopy(this.r, 0, hp, (q + j) * 3, 3);\n      }\n\n      // backwards increment the k-bit code i\n      for (j = 1 << k - 1; (i & j) != 0; j >>>= 1) {\n        i ^= j;\n      }\n      i ^= j;\n\n      // backup over finished tables\n      mask = (1 << w) - 1; // needed on HP, cc -O bug\n      while ((i & mask) != this.x[h]) {\n        h--; // don't need to update q\n        w -= l;\n        mask = (1 << w) - 1;\n      }\n    }\n  }\n  // Return Z_BUF_ERROR if we were given an incomplete table\n  return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n};\n\nInfTree.prototype.inflate_trees_bits = function (c, bb, tb, hp, z) {\n  var result;\n  this.initWorkArea(19);\n  this.hn[0] = 0;\n  result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n  if (result == Z_DATA_ERROR) {\n    z.msg = \"oversubscribed dynamic bit lengths tree\";\n  } else if (result == Z_BUF_ERROR || bb[0] == 0) {\n    z.msg = \"incomplete dynamic bit lengths tree\";\n    result = Z_DATA_ERROR;\n  }\n  return result;\n};\n\nInfTree.prototype.inflate_trees_dynamic = function (nl, nd, c, bl, bd, tl, td, hp, z) {\n  var result;\n\n  // build literal/length tree\n  this.initWorkArea(288);\n  this.hn[0] = 0;\n  result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n  if (result != Z_OK || bl[0] == 0) {\n    if (result == Z_DATA_ERROR) {\n      z.msg = \"oversubscribed literal/length tree\";\n    } else if (result != Z_MEM_ERROR) {\n      z.msg = \"incomplete literal/length tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n  }\n\n  // build distance tree\n  this.initWorkArea(288);\n  result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n  if (result != Z_OK || bd[0] == 0 && nl > 257) {\n    if (result == Z_DATA_ERROR) {\n      z.msg = \"oversubscribed distance tree\";\n    } else if (result == Z_BUF_ERROR) {\n      z.msg = \"incomplete distance tree\";\n      result = Z_DATA_ERROR;\n    } else if (result != Z_MEM_ERROR) {\n      z.msg = \"empty distance tree with lengths\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n  }\n\n  return Z_OK;\n};\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result \n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n  bl[0] = fixed_bl;\n  bd[0] = fixed_bd;\n  tl[0] = fixed_tl;\n  td[0] = fixed_td;\n  return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function (vsize) {\n  if (this.hn == null) {\n    this.hn = new Int32Array(1);\n    this.v = new Int32Array(vsize);\n    this.c = new Int32Array(BMAX + 1);\n    this.r = new Int32Array(3);\n    this.u = new Int32Array(BMAX);\n    this.x = new Int32Array(BMAX + 1);\n  }\n  if (this.v.length < vsize) {\n    this.v = new Int32Array(vsize);\n  }\n  for (var i = 0; i < vsize; i++) {\n    this.v[i] = 0;\n  }\n  for (var i = 0; i < BMAX + 1; i++) {\n    this.c[i] = 0;\n  }\n  for (var i = 0; i < 3; i++) {\n    this.r[i] = 0;\n  }\n  //  for(int i=0; i<BMAX; i++){u[i]=0;}\n  arrayCopy(this.c, 0, this.u, 0, BMAX);\n  //  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n  arrayCopy(this.c, 0, this.x, 0, BMAX + 1);\n};\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = typeof testArray.subarray === 'function';\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n  if (count == 0) {\n    return;\n  }\n  if (!src) {\n    throw \"Undef src\";\n  } else if (!dest) {\n    throw \"Undef dest\";\n  }\n\n  if (srcOffset == 0 && count == src.length) {\n    arrayCopy_fast(src, dest, destOffset);\n  } else if (hasSubarray) {\n    arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset);\n  } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n    arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n  } else {\n    arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n  }\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n  // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n  for (var i = 0; i < count; ++i) {\n    dest[destOffset + i] = src[srcOffset + i];\n  }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n  dest.set(src, destOffset);\n}\n\n// largest prime smaller than 65536\nvar ADLER_BASE = 65521;\n// NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX = 5552;\n\nfunction adler32(adler, /* byte[] */buf, index, len) {\n  if (buf == null) {\n    return 1;\n  }\n\n  var s1 = adler & 0xffff;\n  var s2 = adler >> 16 & 0xffff;\n  var k;\n\n  while (len > 0) {\n    k = len < ADLER_NMAX ? len : ADLER_NMAX;\n    len -= k;\n    while (k >= 16) {\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      s1 += buf[index++] & 0xff;s2 += s1;\n      k -= 16;\n    }\n    if (k != 0) {\n      do {\n        s1 += buf[index++] & 0xff;s2 += s1;\n      } while (--k != 0);\n    }\n    s1 %= ADLER_BASE;\n    s2 %= ADLER_BASE;\n  }\n  return s2 << 16 | s1;\n}\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n  if (!start) {\n    buffer = new Uint8Array(buffer);\n  } else {\n    buffer = new Uint8Array(buffer, start, length);\n  }\n\n  var z = new ZStream();\n  z.inflateInit(DEF_WBITS, true);\n  z.next_in = buffer;\n  z.next_in_index = 0;\n  z.avail_in = buffer.length;\n\n  var oBlockList = [];\n  var totalSize = 0;\n  while (true) {\n    var obuf = new Uint8Array(32000);\n    z.next_out = obuf;\n    z.next_out_index = 0;\n    z.avail_out = obuf.length;\n    var status = z.inflate(Z_NO_FLUSH);\n    if (status != Z_OK && status != Z_STREAM_END) {\n      throw z.msg;\n    }\n    if (z.avail_out != 0) {\n      var newob = new Uint8Array(obuf.length - z.avail_out);\n      arrayCopy(obuf, 0, newob, 0, obuf.length - z.avail_out);\n      obuf = newob;\n    }\n    oBlockList.push(obuf);\n    totalSize += obuf.length;\n    if (status == Z_STREAM_END) {\n      break;\n    }\n  }\n\n  if (afterUncOffset) {\n    afterUncOffset[0] = (start || 0) + z.next_in_index;\n  }\n\n  if (oBlockList.length == 1) {\n    return oBlockList[0].buffer;\n  } else {\n    var out = new Uint8Array(totalSize);\n    var cursor = 0;\n    for (var i = 0; i < oBlockList.length; ++i) {\n      var b = oBlockList[i];\n      arrayCopy(b, 0, out, cursor, b.length);\n      cursor += b.length;\n    }\n    return out.buffer;\n  }\n}\n\nexports.jszlib_inflate_buffer = jszlib_inflate_buffer;\nexports.arrayCopy = arrayCopy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/vendor/inflate.js\n");

/***/ }),

/***/ "../MLVPanel/src/vendor/zlib_and_gzip.js":
/*!******************************************!*\
  !*** .Panel/src/vendor/zlib_and_gzip.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @fileoverview Zlib namespace. Zlib の仕様に準拠した圧縮は Zlib.Deflate で実装\n * されている. これは Inflate との共存を考慮している為.\n */\n\nvar USE_TYPEDARRAY = true;\nvar ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE = 65000;\n\nvar Zlib = {\n  Huffman: {},\n  Util: {},\n  CRC32: {}\n};\n\n/**\n * Compression Method\n * @enum {number}\n */\nZlib.CompressionMethod = {\n  DEFLATE: 8,\n  RESERVED: 15\n};\n\n/**\n * @param {Object=} opt_params options.\n * @constructor\n */\nZlib.Zip = function (opt_params) {\n  opt_params = opt_params || {};\n  /** @type {Array.<{\n   *   buffer: !(Array.<number>|Uint8Array),\n   *   option: Object,\n   *   compressed: boolean,\n   *   encrypted: boolean,\n   *   size: number,\n   *   crc32: number\n   * }>} */\n  this.files = [];\n  /** @type {(Array.<number>|Uint8Array)} */\n  this.comment = opt_params['comment'];\n  /** @type {(Array.<number>|Uint8Array)} */\n  this.password;\n};\n\n/**\n * @enum {number}\n */\nZlib.Zip.CompressionMethod = {\n  STORE: 0,\n  DEFLATE: 8\n};\n\n/**\n * @enum {number}\n */\nZlib.Zip.OperatingSystem = {\n  MSDOS: 0,\n  UNIX: 3,\n  MACINTOSH: 7\n};\n\n/**\n * @enum {number}\n */\nZlib.Zip.Flags = {\n  ENCRYPT: 0x0001,\n  DESCRIPTOR: 0x0008,\n  UTF8: 0x0800\n};\n\n/**\n * @type {Array.<number>}\n * @const\n */\nZlib.Zip.FileHeaderSignature = [0x50, 0x4b, 0x01, 0x02];\n\n/**\n * @type {Array.<number>}\n * @const\n */\nZlib.Zip.LocalFileHeaderSignature = [0x50, 0x4b, 0x03, 0x04];\n\n/**\n * @type {Array.<number>}\n * @const\n */\nZlib.Zip.CentralDirectorySignature = [0x50, 0x4b, 0x05, 0x06];\n\n/**\n * @param {Array.<number>|Uint8Array} input\n * @param {Object=} opt_params options.\n */\nZlib.Zip.prototype.addFile = function (input, opt_params) {\n  opt_params = opt_params || {};\n  /** @type {string} */\n  var filename = '' || opt_params['filename'];\n  /** @type {boolean} */\n  var compressed;\n  /** @type {number} */\n  var size = input.length;\n  /** @type {number} */\n  var crc32 = 0;\n\n  if (USE_TYPEDARRAY && input instanceof Array) {\n    input = new Uint8Array(input);\n  }\n\n  // default\n  if (typeof opt_params['compressionMethod'] !== 'number') {\n    opt_params['compressionMethod'] = Zlib.Zip.CompressionMethod.DEFLATE;\n  }\n\n  // その場で圧縮する場合\n  if (opt_params['compress']) {\n    switch (opt_params['compressionMethod']) {\n      case Zlib.Zip.CompressionMethod.STORE:\n        break;\n      case Zlib.Zip.CompressionMethod.DEFLATE:\n        crc32 = Zlib.CRC32.calc(input);\n        input = this.deflateWithOption(input, opt_params);\n        compressed = true;\n        break;\n      default:\n        throw new Error('unknown compression method:' + opt_params['compressionMethod']);\n    }\n  }\n\n  this.files.push({\n    buffer: input,\n    option: opt_params,\n    compressed: compressed,\n    encrypted: false,\n    size: size,\n    crc32: crc32\n  });\n};\n\n/**\n * @param {(Array.<number>|Uint8Array)} password\n */\nZlib.Zip.prototype.setPassword = function (password) {\n  this.password = password;\n};\n\nZlib.Zip.prototype.compress = function () {\n  /** @type {Array.<{\n   *   buffer: !(Array.<number>|Uint8Array),\n   *   option: Object,\n   *   compressed: boolean,\n   *   encrypted: boolean,\n   *   size: number,\n   *   crc32: number\n   * }>} */\n  var files = this.files;\n  /** @type {{\n   *   buffer: !(Array.<number>|Uint8Array),\n   *   option: Object,\n   *   compressed: boolean,\n   *   encrypted: boolean,\n   *   size: number,\n   *   crc32: number\n   * }} */\n  var file;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var output;\n  /** @type {number} */\n  var op1;\n  /** @type {number} */\n  var op2;\n  /** @type {number} */\n  var op3;\n  /** @type {number} */\n  var localFileSize = 0;\n  /** @type {number} */\n  var centralDirectorySize = 0;\n  /** @type {number} */\n  var endOfCentralDirectorySize;\n  /** @type {number} */\n  var offset;\n  /** @type {number} */\n  var needVersion;\n  /** @type {number} */\n  var flags;\n  /** @type {Zlib.Zip.CompressionMethod} */\n  var compressionMethod;\n  /** @type {Date} */\n  var date;\n  /** @type {number} */\n  var crc32;\n  /** @type {number} */\n  var size;\n  /** @type {number} */\n  var plainSize;\n  /** @type {number} */\n  var filenameLength;\n  /** @type {number} */\n  var extraFieldLength;\n  /** @type {number} */\n  var commentLength;\n  /** @type {(Array.<number>|Uint8Array)} */\n  var filename;\n  /** @type {(Array.<number>|Uint8Array)} */\n  var extraField;\n  /** @type {(Array.<number>|Uint8Array)} */\n  var comment;\n  /** @type {(Array.<number>|Uint8Array)} */\n  var buffer;\n  /** @type {*} */\n  var tmp;\n  /** @type {Array.<number>|Uint32Array|Object} */\n  var key;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n  /** @type {number} */\n  var j;\n  /** @type {number} */\n  var jl;\n\n  // ファイルの圧縮\n  for (i = 0, il = files.length; i < il; ++i) {\n    file = files[i];\n    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;\n    extraFieldLength = file.option['extraField'] ? file.option['extraField'].length : 0;\n    commentLength = file.option['comment'] ? file.option['comment'].length : 0;\n\n    // 圧縮されていなかったら圧縮\n    if (!file.compressed) {\n      // 圧縮前に CRC32 の計算をしておく\n      file.crc32 = Zlib.CRC32.calc(file.buffer);\n\n      switch (file.option['compressionMethod']) {\n        case Zlib.Zip.CompressionMethod.STORE:\n          break;\n        case Zlib.Zip.CompressionMethod.DEFLATE:\n          file.buffer = this.deflateWithOption(file.buffer, file.option);\n          file.compressed = true;\n          break;\n        default:\n          throw new Error('unknown compression method:' + file.option['compressionMethod']);\n      }\n    }\n\n    // encryption\n    if (file.option['password'] !== void 0 || this.password !== void 0) {\n      // init encryption\n      key = this.createEncryptionKey(file.option['password'] || this.password);\n\n      // add header\n      buffer = file.buffer;\n      if (USE_TYPEDARRAY) {\n        tmp = new Uint8Array(buffer.length + 12);\n        tmp.set(buffer, 12);\n        buffer = tmp;\n      } else {\n        buffer.unshift(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n      }\n\n      for (j = 0; j < 12; ++j) {\n        buffer[j] = this.encode(key, i === 11 ? file.crc32 & 0xff : Math.random() * 256 | 0);\n      }\n\n      // data encryption\n      for (jl = buffer.length; j < jl; ++j) {\n        buffer[j] = this.encode(key, buffer[j]);\n      }\n      file.buffer = buffer;\n    }\n\n    // 必要バッファサイズの計算\n    localFileSize +=\n    // local file header\n    30 + filenameLength +\n    // file data\n    file.buffer.length;\n\n    centralDirectorySize +=\n    // file header\n    46 + filenameLength + commentLength;\n  }\n\n  // end of central directory\n  endOfCentralDirectorySize = 22 + (this.comment ? this.comment.length : 0);\n  output = new (USE_TYPEDARRAY ? Uint8Array : Array)(localFileSize + centralDirectorySize + endOfCentralDirectorySize);\n  op1 = 0;\n  op2 = localFileSize;\n  op3 = op2 + centralDirectorySize;\n\n  // ファイルの圧縮\n  for (i = 0, il = files.length; i < il; ++i) {\n    file = files[i];\n    filenameLength = file.option['filename'] ? file.option['filename'].length : 0;\n    extraFieldLength = 0; // TODO\n    commentLength = file.option['comment'] ? file.option['comment'].length : 0;\n\n    //-------------------------------------------------------------------------\n    // local file header & file header\n    //-------------------------------------------------------------------------\n\n    offset = op1;\n\n    // signature\n    // local file header\n    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[0];\n    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[1];\n    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[2];\n    output[op1++] = Zlib.Zip.LocalFileHeaderSignature[3];\n    // file header\n    output[op2++] = Zlib.Zip.FileHeaderSignature[0];\n    output[op2++] = Zlib.Zip.FileHeaderSignature[1];\n    output[op2++] = Zlib.Zip.FileHeaderSignature[2];\n    output[op2++] = Zlib.Zip.FileHeaderSignature[3];\n\n    // compressor info\n    needVersion = 20;\n    output[op2++] = needVersion & 0xff;\n    output[op2++] =\n    /** @type {Zlib.Zip.OperatingSystem} */\n    file.option['os'] || Zlib.Zip.OperatingSystem.MSDOS;\n\n    // need version\n    output[op1++] = output[op2++] = needVersion & 0xff;\n    output[op1++] = output[op2++] = needVersion >> 8 & 0xff;\n\n    // general purpose bit flag\n    flags = 0;\n    if (file.option['password'] || this.password) {\n      flags |= Zlib.Zip.Flags.ENCRYPT;\n    }\n    output[op1++] = output[op2++] = flags & 0xff;\n    output[op1++] = output[op2++] = flags >> 8 & 0xff;\n\n    // compression method\n    compressionMethod =\n    /** @type {Zlib.Zip.CompressionMethod} */\n    file.option['compressionMethod'];\n    output[op1++] = output[op2++] = compressionMethod & 0xff;\n    output[op1++] = output[op2++] = compressionMethod >> 8 & 0xff;\n\n    // date\n    date = /** @type {(Date|undefined)} */file.option['date'] || new Date();\n    output[op1++] = output[op2++] = (date.getMinutes() & 0x7) << 5 | (date.getSeconds() / 2 | 0);\n    output[op1++] = output[op2++] = date.getHours() << 3 | date.getMinutes() >> 3;\n    //\n    output[op1++] = output[op2++] = (date.getMonth() + 1 & 0x7) << 5 | date.getDate();\n    output[op1++] = output[op2++] = (date.getFullYear() - 1980 & 0x7f) << 1 | date.getMonth() + 1 >> 3;\n\n    // CRC-32\n    crc32 = file.crc32;\n    output[op1++] = output[op2++] = crc32 & 0xff;\n    output[op1++] = output[op2++] = crc32 >> 8 & 0xff;\n    output[op1++] = output[op2++] = crc32 >> 16 & 0xff;\n    output[op1++] = output[op2++] = crc32 >> 24 & 0xff;\n\n    // compressed size\n    size = file.buffer.length;\n    output[op1++] = output[op2++] = size & 0xff;\n    output[op1++] = output[op2++] = size >> 8 & 0xff;\n    output[op1++] = output[op2++] = size >> 16 & 0xff;\n    output[op1++] = output[op2++] = size >> 24 & 0xff;\n\n    // uncompressed size\n    plainSize = file.size;\n    output[op1++] = output[op2++] = plainSize & 0xff;\n    output[op1++] = output[op2++] = plainSize >> 8 & 0xff;\n    output[op1++] = output[op2++] = plainSize >> 16 & 0xff;\n    output[op1++] = output[op2++] = plainSize >> 24 & 0xff;\n\n    // filename length\n    output[op1++] = output[op2++] = filenameLength & 0xff;\n    output[op1++] = output[op2++] = filenameLength >> 8 & 0xff;\n\n    // extra field length\n    output[op1++] = output[op2++] = extraFieldLength & 0xff;\n    output[op1++] = output[op2++] = extraFieldLength >> 8 & 0xff;\n\n    // file comment length\n    output[op2++] = commentLength & 0xff;\n    output[op2++] = commentLength >> 8 & 0xff;\n\n    // disk number start\n    output[op2++] = 0;\n    output[op2++] = 0;\n\n    // internal file attributes\n    output[op2++] = 0;\n    output[op2++] = 0;\n\n    // external file attributes\n    output[op2++] = 0;\n    output[op2++] = 0;\n    output[op2++] = 0;\n    output[op2++] = 0;\n\n    // relative offset of local header\n    output[op2++] = offset & 0xff;\n    output[op2++] = offset >> 8 & 0xff;\n    output[op2++] = offset >> 16 & 0xff;\n    output[op2++] = offset >> 24 & 0xff;\n\n    // filename\n    filename = file.option['filename'];\n    if (filename) {\n      if (USE_TYPEDARRAY) {\n        output.set(filename, op1);\n        output.set(filename, op2);\n        op1 += filenameLength;\n        op2 += filenameLength;\n      } else {\n        for (j = 0; j < filenameLength; ++j) {\n          output[op1++] = output[op2++] = filename[j];\n        }\n      }\n    }\n\n    // extra field\n    extraField = file.option['extraField'];\n    if (extraField) {\n      if (USE_TYPEDARRAY) {\n        output.set(extraField, op1);\n        output.set(extraField, op2);\n        op1 += extraFieldLength;\n        op2 += extraFieldLength;\n      } else {\n        for (j = 0; j < commentLength; ++j) {\n          output[op1++] = output[op2++] = extraField[j];\n        }\n      }\n    }\n\n    // comment\n    comment = file.option['comment'];\n    if (comment) {\n      if (USE_TYPEDARRAY) {\n        output.set(comment, op2);\n        op2 += commentLength;\n      } else {\n        for (j = 0; j < commentLength; ++j) {\n          output[op2++] = comment[j];\n        }\n      }\n    }\n\n    //-------------------------------------------------------------------------\n    // file data\n    //-------------------------------------------------------------------------\n\n    if (USE_TYPEDARRAY) {\n      output.set(file.buffer, op1);\n      op1 += file.buffer.length;\n    } else {\n      for (j = 0, jl = file.buffer.length; j < jl; ++j) {\n        output[op1++] = file.buffer[j];\n      }\n    }\n  }\n\n  //-------------------------------------------------------------------------\n  // end of central directory\n  //-------------------------------------------------------------------------\n\n  // signature\n  output[op3++] = Zlib.Zip.CentralDirectorySignature[0];\n  output[op3++] = Zlib.Zip.CentralDirectorySignature[1];\n  output[op3++] = Zlib.Zip.CentralDirectorySignature[2];\n  output[op3++] = Zlib.Zip.CentralDirectorySignature[3];\n\n  // number of this disk\n  output[op3++] = 0;\n  output[op3++] = 0;\n\n  // number of the disk with the start of the central directory\n  output[op3++] = 0;\n  output[op3++] = 0;\n\n  // total number of entries in the central directory on this disk\n  output[op3++] = il & 0xff;\n  output[op3++] = il >> 8 & 0xff;\n\n  // total number of entries in the central directory\n  output[op3++] = il & 0xff;\n  output[op3++] = il >> 8 & 0xff;\n\n  // size of the central directory\n  output[op3++] = centralDirectorySize & 0xff;\n  output[op3++] = centralDirectorySize >> 8 & 0xff;\n  output[op3++] = centralDirectorySize >> 16 & 0xff;\n  output[op3++] = centralDirectorySize >> 24 & 0xff;\n\n  // offset of start of central directory with respect to the starting disk number\n  output[op3++] = localFileSize & 0xff;\n  output[op3++] = localFileSize >> 8 & 0xff;\n  output[op3++] = localFileSize >> 16 & 0xff;\n  output[op3++] = localFileSize >> 24 & 0xff;\n\n  // .ZIP file comment length\n  commentLength = this.comment ? this.comment.length : 0;\n  output[op3++] = commentLength & 0xff;\n  output[op3++] = commentLength >> 8 & 0xff;\n\n  // .ZIP file comment\n  if (this.comment) {\n    if (USE_TYPEDARRAY) {\n      output.set(this.comment, op3);\n      op3 += commentLength;\n    } else {\n      for (j = 0, jl = commentLength; j < jl; ++j) {\n        output[op3++] = this.comment[j];\n      }\n    }\n  }\n\n  return output;\n};\n\n/**\n * @param {!(Array.<number>|Uint8Array)} input\n * @param {Object=} opt_params options.\n * @return {!(Array.<number>|Uint8Array)}\n */\nZlib.Zip.prototype.deflateWithOption = function (input, opt_params) {\n  /** @type {Zlib.RawDeflate} */\n  var deflator = new Zlib.RawDeflate(input, opt_params['deflateOption']);\n\n  return deflator.compress();\n};\n\n/**\n * @param {(Array.<number>|Uint32Array)} key\n * @return {number}\n */\nZlib.Zip.prototype.getByte = function (key) {\n  /** @type {number} */\n  var tmp = key[2] & 0xffff | 2;\n\n  return tmp * (tmp ^ 1) >> 8 & 0xff;\n};\n\n/**\n * @param {(Array.<number>|Uint32Array|Object)} key\n * @param {number} n\n * @return {number}\n */\nZlib.Zip.prototype.encode = function (key, n) {\n  /** @type {number} */\n  var tmp = this.getByte( /** @type {(Array.<number>|Uint32Array)} */key);\n\n  this.updateKeys( /** @type {(Array.<number>|Uint32Array)} */key, n);\n\n  return tmp ^ n;\n};\n\n/**\n * @param {(Array.<number>|Uint32Array)} key\n * @param {number} n\n */\nZlib.Zip.prototype.updateKeys = function (key, n) {\n  key[0] = Zlib.CRC32.single(key[0], n);\n  key[1] = (((key[1] + (key[0] & 0xff)) * 20173 >>> 0) * 6681 >>> 0) + 1 >>> 0;\n  key[2] = Zlib.CRC32.single(key[2], key[1] >>> 24);\n};\n\n/**\n * @param {(Array.<number>|Uint8Array)} password\n * @return {!(Array.<number>|Uint32Array|Object)}\n */\nZlib.Zip.prototype.createEncryptionKey = function (password) {\n  /** @type {!(Array.<number>|Uint32Array)} */\n  var key = [305419896, 591751049, 878082192];\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n\n  if (USE_TYPEDARRAY) {\n    key = new Uint32Array(key);\n  }\n\n  for (i = 0, il = password.length; i < il; ++i) {\n    this.updateKeys(key, password[i] & 0xff);\n  }\n\n  return key;\n};\n\n/**\n * build huffman table from length list.\n * @param {!(Array.<number>|Uint8Array)} lengths length list.\n * @return {!Array} huffman table.\n */\nZlib.Huffman.buildHuffmanTable = function (lengths) {\n  /** @type {number} length list size. */\n  var listSize = lengths.length;\n  /** @type {number} max code length for table size. */\n  var maxCodeLength = 0;\n  /** @type {number} min code length for table size. */\n  var minCodeLength = Number.POSITIVE_INFINITY;\n  /** @type {number} table size. */\n  var size;\n  /** @type {!(Array|Uint8Array)} huffman code table. */\n  var table;\n  /** @type {number} bit length. */\n  var bitLength;\n  /** @type {number} huffman code. */\n  var code;\n  /**\n   * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.\n   * @type {number} skip length for table filling.\n   */\n  var skip;\n  /** @type {number} reversed code. */\n  var reversed;\n  /** @type {number} reverse temp. */\n  var rtemp;\n  /** @type {number} loop counter. */\n  var i;\n  /** @type {number} loop limit. */\n  var il;\n  /** @type {number} loop counter. */\n  var j;\n  /** @type {number} table value. */\n  var value;\n\n  // Math.max は遅いので最長の値は for-loop で取得する\n  for (i = 0, il = listSize; i < il; ++i) {\n    if (lengths[i] > maxCodeLength) {\n      maxCodeLength = lengths[i];\n    }\n    if (lengths[i] < minCodeLength) {\n      minCodeLength = lengths[i];\n    }\n  }\n\n  size = 1 << maxCodeLength;\n  table = new (USE_TYPEDARRAY ? Uint32Array : Array)(size);\n\n  // ビット長の短い順からハフマン符号を割り当てる\n  for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {\n    for (i = 0; i < listSize; ++i) {\n      if (lengths[i] === bitLength) {\n        // ビットオーダーが逆になるためビット長分並びを反転する\n        for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {\n          reversed = reversed << 1 | rtemp & 1;\n          rtemp >>= 1;\n        }\n\n        // 最大ビット長をもとにテーブルを作るため、\n        // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる\n        // そのどちらでも良い場所は同じ値で埋めることで\n        // 本来のビット長以上のビット数取得しても問題が起こらないようにする\n        value = bitLength << 16 | i;\n        for (j = reversed; j < size; j += skip) {\n          table[j] = value;\n        }\n\n        ++code;\n      }\n    }\n\n    // 次のビット長へ\n    ++bitLength;\n    code <<= 1;\n    skip <<= 1;\n  }\n\n  return [table, maxCodeLength, minCodeLength];\n};\n\n//-----------------------------------------------------------------------------\n\n/** @define {number} buffer block size. */\nvar ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]\n\n//-----------------------------------------------------------------------------\n\n\nvar buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;\n\n/**\n * @constructor\n * @param {!(Uint8Array|Array.<number>)} input input buffer.\n * @param {Object} opt_params option parameter.\n *\n * opt_params は以下のプロパティを指定する事ができます。\n *   - index: input buffer の deflate コンテナの開始位置.\n *   - blockSize: バッファのブロックサイズ.\n *   - bufferType: Zlib.RawInflate.BufferType の値によってバッファの管理方法を指定する.\n *   - resize: 確保したバッファが実際の大きさより大きかった場合に切り詰める.\n */\nZlib.RawInflate = function (input, opt_params) {\n  /** @type {!(Array.<number>|Uint8Array)} inflated buffer */\n  this.buffer;\n  /** @type {!Array.<(Array.<number>|Uint8Array)>} */\n  this.blocks = [];\n  /** @type {number} block size. */\n  this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;\n  /** @type {!number} total output buffer pointer. */\n  this.totalpos = 0;\n  /** @type {!number} input buffer pointer. */\n  this.ip = 0;\n  /** @type {!number} bit stream reader buffer. */\n  this.bitsbuf = 0;\n  /** @type {!number} bit stream reader buffer size. */\n  this.bitsbuflen = 0;\n  /** @type {!(Array.<number>|Uint8Array)} input buffer. */\n  this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;\n  /** @type {!(Uint8Array|Array.<number>)} output buffer. */\n  this.output;\n  /** @type {!number} output buffer pointer. */\n  this.op;\n  /** @type {boolean} is final block flag. */\n  this.bfinal = false;\n  /** @type {Zlib.RawInflate.BufferType} buffer management. */\n  this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;\n  /** @type {boolean} resize flag for memory size optimization. */\n  this.resize = false;\n\n  // option parameters\n  if (opt_params || !(opt_params = {})) {\n    if (opt_params['index']) {\n      this.ip = opt_params['index'];\n    }\n    if (opt_params['bufferSize']) {\n      this.bufferSize = opt_params['bufferSize'];\n    }\n    if (opt_params['bufferType']) {\n      this.bufferType = opt_params['bufferType'];\n    }\n    if (opt_params['resize']) {\n      this.resize = opt_params['resize'];\n    }\n  }\n\n  // initialize\n  switch (this.bufferType) {\n    case Zlib.RawInflate.BufferType.BLOCK:\n      this.op = Zlib.RawInflate.MaxBackwardLength;\n      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength);\n      break;\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\n      this.op = 0;\n      this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\n      break;\n    default:\n      throw new Error('invalid inflate mode');\n  }\n};\n\n/**\n * @enum {number}\n */\nZlib.RawInflate.BufferType = {\n  BLOCK: 0,\n  ADAPTIVE: 1\n};\n\n/**\n * decompress.\n * @return {!(Uint8Array|Array.<number>)} inflated buffer.\n */\nZlib.RawInflate.prototype.decompress = function () {\n  while (!this.bfinal) {\n    this.parseBlock();\n  }\n\n  switch (this.bufferType) {\n    case Zlib.RawInflate.BufferType.BLOCK:\n      return this.concatBufferBlock();\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\n      return this.concatBufferDynamic();\n    default:\n      throw new Error('invalid inflate mode');\n  }\n};\n\n/**\n * @const\n * @type {number} max backward length for LZ77.\n */\nZlib.RawInflate.MaxBackwardLength = 32768;\n\n/**\n * @const\n * @type {number} max copy length for LZ77.\n */\nZlib.RawInflate.MaxCopyLength = 258;\n\n/**\n * huffman order\n * @const\n * @type {!(Array.<number>|Uint8Array)}\n */\nZlib.RawInflate.Order = function (table) {\n  return USE_TYPEDARRAY ? new Uint16Array(table) : table;\n}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n\n/**\n * huffman length code table.\n * @const\n * @type {!(Array.<number>|Uint16Array)}\n */\nZlib.RawInflate.LengthCodeTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint16Array(table) : table;\n}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);\n\n/**\n * huffman length extra-bits table.\n * @const\n * @type {!(Array.<number>|Uint8Array)}\n */\nZlib.RawInflate.LengthExtraTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint8Array(table) : table;\n}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\n\n/**\n * huffman dist code table.\n * @const\n * @type {!(Array.<number>|Uint16Array)}\n */\nZlib.RawInflate.DistCodeTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint16Array(table) : table;\n}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);\n\n/**\n * huffman dist extra-bits table.\n * @const\n * @type {!(Array.<number>|Uint8Array)}\n */\nZlib.RawInflate.DistExtraTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint8Array(table) : table;\n}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);\n\n/**\n * fixed huffman length code table\n * @const\n * @type {!Array}\n */\nZlib.RawInflate.FixedLiteralLengthTable = function (table) {\n  return table;\n}(function () {\n  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);\n  var i, il;\n\n  for (i = 0, il = lengths.length; i < il; ++i) {\n    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;\n  }\n\n  return buildHuffmanTable(lengths);\n}());\n\n/**\n * fixed huffman distance code table\n * @const\n * @type {!Array}\n */\nZlib.RawInflate.FixedDistanceTable = function (table) {\n  return table;\n}(function () {\n  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);\n  var i, il;\n\n  for (i = 0, il = lengths.length; i < il; ++i) {\n    lengths[i] = 5;\n  }\n\n  return buildHuffmanTable(lengths);\n}());\n\n/**\n * parse deflated block.\n */\nZlib.RawInflate.prototype.parseBlock = function () {\n  /** @type {number} header */\n  var hdr = this.readBits(3);\n\n  // BFINAL\n  if (hdr & 0x1) {\n    this.bfinal = true;\n  }\n\n  // BTYPE\n  hdr >>>= 1;\n  switch (hdr) {\n    // uncompressed\n    case 0:\n      this.parseUncompressedBlock();\n      break;\n    // fixed huffman\n    case 1:\n      this.parseFixedHuffmanBlock();\n      break;\n    // dynamic huffman\n    case 2:\n      this.parseDynamicHuffmanBlock();\n      break;\n    // reserved or other\n    default:\n      throw new Error('unknown BTYPE: ' + hdr);\n  }\n};\n\n/**\n * read inflate bits\n * @param {number} length bits length.\n * @return {number} read bits.\n */\nZlib.RawInflate.prototype.readBits = function (length) {\n  var bitsbuf = this.bitsbuf;\n  var bitsbuflen = this.bitsbuflen;\n  var input = this.input;\n  var ip = this.ip;\n\n  /** @type {number} */\n  var inputLength = input.length;\n  /** @type {number} input and output byte. */\n  var octet;\n\n  // input byte\n  if (ip + (length - bitsbuflen + 7 >> 3) >= inputLength) {\n    throw new Error('input buffer is broken');\n  }\n\n  // not enough buffer\n  while (bitsbuflen < length) {\n    bitsbuf |= input[ip++] << bitsbuflen;\n    bitsbuflen += 8;\n  }\n\n  // output byte\n  octet = bitsbuf & /* MASK */(1 << length) - 1;\n  bitsbuf >>>= length;\n  bitsbuflen -= length;\n\n  this.bitsbuf = bitsbuf;\n  this.bitsbuflen = bitsbuflen;\n  this.ip = ip;\n\n  return octet;\n};\n\n/**\n * read huffman code using table\n * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.\n * @return {number} huffman code.\n */\nZlib.RawInflate.prototype.readCodeByTable = function (table) {\n  var bitsbuf = this.bitsbuf;\n  var bitsbuflen = this.bitsbuflen;\n  var input = this.input;\n  var ip = this.ip;\n\n  /** @type {number} */\n  var inputLength = input.length;\n  /** @type {!(Array.<number>|Uint8Array)} huffman code table */\n  var codeTable = table[0];\n  /** @type {number} */\n  var maxCodeLength = table[1];\n  /** @type {number} code length & code (16bit, 16bit) */\n  var codeWithLength;\n  /** @type {number} code bits length */\n  var codeLength;\n\n  // not enough buffer\n  while (bitsbuflen < maxCodeLength) {\n    if (ip >= inputLength) {\n      break;\n    }\n    bitsbuf |= input[ip++] << bitsbuflen;\n    bitsbuflen += 8;\n  }\n\n  // read max length\n  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];\n  codeLength = codeWithLength >>> 16;\n\n  if (codeLength > bitsbuflen) {\n    throw new Error('invalid code length: ' + codeLength);\n  }\n\n  this.bitsbuf = bitsbuf >> codeLength;\n  this.bitsbuflen = bitsbuflen - codeLength;\n  this.ip = ip;\n\n  return codeWithLength & 0xffff;\n};\n\n/**\n * parse uncompressed block.\n */\nZlib.RawInflate.prototype.parseUncompressedBlock = function () {\n  var input = this.input;\n  var ip = this.ip;\n  var output = this.output;\n  var op = this.op;\n\n  /** @type {number} */\n  var inputLength = input.length;\n  /** @type {number} block length */\n  var len;\n  /** @type {number} number for check block length */\n  var nlen;\n  /** @type {number} output buffer length */\n  var olength = output.length;\n  /** @type {number} copy counter */\n  var preCopy;\n\n  // skip buffered header bits\n  this.bitsbuf = 0;\n  this.bitsbuflen = 0;\n\n  // len\n  if (ip + 1 >= inputLength) {\n    throw new Error('invalid uncompressed block header: LEN');\n  }\n  len = input[ip++] | input[ip++] << 8;\n\n  // nlen\n  if (ip + 1 >= inputLength) {\n    throw new Error('invalid uncompressed block header: NLEN');\n  }\n  nlen = input[ip++] | input[ip++] << 8;\n\n  // check len & nlen\n  if (len === ~nlen) {\n    throw new Error('invalid uncompressed block header: length verify');\n  }\n\n  // check size\n  if (ip + len > input.length) {\n    throw new Error('input buffer is broken');\n  }\n\n  // expand buffer\n  switch (this.bufferType) {\n    case Zlib.RawInflate.BufferType.BLOCK:\n      // pre copy\n      while (op + len > output.length) {\n        preCopy = olength - op;\n        len -= preCopy;\n        if (USE_TYPEDARRAY) {\n          output.set(input.subarray(ip, ip + preCopy), op);\n          op += preCopy;\n          ip += preCopy;\n        } else {\n          while (preCopy--) {\n            output[op++] = input[ip++];\n          }\n        }\n        this.op = op;\n        output = this.expandBufferBlock();\n        op = this.op;\n      }\n      break;\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\n      while (op + len > output.length) {\n        output = this.expandBufferAdaptive({ fixRatio: 2 });\n      }\n      break;\n    default:\n      throw new Error('invalid inflate mode');\n  }\n\n  // copy\n  if (USE_TYPEDARRAY) {\n    output.set(input.subarray(ip, ip + len), op);\n    op += len;\n    ip += len;\n  } else {\n    while (len--) {\n      output[op++] = input[ip++];\n    }\n  }\n\n  this.ip = ip;\n  this.op = op;\n  this.output = output;\n};\n\n/**\n * parse fixed huffman block.\n */\nZlib.RawInflate.prototype.parseFixedHuffmanBlock = function () {\n  switch (this.bufferType) {\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\n      this.decodeHuffmanAdaptive(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);\n      break;\n    case Zlib.RawInflate.BufferType.BLOCK:\n      this.decodeHuffmanBlock(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);\n      break;\n    default:\n      throw new Error('invalid inflate mode');\n  }\n};\n\n/**\n * parse dynamic huffman block.\n */\nZlib.RawInflate.prototype.parseDynamicHuffmanBlock = function () {\n  /** @type {number} number of literal and length codes. */\n  var hlit = this.readBits(5) + 257;\n  /** @type {number} number of distance codes. */\n  var hdist = this.readBits(5) + 1;\n  /** @type {number} number of code lengths. */\n  var hclen = this.readBits(4) + 4;\n  /** @type {!(Uint8Array|Array.<number>)} code lengths. */\n  var codeLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflate.Order.length);\n  /** @type {!Array} code lengths table. */\n  var codeLengthsTable;\n  /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */\n  var litlenTable;\n  /** @type {!(Uint8Array|Array.<number>)} distance code table. */\n  var distTable;\n  /** @type {!(Uint8Array|Array.<number>)} code length table. */\n  var lengthTable;\n  /** @type {number} */\n  var code;\n  /** @type {number} */\n  var prev;\n  /** @type {number} */\n  var repeat;\n  /** @type {number} loop counter. */\n  var i;\n  /** @type {number} loop limit. */\n  var il;\n\n  // decode code lengths\n  for (i = 0; i < hclen; ++i) {\n    codeLengths[Zlib.RawInflate.Order[i]] = this.readBits(3);\n  }\n  if (!USE_TYPEDARRAY) {\n    for (i = hclen, hclen = codeLengths.length; i < hclen; ++i) {\n      codeLengths[Zlib.RawInflate.Order[i]] = 0;\n    }\n  }\n\n  // decode length table\n  codeLengthsTable = buildHuffmanTable(codeLengths);\n  lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);\n  for (i = 0, il = hlit + hdist; i < il;) {\n    code = this.readCodeByTable(codeLengthsTable);\n    switch (code) {\n      case 16:\n        repeat = 3 + this.readBits(2);\n        while (repeat--) {\n          lengthTable[i++] = prev;\n        }\n        break;\n      case 17:\n        repeat = 3 + this.readBits(3);\n        while (repeat--) {\n          lengthTable[i++] = 0;\n        }\n        prev = 0;\n        break;\n      case 18:\n        repeat = 11 + this.readBits(7);\n        while (repeat--) {\n          lengthTable[i++] = 0;\n        }\n        prev = 0;\n        break;\n      default:\n        lengthTable[i++] = code;\n        prev = code;\n        break;\n    }\n  }\n\n  litlenTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(0, hlit)) : buildHuffmanTable(lengthTable.slice(0, hlit));\n  distTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(hlit)) : buildHuffmanTable(lengthTable.slice(hlit));\n\n  switch (this.bufferType) {\n    case Zlib.RawInflate.BufferType.ADAPTIVE:\n      this.decodeHuffmanAdaptive(litlenTable, distTable);\n      break;\n    case Zlib.RawInflate.BufferType.BLOCK:\n      this.decodeHuffmanBlock(litlenTable, distTable);\n      break;\n    default:\n      throw new Error('invalid inflate mode');\n  }\n};\n\n/**\n * decode huffman code\n * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.\n * @param {!(Array.<number>|Uint8Array)} dist distination code table.\n */\nZlib.RawInflate.prototype.decodeHuffmanBlock = function (litlen, dist) {\n  var output = this.output;\n  var op = this.op;\n\n  this.currentLitlenTable = litlen;\n\n  /** @type {number} output position limit. */\n  var olength = output.length - Zlib.RawInflate.MaxCopyLength;\n  /** @type {number} huffman code. */\n  var code;\n  /** @type {number} table index. */\n  var ti;\n  /** @type {number} huffman code distination. */\n  var codeDist;\n  /** @type {number} huffman code length. */\n  var codeLength;\n\n  var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;\n  var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;\n  var distCodeTable = Zlib.RawInflate.DistCodeTable;\n  var distExtraTable = Zlib.RawInflate.DistExtraTable;\n\n  while ((code = this.readCodeByTable(litlen)) !== 256) {\n    // literal\n    if (code < 256) {\n      if (op >= olength) {\n        this.op = op;\n        output = this.expandBufferBlock();\n        op = this.op;\n      }\n      output[op++] = code;\n\n      continue;\n    }\n\n    // length code\n    ti = code - 257;\n    codeLength = lengthCodeTable[ti];\n    if (lengthExtraTable[ti] > 0) {\n      codeLength += this.readBits(lengthExtraTable[ti]);\n    }\n\n    // dist code\n    code = this.readCodeByTable(dist);\n    codeDist = distCodeTable[code];\n    if (distExtraTable[code] > 0) {\n      codeDist += this.readBits(distExtraTable[code]);\n    }\n\n    // lz77 decode\n    if (op >= olength) {\n      this.op = op;\n      output = this.expandBufferBlock();\n      op = this.op;\n    }\n    while (codeLength--) {\n      output[op] = output[op++ - codeDist];\n    }\n  }\n\n  while (this.bitsbuflen >= 8) {\n    this.bitsbuflen -= 8;\n    this.ip--;\n  }\n  this.op = op;\n};\n\n/**\n * decode huffman code (adaptive)\n * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.\n * @param {!(Array.<number>|Uint8Array)} dist distination code table.\n */\nZlib.RawInflate.prototype.decodeHuffmanAdaptive = function (litlen, dist) {\n  var output = this.output;\n  var op = this.op;\n\n  this.currentLitlenTable = litlen;\n\n  /** @type {number} output position limit. */\n  var olength = output.length;\n  /** @type {number} huffman code. */\n  var code;\n  /** @type {number} table index. */\n  var ti;\n  /** @type {number} huffman code distination. */\n  var codeDist;\n  /** @type {number} huffman code length. */\n  var codeLength;\n\n  var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;\n  var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;\n  var distCodeTable = Zlib.RawInflate.DistCodeTable;\n  var distExtraTable = Zlib.RawInflate.DistExtraTable;\n\n  while ((code = this.readCodeByTable(litlen)) !== 256) {\n    // literal\n    if (code < 256) {\n      if (op >= olength) {\n        output = this.expandBufferAdaptive();\n        olength = output.length;\n      }\n      output[op++] = code;\n\n      continue;\n    }\n\n    // length code\n    ti = code - 257;\n    codeLength = lengthCodeTable[ti];\n    if (lengthExtraTable[ti] > 0) {\n      codeLength += this.readBits(lengthExtraTable[ti]);\n    }\n\n    // dist code\n    code = this.readCodeByTable(dist);\n    codeDist = distCodeTable[code];\n    if (distExtraTable[code] > 0) {\n      codeDist += this.readBits(distExtraTable[code]);\n    }\n\n    // lz77 decode\n    if (op + codeLength > olength) {\n      output = this.expandBufferAdaptive();\n      olength = output.length;\n    }\n    while (codeLength--) {\n      output[op] = output[op++ - codeDist];\n    }\n  }\n\n  while (this.bitsbuflen >= 8) {\n    this.bitsbuflen -= 8;\n    this.ip--;\n  }\n  this.op = op;\n};\n\n/**\n * expand output buffer.\n * @param {Object=} opt_param option parameters.\n * @return {!(Array.<number>|Uint8Array)} output buffer.\n */\nZlib.RawInflate.prototype.expandBufferBlock = function (opt_param) {\n  /** @type {!(Array.<number>|Uint8Array)} store buffer. */\n  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.op - Zlib.RawInflate.MaxBackwardLength);\n  /** @type {number} backward base point */\n  var backward = this.op - Zlib.RawInflate.MaxBackwardLength;\n  /** @type {number} copy index. */\n  var i;\n  /** @type {number} copy limit */\n  var il;\n\n  var output = this.output;\n\n  // copy to output buffer\n  if (USE_TYPEDARRAY) {\n    buffer.set(output.subarray(Zlib.RawInflate.MaxBackwardLength, buffer.length));\n  } else {\n    for (i = 0, il = buffer.length; i < il; ++i) {\n      buffer[i] = output[i + Zlib.RawInflate.MaxBackwardLength];\n    }\n  }\n\n  this.blocks.push(buffer);\n  this.totalpos += buffer.length;\n\n  // copy to backward buffer\n  if (USE_TYPEDARRAY) {\n    output.set(output.subarray(backward, backward + Zlib.RawInflate.MaxBackwardLength));\n  } else {\n    for (i = 0; i < Zlib.RawInflate.MaxBackwardLength; ++i) {\n      output[i] = output[backward + i];\n    }\n  }\n\n  this.op = Zlib.RawInflate.MaxBackwardLength;\n\n  return output;\n};\n\n/**\n * expand output buffer. (adaptive)\n * @param {Object=} opt_param option parameters.\n * @return {!(Array.<number>|Uint8Array)} output buffer pointer.\n */\nZlib.RawInflate.prototype.expandBufferAdaptive = function (opt_param) {\n  /** @type {!(Array.<number>|Uint8Array)} store buffer. */\n  var buffer;\n  /** @type {number} expantion ratio. */\n  var ratio = this.input.length / this.ip + 1 | 0;\n  /** @type {number} maximum number of huffman code. */\n  var maxHuffCode;\n  /** @type {number} new output buffer size. */\n  var newSize;\n  /** @type {number} max inflate size. */\n  var maxInflateSize;\n\n  var input = this.input;\n  var output = this.output;\n\n  if (opt_param) {\n    if (typeof opt_param.fixRatio === 'number') {\n      ratio = opt_param.fixRatio;\n    }\n    if (typeof opt_param.addRatio === 'number') {\n      ratio += opt_param.addRatio;\n    }\n  }\n\n  // calculate new buffer size\n  if (ratio < 2) {\n    maxHuffCode = (input.length - this.ip) / this.currentLitlenTable[2];\n    maxInflateSize = maxHuffCode / 2 * 258 | 0;\n    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;\n  } else {\n    newSize = output.length * ratio;\n  }\n\n  // buffer expantion\n  if (USE_TYPEDARRAY) {\n    buffer = new Uint8Array(newSize);\n    buffer.set(output);\n  } else {\n    buffer = output;\n  }\n\n  this.output = buffer;\n\n  return this.output;\n};\n\n/**\n * concat output buffer.\n * @return {!(Array.<number>|Uint8Array)} output buffer.\n */\nZlib.RawInflate.prototype.concatBufferBlock = function () {\n  /** @type {number} buffer pointer. */\n  var pos = 0;\n  /** @type {number} buffer pointer. */\n  var limit = this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength);\n  /** @type {!(Array.<number>|Uint8Array)} output block array. */\n  var output = this.output;\n  /** @type {!Array} blocks array. */\n  var blocks = this.blocks;\n  /** @type {!(Array.<number>|Uint8Array)} output block array. */\n  var block;\n  /** @type {!(Array.<number>|Uint8Array)} output buffer. */\n  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);\n  /** @type {number} loop counter. */\n  var i;\n  /** @type {number} loop limiter. */\n  var il;\n  /** @type {number} loop counter. */\n  var j;\n  /** @type {number} loop limiter. */\n  var jl;\n\n  // single buffer\n  if (blocks.length === 0) {\n    return USE_TYPEDARRAY ? this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op) : this.output.slice(Zlib.RawInflate.MaxBackwardLength, this.op);\n  }\n\n  // copy to buffer\n  for (i = 0, il = blocks.length; i < il; ++i) {\n    block = blocks[i];\n    for (j = 0, jl = block.length; j < jl; ++j) {\n      buffer[pos++] = block[j];\n    }\n  }\n\n  // current buffer\n  for (i = Zlib.RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {\n    buffer[pos++] = output[i];\n  }\n\n  this.blocks = [];\n  this.buffer = buffer;\n\n  return this.buffer;\n};\n\n/**\n * concat output buffer. (dynamic)\n * @return {!(Array.<number>|Uint8Array)} output buffer.\n */\nZlib.RawInflate.prototype.concatBufferDynamic = function () {\n  /** @type {Array.<number>|Uint8Array} output buffer. */\n  var buffer;\n  var op = this.op;\n\n  if (USE_TYPEDARRAY) {\n    if (this.resize) {\n      buffer = new Uint8Array(op);\n      buffer.set(this.output.subarray(0, op));\n    } else {\n      buffer = this.output.subarray(0, op);\n    }\n  } else {\n    if (this.output.length > op) {\n      this.output.length = op;\n    }\n    buffer = this.output;\n  }\n\n  this.buffer = buffer;\n\n  return this.buffer;\n};\n\nvar buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;\n\n/**\n * @param {!(Uint8Array|Array.<number>)} input input buffer.\n * @param {number} ip input buffer pointer.\n * @param {number=} opt_buffersize buffer block size.\n * @constructor\n */\nZlib.RawInflateStream = function (input, ip, opt_buffersize) {\n  /** @type {!Array.<(Array|Uint8Array)>} */\n  this.blocks = [];\n  /** @type {number} block size. */\n  this.bufferSize = opt_buffersize ? opt_buffersize : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;\n  /** @type {!number} total output buffer pointer. */\n  this.totalpos = 0;\n  /** @type {!number} input buffer pointer. */\n  this.ip = ip === void 0 ? 0 : ip;\n  /** @type {!number} bit stream reader buffer. */\n  this.bitsbuf = 0;\n  /** @type {!number} bit stream reader buffer size. */\n  this.bitsbuflen = 0;\n  /** @type {!(Array|Uint8Array)} input buffer. */\n  this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;\n  /** @type {!(Uint8Array|Array)} output buffer. */\n  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\n  /** @type {!number} output buffer pointer. */\n  this.op = 0;\n  /** @type {boolean} is final block flag. */\n  this.bfinal = false;\n  /** @type {number} uncompressed block length. */\n  this.blockLength;\n  /** @type {boolean} resize flag for memory size optimization. */\n  this.resize = false;\n  /** @type {Array} */\n  this.litlenTable;\n  /** @type {Array} */\n  this.distTable;\n  /** @type {number} */\n  this.sp = 0; // stream pointer\n  /** @type {Zlib.RawInflateStream.Status} */\n  this.status = Zlib.RawInflateStream.Status.INITIALIZED;\n\n  //\n  // backup\n  //\n  /** @type {!number} */\n  this.ip_;\n  /** @type {!number} */\n  this.bitsbuflen_;\n  /** @type {!number} */\n  this.bitsbuf_;\n};\n\n/**\n * @enum {number}\n */\nZlib.RawInflateStream.BlockType = {\n  UNCOMPRESSED: 0,\n  FIXED: 1,\n  DYNAMIC: 2\n};\n\n/**\n * @enum {number}\n */\nZlib.RawInflateStream.Status = {\n  INITIALIZED: 0,\n  BLOCK_HEADER_START: 1,\n  BLOCK_HEADER_END: 2,\n  BLOCK_BODY_START: 3,\n  BLOCK_BODY_END: 4,\n  DECODE_BLOCK_START: 5,\n  DECODE_BLOCK_END: 6\n};\n\n/**\n * decompress.\n * @return {!(Uint8Array|Array)} inflated buffer.\n */\nZlib.RawInflateStream.prototype.decompress = function (newInput, ip) {\n  /** @type {boolean} */\n  var stop = false;\n\n  if (newInput !== void 0) {\n    this.input = newInput;\n  }\n\n  if (ip !== void 0) {\n    this.ip = ip;\n  }\n\n  // decompress\n  while (!stop) {\n    switch (this.status) {\n      // block header\n      case Zlib.RawInflateStream.Status.INITIALIZED:\n      case Zlib.RawInflateStream.Status.BLOCK_HEADER_START:\n        if (this.readBlockHeader() < 0) {\n          stop = true;\n        }\n        break;\n      // block body\n      case Zlib.RawInflateStream.Status.BLOCK_HEADER_END: /* FALLTHROUGH */\n      case Zlib.RawInflateStream.Status.BLOCK_BODY_START:\n        switch (this.currentBlockType) {\n          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:\n            if (this.readUncompressedBlockHeader() < 0) {\n              stop = true;\n            }\n            break;\n          case Zlib.RawInflateStream.BlockType.FIXED:\n            if (this.parseFixedHuffmanBlock() < 0) {\n              stop = true;\n            }\n            break;\n          case Zlib.RawInflateStream.BlockType.DYNAMIC:\n            if (this.parseDynamicHuffmanBlock() < 0) {\n              stop = true;\n            }\n            break;\n        }\n        break;\n      // decode data\n      case Zlib.RawInflateStream.Status.BLOCK_BODY_END:\n      case Zlib.RawInflateStream.Status.DECODE_BLOCK_START:\n        switch (this.currentBlockType) {\n          case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:\n            if (this.parseUncompressedBlock() < 0) {\n              stop = true;\n            }\n            break;\n          case Zlib.RawInflateStream.BlockType.FIXED: /* FALLTHROUGH */\n          case Zlib.RawInflateStream.BlockType.DYNAMIC:\n            if (this.decodeHuffman() < 0) {\n              stop = true;\n            }\n            break;\n        }\n        break;\n      case Zlib.RawInflateStream.Status.DECODE_BLOCK_END:\n        if (this.bfinal) {\n          stop = true;\n        } else {\n          this.status = Zlib.RawInflateStream.Status.INITIALIZED;\n        }\n        break;\n    }\n  }\n\n  return this.concatBuffer();\n};\n\n/**\n * @const\n * @type {number} max backward length for LZ77.\n */\nZlib.RawInflateStream.MaxBackwardLength = 32768;\n\n/**\n * @const\n * @type {number} max copy length for LZ77.\n */\nZlib.RawInflateStream.MaxCopyLength = 258;\n\n/**\n * huffman order\n * @const\n * @type {!(Array.<number>|Uint8Array)}\n */\nZlib.RawInflateStream.Order = function (table) {\n  return USE_TYPEDARRAY ? new Uint16Array(table) : table;\n}([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n\n/**\n * huffman length code table.\n * @const\n * @type {!(Array.<number>|Uint16Array)}\n */\nZlib.RawInflateStream.LengthCodeTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint16Array(table) : table;\n}([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);\n\n/**\n * huffman length extra-bits table.\n * @const\n * @type {!(Array.<number>|Uint8Array)}\n */\nZlib.RawInflateStream.LengthExtraTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint8Array(table) : table;\n}([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\n\n/**\n * huffman dist code table.\n * @const\n * @type {!(Array.<number>|Uint16Array)}\n */\nZlib.RawInflateStream.DistCodeTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint16Array(table) : table;\n}([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);\n\n/**\n * huffman dist extra-bits table.\n * @const\n * @type {!(Array.<number>|Uint8Array)}\n */\nZlib.RawInflateStream.DistExtraTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint8Array(table) : table;\n}([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);\n\n/**\n * fixed huffman length code table\n * @const\n * @type {!Array}\n */\nZlib.RawInflateStream.FixedLiteralLengthTable = function (table) {\n  return table;\n}(function () {\n  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);\n  var i, il;\n\n  for (i = 0, il = lengths.length; i < il; ++i) {\n    lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;\n  }\n\n  return buildHuffmanTable(lengths);\n}());\n\n/**\n * fixed huffman distance code table\n * @const\n * @type {!Array}\n */\nZlib.RawInflateStream.FixedDistanceTable = function (table) {\n  return table;\n}(function () {\n  var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);\n  var i, il;\n\n  for (i = 0, il = lengths.length; i < il; ++i) {\n    lengths[i] = 5;\n  }\n\n  return buildHuffmanTable(lengths);\n}());\n\n/**\n * parse deflated block.\n */\nZlib.RawInflateStream.prototype.readBlockHeader = function () {\n  /** @type {number} header */\n  var hdr;\n\n  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_START;\n\n  this.save_();\n  if ((hdr = this.readBits(3)) < 0) {\n    this.restore_();\n    return -1;\n  }\n\n  // BFINAL\n  if (hdr & 0x1) {\n    this.bfinal = true;\n  }\n\n  // BTYPE\n  hdr >>>= 1;\n  switch (hdr) {\n    case 0:\n      // uncompressed\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.UNCOMPRESSED;\n      break;\n    case 1:\n      // fixed huffman\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.FIXED;\n      break;\n    case 2:\n      // dynamic huffman\n      this.currentBlockType = Zlib.RawInflateStream.BlockType.DYNAMIC;\n      break;\n    default:\n      // reserved or other\n      throw new Error('unknown BTYPE: ' + hdr);\n  }\n\n  this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_END;\n};\n\n/**\n * read inflate bits\n * @param {number} length bits length.\n * @return {number} read bits.\n */\nZlib.RawInflateStream.prototype.readBits = function (length) {\n  var bitsbuf = this.bitsbuf;\n  var bitsbuflen = this.bitsbuflen;\n  var input = this.input;\n  var ip = this.ip;\n\n  /** @type {number} input and output byte. */\n  var octet;\n\n  // not enough buffer\n  while (bitsbuflen < length) {\n    // input byte\n    if (input.length <= ip) {\n      return -1;\n    }\n    octet = input[ip++];\n\n    // concat octet\n    bitsbuf |= octet << bitsbuflen;\n    bitsbuflen += 8;\n  }\n\n  // output byte\n  octet = bitsbuf & /* MASK */(1 << length) - 1;\n  bitsbuf >>>= length;\n  bitsbuflen -= length;\n\n  this.bitsbuf = bitsbuf;\n  this.bitsbuflen = bitsbuflen;\n  this.ip = ip;\n\n  return octet;\n};\n\n/**\n * read huffman code using table\n * @param {Array} table huffman code table.\n * @return {number} huffman code.\n */\nZlib.RawInflateStream.prototype.readCodeByTable = function (table) {\n  var bitsbuf = this.bitsbuf;\n  var bitsbuflen = this.bitsbuflen;\n  var input = this.input;\n  var ip = this.ip;\n\n  /** @type {!(Array|Uint8Array)} huffman code table */\n  var codeTable = table[0];\n  /** @type {number} */\n  var maxCodeLength = table[1];\n  /** @type {number} input byte */\n  var octet;\n  /** @type {number} code length & code (16bit, 16bit) */\n  var codeWithLength;\n  /** @type {number} code bits length */\n  var codeLength;\n\n  // not enough buffer\n  while (bitsbuflen < maxCodeLength) {\n    if (input.length <= ip) {\n      return -1;\n    }\n    octet = input[ip++];\n    bitsbuf |= octet << bitsbuflen;\n    bitsbuflen += 8;\n  }\n\n  // read max length\n  codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];\n  codeLength = codeWithLength >>> 16;\n\n  if (codeLength > bitsbuflen) {\n    throw new Error('invalid code length: ' + codeLength);\n  }\n\n  this.bitsbuf = bitsbuf >> codeLength;\n  this.bitsbuflen = bitsbuflen - codeLength;\n  this.ip = ip;\n\n  return codeWithLength & 0xffff;\n};\n\n/**\n * read uncompressed block header\n */\nZlib.RawInflateStream.prototype.readUncompressedBlockHeader = function () {\n  /** @type {number} block length */\n  var len;\n  /** @type {number} number for check block length */\n  var nlen;\n\n  var input = this.input;\n  var ip = this.ip;\n\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\n\n  if (ip + 4 >= input.length) {\n    return -1;\n  }\n\n  len = input[ip++] | input[ip++] << 8;\n  nlen = input[ip++] | input[ip++] << 8;\n\n  // check len & nlen\n  if (len === ~nlen) {\n    throw new Error('invalid uncompressed block header: length verify');\n  }\n\n  // skip buffered header bits\n  this.bitsbuf = 0;\n  this.bitsbuflen = 0;\n\n  this.ip = ip;\n  this.blockLength = len;\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\n};\n\n/**\n * parse uncompressed block.\n */\nZlib.RawInflateStream.prototype.parseUncompressedBlock = function () {\n  var input = this.input;\n  var ip = this.ip;\n  var output = this.output;\n  var op = this.op;\n  var len = this.blockLength;\n\n  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;\n\n  // copy\n  // XXX: とりあえず素直にコピー\n  while (len--) {\n    if (op === output.length) {\n      output = this.expandBuffer({ fixRatio: 2 });\n    }\n\n    // not enough input buffer\n    if (ip >= input.length) {\n      this.ip = ip;\n      this.op = op;\n      this.blockLength = len + 1; // コピーしてないので戻す\n      return -1;\n    }\n\n    output[op++] = input[ip++];\n  }\n\n  if (len < 0) {\n    this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;\n  }\n\n  this.ip = ip;\n  this.op = op;\n\n  return 0;\n};\n\n/**\n * parse fixed huffman block.\n */\nZlib.RawInflateStream.prototype.parseFixedHuffmanBlock = function () {\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\n\n  this.litlenTable = Zlib.RawInflateStream.FixedLiteralLengthTable;\n  this.distTable = Zlib.RawInflateStream.FixedDistanceTable;\n\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\n\n  return 0;\n};\n\n/**\n * オブジェクトのコンテキストを別のプロパティに退避する.\n * @private\n */\nZlib.RawInflateStream.prototype.save_ = function () {\n  this.ip_ = this.ip;\n  this.bitsbuflen_ = this.bitsbuflen;\n  this.bitsbuf_ = this.bitsbuf;\n};\n\n/**\n * 別のプロパティに退避したコンテキストを復元する.\n * @private\n */\nZlib.RawInflateStream.prototype.restore_ = function () {\n  this.ip = this.ip_;\n  this.bitsbuflen = this.bitsbuflen_;\n  this.bitsbuf = this.bitsbuf_;\n};\n\n/**\n * parse dynamic huffman block.\n */\nZlib.RawInflateStream.prototype.parseDynamicHuffmanBlock = function () {\n  /** @type {number} number of literal and length codes. */\n  var hlit;\n  /** @type {number} number of distance codes. */\n  var hdist;\n  /** @type {number} number of code lengths. */\n  var hclen;\n  /** @type {!(Uint8Array|Array)} code lengths. */\n  var codeLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.RawInflateStream.Order.length);\n  /** @type {!Array} code lengths table. */\n  var codeLengthsTable;\n  /** @type {!(Uint32Array|Array)} literal and length code lengths. */\n  var litlenLengths;\n  /** @type {!(Uint32Array|Array)} distance code lengths. */\n  var distLengths;\n\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;\n\n  this.save_();\n  hlit = this.readBits(5) + 257;\n  hdist = this.readBits(5) + 1;\n  hclen = this.readBits(4) + 4;\n  if (hlit < 0 || hdist < 0 || hclen < 0) {\n    this.restore_();\n    return -1;\n  }\n\n  try {\n    parseDynamicHuffmanBlockImpl.call(this);\n  } catch (e) {\n    this.restore_();\n    return -1;\n  }\n\n  function parseDynamicHuffmanBlockImpl() {\n    /** @type {number} */\n    var bits;\n    var code;\n    var prev = 0;\n    var repeat;\n    /** @type {!(Uint8Array|Array.<number>)} code length table. */\n    var lengthTable;\n    /** @type {number} loop counter. */\n    var i;\n    /** @type {number} loop limit. */\n    var il;\n\n    // decode code lengths\n    for (i = 0; i < hclen; ++i) {\n      if ((bits = this.readBits(3)) < 0) {\n        throw new Error('not enough input');\n      }\n      codeLengths[Zlib.RawInflateStream.Order[i]] = bits;\n    }\n\n    // decode length table\n    codeLengthsTable = buildHuffmanTable(codeLengths);\n    lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);\n    for (i = 0, il = hlit + hdist; i < il;) {\n      code = this.readCodeByTable(codeLengthsTable);\n      if (code < 0) {\n        throw new Error('not enough input');\n      }\n      switch (code) {\n        case 16:\n          if ((bits = this.readBits(2)) < 0) {\n            throw new Error('not enough input');\n          }\n          repeat = 3 + bits;\n          while (repeat--) {\n            lengthTable[i++] = prev;\n          }\n          break;\n        case 17:\n          if ((bits = this.readBits(3)) < 0) {\n            throw new Error('not enough input');\n          }\n          repeat = 3 + bits;\n          while (repeat--) {\n            lengthTable[i++] = 0;\n          }\n          prev = 0;\n          break;\n        case 18:\n          if ((bits = this.readBits(7)) < 0) {\n            throw new Error('not enough input');\n          }\n          repeat = 11 + bits;\n          while (repeat--) {\n            lengthTable[i++] = 0;\n          }\n          prev = 0;\n          break;\n        default:\n          lengthTable[i++] = code;\n          prev = code;\n          break;\n      }\n    }\n\n    // literal and length code\n    litlenLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit);\n\n    // distance code\n    distLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hdist);\n\n    this.litlenTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(0, hlit)) : buildHuffmanTable(lengthTable.slice(0, hlit));\n    this.distTable = USE_TYPEDARRAY ? buildHuffmanTable(lengthTable.subarray(hlit)) : buildHuffmanTable(lengthTable.slice(hlit));\n  }\n\n  this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;\n\n  return 0;\n};\n\n/**\n * decode huffman code (dynamic)\n * @return {(number|undefined)} -1 is error.\n */\nZlib.RawInflateStream.prototype.decodeHuffman = function () {\n  var output = this.output;\n  var op = this.op;\n\n  /** @type {number} huffman code. */\n  var code;\n  /** @type {number} table index. */\n  var ti;\n  /** @type {number} huffman code distination. */\n  var codeDist;\n  /** @type {number} huffman code length. */\n  var codeLength;\n\n  var litlen = this.litlenTable;\n  var dist = this.distTable;\n\n  var olength = output.length;\n  var bits;\n\n  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;\n\n  while (true) {\n    this.save_();\n\n    code = this.readCodeByTable(litlen);\n    if (code < 0) {\n      this.op = op;\n      this.restore_();\n      return -1;\n    }\n\n    if (code === 256) {\n      break;\n    }\n\n    // literal\n    if (code < 256) {\n      if (op === olength) {\n        output = this.expandBuffer();\n        olength = output.length;\n      }\n      output[op++] = code;\n\n      continue;\n    }\n\n    // length code\n    ti = code - 257;\n    codeLength = Zlib.RawInflateStream.LengthCodeTable[ti];\n    if (Zlib.RawInflateStream.LengthExtraTable[ti] > 0) {\n      bits = this.readBits(Zlib.RawInflateStream.LengthExtraTable[ti]);\n      if (bits < 0) {\n        this.op = op;\n        this.restore_();\n        return -1;\n      }\n      codeLength += bits;\n    }\n\n    // dist code\n    code = this.readCodeByTable(dist);\n    if (code < 0) {\n      this.op = op;\n      this.restore_();\n      return -1;\n    }\n    codeDist = Zlib.RawInflateStream.DistCodeTable[code];\n    if (Zlib.RawInflateStream.DistExtraTable[code] > 0) {\n      bits = this.readBits(Zlib.RawInflateStream.DistExtraTable[code]);\n      if (bits < 0) {\n        this.op = op;\n        this.restore_();\n        return -1;\n      }\n      codeDist += bits;\n    }\n\n    // lz77 decode\n    if (op + codeLength >= olength) {\n      output = this.expandBuffer();\n      olength = output.length;\n    }\n\n    while (codeLength--) {\n      output[op] = output[op++ - codeDist];\n    }\n\n    // break\n    if (this.ip === this.input.length) {\n      this.op = op;\n      return -1;\n    }\n  }\n\n  while (this.bitsbuflen >= 8) {\n    this.bitsbuflen -= 8;\n    this.ip--;\n  }\n\n  this.op = op;\n  this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;\n};\n\n/**\n * expand output buffer. (dynamic)\n * @param {Object=} opt_param option parameters.\n * @return {!(Array|Uint8Array)} output buffer pointer.\n */\nZlib.RawInflateStream.prototype.expandBuffer = function (opt_param) {\n  /** @type {!(Array|Uint8Array)} store buffer. */\n  var buffer;\n  /** @type {number} expantion ratio. */\n  var ratio = this.input.length / this.ip + 1 | 0;\n  /** @type {number} maximum number of huffman code. */\n  var maxHuffCode;\n  /** @type {number} new output buffer size. */\n  var newSize;\n  /** @type {number} max inflate size. */\n  var maxInflateSize;\n\n  var input = this.input;\n  var output = this.output;\n\n  if (opt_param) {\n    if (typeof opt_param.fixRatio === 'number') {\n      ratio = opt_param.fixRatio;\n    }\n    if (typeof opt_param.addRatio === 'number') {\n      ratio += opt_param.addRatio;\n    }\n  }\n\n  // calculate new buffer size\n  if (ratio < 2) {\n    maxHuffCode = (input.length - this.ip) / this.litlenTable[2];\n    maxInflateSize = maxHuffCode / 2 * 258 | 0;\n    newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;\n  } else {\n    newSize = output.length * ratio;\n  }\n\n  // buffer expantion\n  if (USE_TYPEDARRAY) {\n    buffer = new Uint8Array(newSize);\n    buffer.set(output);\n  } else {\n    buffer = output;\n  }\n\n  this.output = buffer;\n\n  return this.output;\n};\n\n/**\n * concat output buffer. (dynamic)\n * @return {!(Array|Uint8Array)} output buffer.\n */\nZlib.RawInflateStream.prototype.concatBuffer = function () {\n  /** @type {!(Array|Uint8Array)} output buffer. */\n  var buffer;\n  /** @type {number} */\n  var op = this.op;\n  /** @type {Uint8Array} */\n  var tmp;\n\n  if (this.resize) {\n    if (USE_TYPEDARRAY) {\n      buffer = new Uint8Array(this.output.subarray(this.sp, op));\n    } else {\n      buffer = this.output.slice(this.sp, op);\n    }\n  } else {\n    buffer = USE_TYPEDARRAY ? this.output.subarray(this.sp, op) : this.output.slice(this.sp, op);\n  }\n\n  this.sp = op;\n\n  // compaction\n  if (op > Zlib.RawInflateStream.MaxBackwardLength + this.bufferSize) {\n    this.op = this.sp = Zlib.RawInflateStream.MaxBackwardLength;\n    if (USE_TYPEDARRAY) {\n      tmp = /** @type {Uint8Array} */this.output;\n      this.output = new Uint8Array(this.bufferSize + Zlib.RawInflateStream.MaxBackwardLength);\n      this.output.set(tmp.subarray(op - Zlib.RawInflateStream.MaxBackwardLength, op));\n    } else {\n      this.output = this.output.slice(op - Zlib.RawInflateStream.MaxBackwardLength);\n    }\n  }\n\n  return buffer;\n};\n\n/**\n * @constructor\n * @param {!(Uint8Array|Array)} input deflated buffer.\n * @param {Object=} opt_params option parameters.\n *\n * opt_params は以下のプロパティを指定する事ができます。\n *   - index: input buffer の deflate コンテナの開始位置.\n *   - blockSize: バッファのブロックサイズ.\n *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.\n *   - bufferType: Zlib.Inflate.BufferType の値によってバッファの管理方法を指定する.\n *       Zlib.Inflate.BufferType は Zlib.RawInflate.BufferType のエイリアス.\n */\nZlib.Inflate = function (input, opt_params) {\n  /** @type {number} */\n  var bufferSize;\n  /** @type {Zlib.Inflate.BufferType} */\n  var bufferType;\n  /** @type {number} */\n  var cmf;\n  /** @type {number} */\n  var flg;\n\n  /** @type {!(Uint8Array|Array)} */\n  this.input = input;\n  /** @type {number} */\n  this.ip = 0;\n  /** @type {Zlib.RawInflate} */\n  this.rawinflate;\n  /** @type {(boolean|undefined)} verify flag. */\n  this.verify;\n\n  // option parameters\n  if (opt_params || !(opt_params = {})) {\n    if (opt_params['index']) {\n      this.ip = opt_params['index'];\n    }\n    if (opt_params['verify']) {\n      this.verify = opt_params['verify'];\n    }\n  }\n\n  // Compression Method and Flags\n  cmf = input[this.ip++];\n  flg = input[this.ip++];\n\n  // compression method\n  switch (cmf & 0x0f) {\n    case Zlib.CompressionMethod.DEFLATE:\n      this.method = Zlib.CompressionMethod.DEFLATE;\n      break;\n    default:\n      throw new Error('unsupported compression method');\n  }\n\n  // fcheck\n  if (((cmf << 8) + flg) % 31 !== 0) {\n    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\n  }\n\n  // fdict (not supported)\n  if (flg & 0x20) {\n    throw new Error('fdict flag is not supported');\n  }\n\n  // RawInflate\n  this.rawinflate = new Zlib.RawInflate(input, {\n    'index': this.ip,\n    'bufferSize': opt_params['bufferSize'],\n    'bufferType': opt_params['bufferType'],\n    'resize': opt_params['resize']\n  });\n};\n\n/**\n * @enum {number}\n */\nZlib.Inflate.BufferType = Zlib.RawInflate.BufferType;\n\n/**\n * decompress.\n * @return {!(Uint8Array|Array)} inflated buffer.\n */\nZlib.Inflate.prototype.decompress = function () {\n  /** @type {!(Array|Uint8Array)} input buffer. */\n  var input = this.input;\n  /** @type {!(Uint8Array|Array)} inflated buffer. */\n  var buffer;\n  /** @type {number} adler-32 checksum */\n  var adler32;\n\n  buffer = this.rawinflate.decompress();\n  this.ip = this.rawinflate.ip;\n\n  // verify adler-32\n  if (this.verify) {\n    adler32 = (input[this.ip++] << 24 | input[this.ip++] << 16 | input[this.ip++] << 8 | input[this.ip++]) >>> 0;\n\n    if (adler32 !== Zlib.Adler32(buffer)) {\n      throw new Error('invalid adler-32 checksum');\n    }\n  }\n\n  return buffer;\n};\n\n/* vim:set expandtab ts=2 sw=2 tw=80: */\n\n/**\n * @param {!(Uint8Array|Array)} input deflated buffer.\n * @constructor\n */\nZlib.InflateStream = function (input) {\n  /** @type {!(Uint8Array|Array)} */\n  this.input = input === void 0 ? new (USE_TYPEDARRAY ? Uint8Array : Array)() : input;\n  /** @type {number} */\n  this.ip = 0;\n  /** @type {Zlib.RawInflateStream} */\n  this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);\n  /** @type {Zlib.CompressionMethod} */\n  this.method;\n  /** @type {!(Array|Uint8Array)} */\n  this.output = this.rawinflate.output;\n};\n\n/**\n * decompress.\n * @return {!(Uint8Array|Array)} inflated buffer.\n */\nZlib.InflateStream.prototype.decompress = function (input) {\n  /** @type {!(Uint8Array|Array)} inflated buffer. */\n  var buffer;\n  /** @type {number} adler-32 checksum */\n  var adler32;\n\n  // 新しい入力を入力バッファに結合する\n  // XXX Array, Uint8Array のチェックを行うか確認する\n  if (input !== void 0) {\n    if (USE_TYPEDARRAY) {\n      var tmp = new Uint8Array(this.input.length + input.length);\n      tmp.set(this.input, 0);\n      tmp.set(input, this.input.length);\n      this.input = tmp;\n    } else {\n      this.input = this.input.concat(input);\n    }\n  }\n\n  if (this.method === void 0) {\n    if (this.readHeader() < 0) {\n      return new (USE_TYPEDARRAY ? Uint8Array : Array)();\n    }\n  }\n\n  buffer = this.rawinflate.decompress(this.input, this.ip);\n  if (this.rawinflate.ip !== 0) {\n    this.input = USE_TYPEDARRAY ? this.input.subarray(this.rawinflate.ip) : this.input.slice(this.rawinflate.ip);\n    this.ip = 0;\n  }\n\n  // verify adler-32\n  /*\n  if (this.verify) {\n    adler32 =\n      input[this.ip++] << 24 | input[this.ip++] << 16 |\n      input[this.ip++] << 8 | input[this.ip++];\n     if (adler32 !== Zlib.Adler32(buffer)) {\n      throw new Error('invalid adler-32 checksum');\n    }\n  }\n  */\n\n  return buffer;\n};\n\nZlib.InflateStream.prototype.readHeader = function () {\n  var ip = this.ip;\n  var input = this.input;\n\n  // Compression Method and Flags\n  var cmf = input[ip++];\n  var flg = input[ip++];\n\n  if (cmf === void 0 || flg === void 0) {\n    return -1;\n  }\n\n  // compression method\n  switch (cmf & 0x0f) {\n    case Zlib.CompressionMethod.DEFLATE:\n      this.method = Zlib.CompressionMethod.DEFLATE;\n      break;\n    default:\n      throw new Error('unsupported compression method');\n  }\n\n  // fcheck\n  if (((cmf << 8) + flg) % 31 !== 0) {\n    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\n  }\n\n  // fdict (not supported)\n  if (flg & 0x20) {\n    throw new Error('fdict flag is not supported');\n  }\n\n  this.ip = ip;\n};\n\n/**\n * @fileoverview GZIP (RFC1952) 展開コンテナ実装.\n */\n\n/**\n * @constructor\n * @param {!(Array|Uint8Array)} input input buffer.\n * @param {Object=} opt_params option parameters.\n */\nZlib.Gunzip = function (input, opt_params) {\n  /** @type {!(Array.<number>|Uint8Array)} input buffer. */\n  this.input = input;\n  /** @type {number} input buffer pointer. */\n  this.ip = 0;\n  /** @type {Array.<Zlib.GunzipMember>} */\n  this.member = [];\n  /** @type {boolean} */\n  this.decompressed = false;\n};\n\n/**\n * @return {Array.<Zlib.GunzipMember>}\n */\nZlib.Gunzip.prototype.getMembers = function () {\n  if (!this.decompressed) {\n    this.decompress();\n  }\n\n  return this.member.slice();\n};\n\n/**\n * inflate gzip data.\n * @return {!(Array.<number>|Uint8Array)} inflated buffer.\n */\nZlib.Gunzip.prototype.decompress = function () {\n  /** @type {number} input length. */\n  var il = this.input.length;\n\n  while (this.ip < il) {\n    this.decodeMember();\n  }\n\n  this.decompressed = true;\n\n  return this.concatMember();\n};\n\n/**\n * decode gzip member.\n */\nZlib.Gunzip.prototype.decodeMember = function () {\n  /** @type {Zlib.GunzipMember} */\n  var member = new Zlib.GunzipMember();\n  /** @type {number} */\n  var isize;\n  /** @type {Zlib.RawInflate} RawInflate implementation. */\n  var rawinflate;\n  /** @type {!(Array.<number>|Uint8Array)} inflated data. */\n  var inflated;\n  /** @type {number} inflate size */\n  var inflen;\n  /** @type {number} character code */\n  var c;\n  /** @type {number} character index in string. */\n  var ci;\n  /** @type {Array.<string>} character array. */\n  var str;\n  /** @type {number} modification time. */\n  var mtime;\n  /** @type {number} */\n  var crc32;\n\n  var input = this.input;\n  var ip = this.ip;\n\n  member.id1 = input[ip++];\n  member.id2 = input[ip++];\n\n  // check signature\n  if (member.id1 !== 0x1f || member.id2 !== 0x8b) {\n    throw new Error('invalid file signature:' + member.id1 + ',' + member.id2);\n  }\n\n  // check compression method\n  member.cm = input[ip++];\n  switch (member.cm) {\n    case 8:\n      /* XXX: use Zlib const */\n      break;\n    default:\n      throw new Error('unknown compression method: ' + member.cm);\n  }\n\n  // flags\n  member.flg = input[ip++];\n\n  // modification time\n  mtime = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24;\n  member.mtime = new Date(mtime * 1000);\n\n  // extra flags\n  member.xfl = input[ip++];\n\n  // operating system\n  member.os = input[ip++];\n\n  // extra\n  if ((member.flg & Zlib.Gzip.FlagsMask.FEXTRA) > 0) {\n    member.xlen = input[ip++] | input[ip++] << 8;\n    ip = this.decodeSubField(ip, member.xlen);\n  }\n\n  // fname\n  if ((member.flg & Zlib.Gzip.FlagsMask.FNAME) > 0) {\n    for (str = [], ci = 0; (c = input[ip++]) > 0;) {\n      str[ci++] = String.fromCharCode(c);\n    }\n    member.name = str.join('');\n  }\n\n  // fcomment\n  if ((member.flg & Zlib.Gzip.FlagsMask.FCOMMENT) > 0) {\n    for (str = [], ci = 0; (c = input[ip++]) > 0;) {\n      str[ci++] = String.fromCharCode(c);\n    }\n    member.comment = str.join('');\n  }\n\n  // fhcrc\n  if ((member.flg & Zlib.Gzip.FlagsMask.FHCRC) > 0) {\n    member.crc16 = Zlib.CRC32.calc(input, 0, ip) & 0xffff;\n    if (member.crc16 !== (input[ip++] | input[ip++] << 8)) {\n      throw new Error('invalid header crc16');\n    }\n  }\n\n  // isize を事前に取得すると展開後のサイズが分かるため、\n  // inflate処理のバッファサイズが事前に分かり、高速になる\n  isize = input[input.length - 4] | input[input.length - 3] << 8 | input[input.length - 2] << 16 | input[input.length - 1] << 24;\n\n  // isize の妥当性チェック\n  // ハフマン符号では最小 2-bit のため、最大で 1/4 になる\n  // LZ77 符号では 長さと距離 2-Byte で最大 258-Byte を表現できるため、\n  // 1/128 になるとする\n  // ここから入力バッファの残りが isize の 512 倍以上だったら\n  // サイズ指定のバッファ確保は行わない事とする\n  if (input.length - ip - /* CRC-32 */4 - /* ISIZE */4 < isize * 512) {\n    inflen = isize;\n  }\n\n  // compressed block\n  rawinflate = new Zlib.RawInflate(input, { 'index': ip, 'bufferSize': inflen });\n  member.data = inflated = rawinflate.decompress();\n  ip = rawinflate.ip;\n\n  // crc32\n  member.crc32 = crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n  if (Zlib.CRC32.calc(inflated) !== crc32) {\n    throw new Error('invalid CRC-32 checksum: 0x' + Zlib.CRC32.calc(inflated).toString(16) + ' / 0x' + crc32.toString(16));\n  }\n\n  // input size\n  member.isize = isize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n  if ((inflated.length & 0xffffffff) !== isize) {\n    throw new Error('invalid input size: ' + (inflated.length & 0xffffffff) + ' / ' + isize);\n  }\n\n  this.member.push(member);\n  this.ip = ip;\n};\n\n/**\n * サブフィールドのデコード\n * XXX: 現在は何もせずスキップする\n */\nZlib.Gunzip.prototype.decodeSubField = function (ip, length) {\n  return ip + length;\n};\n\n/**\n * @return {!(Array.<number>|Uint8Array)}\n */\nZlib.Gunzip.prototype.concatMember = function () {\n  /** @type {Array.<Zlib.GunzipMember>} */\n  var member = this.member;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n  /** @type {number} */\n  var p = 0;\n  /** @type {number} */\n  var size = 0;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var buffer;\n\n  for (i = 0, il = member.length; i < il; ++i) {\n    size += member[i].data.length;\n  }\n\n  if (USE_TYPEDARRAY) {\n    buffer = new Uint8Array(size);\n    for (i = 0; i < il; ++i) {\n      buffer.set(member[i].data, p);\n      p += member[i].data.length;\n    }\n  } else {\n    buffer = [];\n    for (i = 0; i < il; ++i) {\n      buffer[i] = member[i].data;\n    }\n    buffer = Array.prototype.concat.apply([], buffer);\n  }\n\n  return buffer;\n};\n\n/**\n * @constructor\n */\nZlib.GunzipMember = function () {\n  /** @type {number} signature first byte. */\n  this.id1;\n  /** @type {number} signature second byte. */\n  this.id2;\n  /** @type {number} compression method. */\n  this.cm;\n  /** @type {number} flags. */\n  this.flg;\n  /** @type {Date} modification time. */\n  this.mtime;\n  /** @type {number} extra flags. */\n  this.xfl;\n  /** @type {number} operating system number. */\n  this.os;\n  /** @type {number} CRC-16 value for FHCRC flag. */\n  this.crc16;\n  /** @type {number} extra length. */\n  this.xlen;\n  /** @type {number} CRC-32 value for verification. */\n  this.crc32;\n  /** @type {number} input size modulo 32 value. */\n  this.isize;\n  /** @type {string} filename. */\n  this.name;\n  /** @type {string} comment. */\n  this.comment;\n  /** @type {!(Uint8Array|Array.<number>)} */\n  this.data;\n};\n\nZlib.GunzipMember.prototype.getName = function () {\n  return this.name;\n};\n\nZlib.GunzipMember.prototype.getData = function () {\n  return this.data;\n};\n\nZlib.GunzipMember.prototype.getMtime = function () {\n  return this.mtime;\n};\n\n/**\n * @fileoverview GZIP (RFC1952) 実装.\n */\n\n/**\n * @constructor\n * @param {!(Array|Uint8Array)} input input buffer.\n * @param {Object=} opt_params option parameters.\n */\nZlib.Gzip = function (input, opt_params) {\n  /** @type {!(Array.<number>|Uint8Array)} input buffer. */\n  this.input = input;\n  /** @type {number} input buffer pointer. */\n  this.ip = 0;\n  /** @type {!(Array.<number>|Uint8Array)} output buffer. */\n  this.output;\n  /** @type {number} output buffer. */\n  this.op = 0;\n  /** @type {!Object} flags option flags. */\n  this.flags = {};\n  /** @type {!string} filename. */\n  this.filename;\n  /** @type {!string} comment. */\n  this.comment;\n  /** @type {!Object} deflate options. */\n  this.deflateOptions;\n\n  // option parameters\n  if (opt_params) {\n    if (opt_params['flags']) {\n      this.flags = opt_params['flags'];\n    }\n    if (typeof opt_params['filename'] === 'string') {\n      this.filename = opt_params['filename'];\n    }\n    if (typeof opt_params['comment'] === 'string') {\n      this.comment = opt_params['comment'];\n    }\n    if (opt_params['deflateOptions']) {\n      this.deflateOptions = opt_params['deflateOptions'];\n    }\n  }\n\n  if (!this.deflateOptions) {\n    this.deflateOptions = {};\n  }\n};\n\n/**\n * @type {number}\n * @const\n */\nZlib.Gzip.DefaultBufferSize = 0x8000;\n\n/**\n * encode gzip members.\n * @return {!(Array|Uint8Array)} gzip binary array.\n */\nZlib.Gzip.prototype.compress = function () {\n  /** @type {number} flags. */\n  var flg;\n  /** @type {number} modification time. */\n  var mtime;\n  /** @type {number} CRC-16 value for FHCRC flag. */\n  var crc16;\n  /** @type {number} CRC-32 value for verification. */\n  var crc32;\n  /** @type {!Zlib.RawDeflate} raw deflate object. */\n  var rawdeflate;\n  /** @type {number} character code */\n  var c;\n  /** @type {number} loop counter. */\n  var i;\n  /** @type {number} loop limiter. */\n  var il;\n  /** @type {!(Array|Uint8Array)} output buffer. */\n  var output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Gzip.DefaultBufferSize);\n  /** @type {number} output buffer pointer. */\n  var op = 0;\n\n  var input = this.input;\n  var ip = this.ip;\n  var filename = this.filename;\n  var comment = this.comment;\n\n  // check signature\n  output[op++] = 0x1f;\n  output[op++] = 0x8b;\n\n  // check compression method\n  output[op++] = 8; /* XXX: use Zlib const */\n\n  // flags\n  flg = 0;\n  if (this.flags['fname']) flg |= Zlib.Gzip.FlagsMask.FNAME;\n  if (this.flags['fcomment']) flg |= Zlib.Gzip.FlagsMask.FCOMMENT;\n  if (this.flags['fhcrc']) flg |= Zlib.Gzip.FlagsMask.FHCRC;\n  // XXX: FTEXT\n  // XXX: FEXTRA\n  output[op++] = flg;\n\n  // modification time\n  mtime = (Date.now ? Date.now() : +new Date()) / 1000 | 0;\n  output[op++] = mtime & 0xff;\n  output[op++] = mtime >>> 8 & 0xff;\n  output[op++] = mtime >>> 16 & 0xff;\n  output[op++] = mtime >>> 24 & 0xff;\n\n  // extra flags\n  output[op++] = 0;\n\n  // operating system\n  output[op++] = Zlib.Gzip.OperatingSystem.UNKNOWN;\n\n  // extra\n  /* NOP */\n\n  // fname\n  if (this.flags['fname'] !== void 0) {\n    for (i = 0, il = filename.length; i < il; ++i) {\n      c = filename.charCodeAt(i);\n      if (c > 0xff) {\n        output[op++] = c >>> 8 & 0xff;\n      }\n      output[op++] = c & 0xff;\n    }\n    output[op++] = 0; // null termination\n  }\n\n  // fcomment\n  if (this.flags['comment']) {\n    for (i = 0, il = comment.length; i < il; ++i) {\n      c = comment.charCodeAt(i);\n      if (c > 0xff) {\n        output[op++] = c >>> 8 & 0xff;\n      }\n      output[op++] = c & 0xff;\n    }\n    output[op++] = 0; // null termination\n  }\n\n  // fhcrc\n  if (this.flags['fhcrc']) {\n    crc16 = Zlib.CRC32.calc(output, 0, op) & 0xffff;\n    output[op++] = crc16 & 0xff;\n    output[op++] = crc16 >>> 8 & 0xff;\n  }\n\n  // add compress option\n  this.deflateOptions['outputBuffer'] = output;\n  this.deflateOptions['outputIndex'] = op;\n\n  // compress\n  rawdeflate = new Zlib.RawDeflate(input, this.deflateOptions);\n  output = rawdeflate.compress();\n  op = rawdeflate.op;\n\n  // expand buffer\n  if (USE_TYPEDARRAY) {\n    if (op + 8 > output.buffer.byteLength) {\n      this.output = new Uint8Array(op + 8);\n      this.output.set(new Uint8Array(output.buffer));\n      output = this.output;\n    } else {\n      output = new Uint8Array(output.buffer);\n    }\n  }\n\n  // crc32\n  crc32 = Zlib.CRC32.calc(input);\n  output[op++] = crc32 & 0xff;\n  output[op++] = crc32 >>> 8 & 0xff;\n  output[op++] = crc32 >>> 16 & 0xff;\n  output[op++] = crc32 >>> 24 & 0xff;\n\n  // input size\n  il = input.length;\n  output[op++] = il & 0xff;\n  output[op++] = il >>> 8 & 0xff;\n  output[op++] = il >>> 16 & 0xff;\n  output[op++] = il >>> 24 & 0xff;\n\n  this.ip = ip;\n\n  if (USE_TYPEDARRAY && op < output.length) {\n    this.output = output = output.subarray(0, op);\n  }\n\n  return output;\n};\n\n/** @enum {number} */\nZlib.Gzip.OperatingSystem = {\n  FAT: 0,\n  AMIGA: 1,\n  VMS: 2,\n  UNIX: 3,\n  VM_CMS: 4,\n  ATARI_TOS: 5,\n  HPFS: 6,\n  MACINTOSH: 7,\n  Z_SYSTEM: 8,\n  CP_M: 9,\n  TOPS_20: 10,\n  NTFS: 11,\n  QDOS: 12,\n  ACORN_RISCOS: 13,\n  UNKNOWN: 255\n};\n\n/** @enum {number} */\nZlib.Gzip.FlagsMask = {\n  FTEXT: 0x01,\n  FHCRC: 0x02,\n  FEXTRA: 0x04,\n  FNAME: 0x08,\n  FCOMMENT: 0x10\n};\n\n/**\n * @fileoverview Heap Sort 実装. ハフマン符号化で使用する.\n */\n\n/**\n * カスタムハフマン符号で使用するヒープ実装\n * @param {number} length ヒープサイズ.\n * @constructor\n */\nZlib.Heap = function (length) {\n  this.buffer = new (USE_TYPEDARRAY ? Uint16Array : Array)(length * 2);\n  this.length = 0;\n};\n\n/**\n * 親ノードの index 取得\n * @param {number} index 子ノードの index.\n * @return {number} 親ノードの index.\n *\n */\nZlib.Heap.prototype.getParent = function (index) {\n  return ((index - 2) / 4 | 0) * 2;\n};\n\n/**\n * 子ノードの index 取得\n * @param {number} index 親ノードの index.\n * @return {number} 子ノードの index.\n */\nZlib.Heap.prototype.getChild = function (index) {\n  return 2 * index + 2;\n};\n\n/**\n * Heap に値を追加する\n * @param {number} index キー index.\n * @param {number} value 値.\n * @return {number} 現在のヒープ長.\n */\nZlib.Heap.prototype.push = function (index, value) {\n  var current,\n      parent,\n      heap = this.buffer,\n      swap;\n\n  current = this.length;\n  heap[this.length++] = value;\n  heap[this.length++] = index;\n\n  // ルートノードにたどり着くまで入れ替えを試みる\n  while (current > 0) {\n    parent = this.getParent(current);\n\n    // 親ノードと比較して親の方が小さければ入れ替える\n    if (heap[current] > heap[parent]) {\n      swap = heap[current];\n      heap[current] = heap[parent];\n      heap[parent] = swap;\n\n      swap = heap[current + 1];\n      heap[current + 1] = heap[parent + 1];\n      heap[parent + 1] = swap;\n\n      current = parent;\n      // 入れ替えが必要なくなったらそこで抜ける\n    } else {\n      break;\n    }\n  }\n\n  return this.length;\n};\n\n/**\n * Heapから一番大きい値を返す\n * @return {{index: number, value: number, length: number}} {index: キーindex,\n *     value: 値, length: ヒープ長} の Object.\n */\nZlib.Heap.prototype.pop = function () {\n  var index,\n      value,\n      heap = this.buffer,\n      swap,\n      current,\n      parent;\n\n  value = heap[0];\n  index = heap[1];\n\n  // 後ろから値を取る\n  this.length -= 2;\n  heap[0] = heap[this.length];\n  heap[1] = heap[this.length + 1];\n\n  parent = 0;\n  // ルートノードから下がっていく\n  while (true) {\n    current = this.getChild(parent);\n\n    // 範囲チェック\n    if (current >= this.length) {\n      break;\n    }\n\n    // 隣のノードと比較して、隣の方が値が大きければ隣を現在ノードとして選択\n    if (current + 2 < this.length && heap[current + 2] > heap[current]) {\n      current += 2;\n    }\n\n    // 親ノードと比較して親の方が小さい場合は入れ替える\n    if (heap[current] > heap[parent]) {\n      swap = heap[parent];\n      heap[parent] = heap[current];\n      heap[current] = swap;\n\n      swap = heap[parent + 1];\n      heap[parent + 1] = heap[current + 1];\n      heap[current + 1] = swap;\n    } else {\n      break;\n    }\n\n    parent = current;\n  }\n\n  return { index: index, value: value, length: this.length };\n};\n\n/* vim:set expandtab ts=2 sw=2 tw=80: */\n\n/**\n * @fileoverview Deflate (RFC1951) 符号化アルゴリズム実装.\n */\n\n/**\n * Raw Deflate 実装\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} input 符号化する対象のバッファ.\n * @param {Object=} opt_params option parameters.\n *\n * typed array が使用可能なとき、outputBuffer が Array は自動的に Uint8Array に\n * 変換されます.\n * 別のオブジェクトになるため出力バッファを参照している変数などは\n * 更新する必要があります.\n */\nZlib.RawDeflate = function (input, opt_params) {\n  /** @type {Zlib.RawDeflate.CompressionType} */\n  this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;\n  /** @type {number} */\n  this.lazy = 0;\n  /** @type {!(Array.<number>|Uint32Array)} */\n  this.freqsLitLen;\n  /** @type {!(Array.<number>|Uint32Array)} */\n  this.freqsDist;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.input = USE_TYPEDARRAY && input instanceof Array ? new Uint8Array(input) : input;\n  /** @type {!(Array.<number>|Uint8Array)} output output buffer. */\n  this.output;\n  /** @type {number} pos output buffer position. */\n  this.op = 0;\n\n  // option parameters\n  if (opt_params) {\n    if (opt_params['lazy']) {\n      this.lazy = opt_params['lazy'];\n    }\n    if (typeof opt_params['compressionType'] === 'number') {\n      this.compressionType = opt_params['compressionType'];\n    }\n    if (opt_params['outputBuffer']) {\n      this.output = USE_TYPEDARRAY && opt_params['outputBuffer'] instanceof Array ? new Uint8Array(opt_params['outputBuffer']) : opt_params['outputBuffer'];\n    }\n    if (typeof opt_params['outputIndex'] === 'number') {\n      this.op = opt_params['outputIndex'];\n    }\n  }\n\n  if (!this.output) {\n    this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(0x8000);\n  }\n};\n\n/**\n * @enum {number}\n */\nZlib.RawDeflate.CompressionType = {\n  NONE: 0,\n  FIXED: 1,\n  DYNAMIC: 2,\n  RESERVED: 3\n};\n\n/**\n * LZ77 の最小マッチ長\n * @const\n * @type {number}\n */\nZlib.RawDeflate.Lz77MinLength = 3;\n\n/**\n * LZ77 の最大マッチ長\n * @const\n * @type {number}\n */\nZlib.RawDeflate.Lz77MaxLength = 258;\n\n/**\n * LZ77 のウィンドウサイズ\n * @const\n * @type {number}\n */\nZlib.RawDeflate.WindowSize = 0x8000;\n\n/**\n * 最長の符号長\n * @const\n * @type {number}\n */\nZlib.RawDeflate.MaxCodeLength = 16;\n\n/**\n * ハフマン符号の最大数値\n * @const\n * @type {number}\n */\nZlib.RawDeflate.HUFMAX = 286;\n\n/**\n * 固定ハフマン符号の符号化テーブル\n * @const\n * @type {Array.<Array.<number, number>>}\n */\nZlib.RawDeflate.FixedHuffmanTable = function () {\n  var table = [],\n      i;\n\n  for (i = 0; i < 288; i++) {\n    switch (true) {\n      case i <= 143:\n        table.push([i + 0x030, 8]);break;\n      case i <= 255:\n        table.push([i - 144 + 0x190, 9]);break;\n      case i <= 279:\n        table.push([i - 256 + 0x000, 7]);break;\n      case i <= 287:\n        table.push([i - 280 + 0x0C0, 8]);break;\n      default:\n        throw 'invalid literal: ' + i;\n    }\n  }\n\n  return table;\n}();\n\n/**\n * DEFLATE ブロックの作成\n * @return {!(Array.<number>|Uint8Array)} 圧縮済み byte array.\n */\nZlib.RawDeflate.prototype.compress = function () {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var blockArray;\n  /** @type {number} */\n  var position;\n  /** @type {number} */\n  var length;\n\n  var input = this.input;\n\n  // compression\n  switch (this.compressionType) {\n    case Zlib.RawDeflate.CompressionType.NONE:\n      // each 65535-Byte (length header: 16-bit)\n      for (position = 0, length = input.length; position < length;) {\n        blockArray = USE_TYPEDARRAY ? input.subarray(position, position + 0xffff) : input.slice(position, position + 0xffff);\n        position += blockArray.length;\n        this.makeNocompressBlock(blockArray, position === length);\n      }\n      break;\n    case Zlib.RawDeflate.CompressionType.FIXED:\n      this.output = this.makeFixedHuffmanBlock(input, true);\n      this.op = this.output.length;\n      break;\n    case Zlib.RawDeflate.CompressionType.DYNAMIC:\n      this.output = this.makeDynamicHuffmanBlock(input, true);\n      this.op = this.output.length;\n      break;\n    default:\n      throw 'invalid compression type';\n  }\n\n  return this.output;\n};\n\n/**\n * 非圧縮ブロックの作成\n * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.\n * @param {!boolean} isFinalBlock 最後のブロックならばtrue.\n * @return {!(Array.<number>|Uint8Array)} 非圧縮ブロック byte array.\n */\nZlib.RawDeflate.prototype.makeNocompressBlock = function (blockArray, isFinalBlock) {\n  /** @type {number} */\n  var bfinal;\n  /** @type {Zlib.RawDeflate.CompressionType} */\n  var btype;\n  /** @type {number} */\n  var len;\n  /** @type {number} */\n  var nlen;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n\n  var output = this.output;\n  var op = this.op;\n\n  // expand buffer\n  if (USE_TYPEDARRAY) {\n    output = new Uint8Array(this.output.buffer);\n    while (output.length <= op + blockArray.length + 5) {\n      output = new Uint8Array(output.length << 1);\n    }\n    output.set(this.output);\n  }\n\n  // header\n  bfinal = isFinalBlock ? 1 : 0;\n  btype = Zlib.RawDeflate.CompressionType.NONE;\n  output[op++] = bfinal | btype << 1;\n\n  // length\n  len = blockArray.length;\n  nlen = ~len + 0x10000 & 0xffff;\n  output[op++] = len & 0xff;\n  output[op++] = len >>> 8 & 0xff;\n  output[op++] = nlen & 0xff;\n  output[op++] = nlen >>> 8 & 0xff;\n\n  // copy buffer\n  if (USE_TYPEDARRAY) {\n    output.set(blockArray, op);\n    op += blockArray.length;\n    output = output.subarray(0, op);\n  } else {\n    for (i = 0, il = blockArray.length; i < il; ++i) {\n      output[op++] = blockArray[i];\n    }\n    output.length = op;\n  }\n\n  this.op = op;\n  this.output = output;\n\n  return output;\n};\n\n/**\n * 固定ハフマンブロックの作成\n * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.\n * @param {!boolean} isFinalBlock 最後のブロックならばtrue.\n * @return {!(Array.<number>|Uint8Array)} 固定ハフマン符号化ブロック byte array.\n */\nZlib.RawDeflate.prototype.makeFixedHuffmanBlock = function (blockArray, isFinalBlock) {\n  /** @type {Zlib.BitStream} */\n  var stream = new Zlib.BitStream(USE_TYPEDARRAY ? new Uint8Array(this.output.buffer) : this.output, this.op);\n  /** @type {number} */\n  var bfinal;\n  /** @type {Zlib.RawDeflate.CompressionType} */\n  var btype;\n  /** @type {!(Array.<number>|Uint16Array)} */\n  var data;\n\n  // header\n  bfinal = isFinalBlock ? 1 : 0;\n  btype = Zlib.RawDeflate.CompressionType.FIXED;\n\n  stream.writeBits(bfinal, 1, true);\n  stream.writeBits(btype, 2, true);\n\n  data = this.lz77(blockArray);\n  this.fixedHuffman(data, stream);\n\n  return stream.finish();\n};\n\n/**\n * 動的ハフマンブロックの作成\n * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.\n * @param {!boolean} isFinalBlock 最後のブロックならばtrue.\n * @return {!(Array.<number>|Uint8Array)} 動的ハフマン符号ブロック byte array.\n */\nZlib.RawDeflate.prototype.makeDynamicHuffmanBlock = function (blockArray, isFinalBlock) {\n  /** @type {Zlib.BitStream} */\n  var stream = new Zlib.BitStream(USE_TYPEDARRAY ? new Uint8Array(this.output.buffer) : this.output, this.op);\n  /** @type {number} */\n  var bfinal;\n  /** @type {Zlib.RawDeflate.CompressionType} */\n  var btype;\n  /** @type {!(Array.<number>|Uint16Array)} */\n  var data;\n  /** @type {number} */\n  var hlit;\n  /** @type {number} */\n  var hdist;\n  /** @type {number} */\n  var hclen;\n  /** @const @type {Array.<number>} */\n  var hclenOrder = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var litLenLengths;\n  /** @type {!(Array.<number>|Uint16Array)} */\n  var litLenCodes;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var distLengths;\n  /** @type {!(Array.<number>|Uint16Array)} */\n  var distCodes;\n  /** @type {{\n   *   codes: !(Array.<number>|Uint32Array),\n   *   freqs: !(Array.<number>|Uint8Array)\n   * }} */\n  var treeSymbols;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var treeLengths;\n  /** @type {Array} */\n  var transLengths = new Array(19);\n  /** @type {!(Array.<number>|Uint16Array)} */\n  var treeCodes;\n  /** @type {number} */\n  var code;\n  /** @type {number} */\n  var bitlen;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n\n  // header\n  bfinal = isFinalBlock ? 1 : 0;\n  btype = Zlib.RawDeflate.CompressionType.DYNAMIC;\n\n  stream.writeBits(bfinal, 1, true);\n  stream.writeBits(btype, 2, true);\n\n  data = this.lz77(blockArray);\n\n  // リテラル・長さ, 距離のハフマン符号と符号長の算出\n  litLenLengths = this.getLengths_(this.freqsLitLen, 15);\n  litLenCodes = this.getCodesFromLengths_(litLenLengths);\n  distLengths = this.getLengths_(this.freqsDist, 7);\n  distCodes = this.getCodesFromLengths_(distLengths);\n\n  // HLIT, HDIST の決定\n  for (hlit = 286; hlit > 257 && litLenLengths[hlit - 1] === 0; hlit--) {}\n  for (hdist = 30; hdist > 1 && distLengths[hdist - 1] === 0; hdist--) {}\n\n  // HCLEN\n  treeSymbols = this.getTreeSymbols_(hlit, litLenLengths, hdist, distLengths);\n  treeLengths = this.getLengths_(treeSymbols.freqs, 7);\n  for (i = 0; i < 19; i++) {\n    transLengths[i] = treeLengths[hclenOrder[i]];\n  }\n  for (hclen = 19; hclen > 4 && transLengths[hclen - 1] === 0; hclen--) {}\n\n  treeCodes = this.getCodesFromLengths_(treeLengths);\n\n  // 出力\n  stream.writeBits(hlit - 257, 5, true);\n  stream.writeBits(hdist - 1, 5, true);\n  stream.writeBits(hclen - 4, 4, true);\n  for (i = 0; i < hclen; i++) {\n    stream.writeBits(transLengths[i], 3, true);\n  }\n\n  // ツリーの出力\n  for (i = 0, il = treeSymbols.codes.length; i < il; i++) {\n    code = treeSymbols.codes[i];\n\n    stream.writeBits(treeCodes[code], treeLengths[code], true);\n\n    // extra bits\n    if (code >= 16) {\n      i++;\n      switch (code) {\n        case 16:\n          bitlen = 2;break;\n        case 17:\n          bitlen = 3;break;\n        case 18:\n          bitlen = 7;break;\n        default:\n          throw 'invalid code: ' + code;\n      }\n\n      stream.writeBits(treeSymbols.codes[i], bitlen, true);\n    }\n  }\n\n  this.dynamicHuffman(data, [litLenCodes, litLenLengths], [distCodes, distLengths], stream);\n\n  return stream.finish();\n};\n\n/**\n * 動的ハフマン符号化(カスタムハフマンテーブル)\n * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.\n * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.\n * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.\n */\nZlib.RawDeflate.prototype.dynamicHuffman = function (dataArray, litLen, dist, stream) {\n  /** @type {number} */\n  var index;\n  /** @type {number} */\n  var length;\n  /** @type {number} */\n  var literal;\n  /** @type {number} */\n  var code;\n  /** @type {number} */\n  var litLenCodes;\n  /** @type {number} */\n  var litLenLengths;\n  /** @type {number} */\n  var distCodes;\n  /** @type {number} */\n  var distLengths;\n\n  litLenCodes = litLen[0];\n  litLenLengths = litLen[1];\n  distCodes = dist[0];\n  distLengths = dist[1];\n\n  // 符号を BitStream に書き込んでいく\n  for (index = 0, length = dataArray.length; index < length; ++index) {\n    literal = dataArray[index];\n\n    // literal or length\n    stream.writeBits(litLenCodes[literal], litLenLengths[literal], true);\n\n    // 長さ・距離符号\n    if (literal > 256) {\n      // length extra\n      stream.writeBits(dataArray[++index], dataArray[++index], true);\n      // distance\n      code = dataArray[++index];\n      stream.writeBits(distCodes[code], distLengths[code], true);\n      // distance extra\n      stream.writeBits(dataArray[++index], dataArray[++index], true);\n      // 終端\n    } else if (literal === 256) {\n      break;\n    }\n  }\n\n  return stream;\n};\n\n/**\n * 固定ハフマン符号化\n * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.\n * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.\n * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.\n */\nZlib.RawDeflate.prototype.fixedHuffman = function (dataArray, stream) {\n  /** @type {number} */\n  var index;\n  /** @type {number} */\n  var length;\n  /** @type {number} */\n  var literal;\n\n  // 符号を BitStream に書き込んでいく\n  for (index = 0, length = dataArray.length; index < length; index++) {\n    literal = dataArray[index];\n\n    // 符号の書き込み\n    Zlib.BitStream.prototype.writeBits.apply(stream, Zlib.RawDeflate.FixedHuffmanTable[literal]);\n\n    // 長さ・距離符号\n    if (literal > 0x100) {\n      // length extra\n      stream.writeBits(dataArray[++index], dataArray[++index], true);\n      // distance\n      stream.writeBits(dataArray[++index], 5);\n      // distance extra\n      stream.writeBits(dataArray[++index], dataArray[++index], true);\n      // 終端\n    } else if (literal === 0x100) {\n      break;\n    }\n  }\n\n  return stream;\n};\n\n/**\n * マッチ情報\n * @param {!number} length マッチした長さ.\n * @param {!number} backwardDistance マッチ位置との距離.\n * @constructor\n */\nZlib.RawDeflate.Lz77Match = function (length, backwardDistance) {\n  /** @type {number} match length. */\n  this.length = length;\n  /** @type {number} backward distance. */\n  this.backwardDistance = backwardDistance;\n};\n\n/**\n * 長さ符号テーブル.\n * [コード, 拡張ビット, 拡張ビット長] の配列となっている.\n * @const\n * @type {!(Array.<number>|Uint32Array)}\n */\nZlib.RawDeflate.Lz77Match.LengthCodeTable = function (table) {\n  return USE_TYPEDARRAY ? new Uint32Array(table) : table;\n}(function () {\n  /** @type {!Array} */\n  var table = [];\n  /** @type {number} */\n  var i;\n  /** @type {!Array.<number>} */\n  var c;\n\n  for (i = 3; i <= 258; i++) {\n    c = code(i);\n    table[i] = c[2] << 24 | c[1] << 16 | c[0];\n  }\n\n  /**\n   * @param {number} length lz77 length.\n   * @return {!Array.<number>} lz77 codes.\n   */\n  function code(length) {\n    switch (true) {\n      case length === 3:\n        return [257, length - 3, 0];break;\n      case length === 4:\n        return [258, length - 4, 0];break;\n      case length === 5:\n        return [259, length - 5, 0];break;\n      case length === 6:\n        return [260, length - 6, 0];break;\n      case length === 7:\n        return [261, length - 7, 0];break;\n      case length === 8:\n        return [262, length - 8, 0];break;\n      case length === 9:\n        return [263, length - 9, 0];break;\n      case length === 10:\n        return [264, length - 10, 0];break;\n      case length <= 12:\n        return [265, length - 11, 1];break;\n      case length <= 14:\n        return [266, length - 13, 1];break;\n      case length <= 16:\n        return [267, length - 15, 1];break;\n      case length <= 18:\n        return [268, length - 17, 1];break;\n      case length <= 22:\n        return [269, length - 19, 2];break;\n      case length <= 26:\n        return [270, length - 23, 2];break;\n      case length <= 30:\n        return [271, length - 27, 2];break;\n      case length <= 34:\n        return [272, length - 31, 2];break;\n      case length <= 42:\n        return [273, length - 35, 3];break;\n      case length <= 50:\n        return [274, length - 43, 3];break;\n      case length <= 58:\n        return [275, length - 51, 3];break;\n      case length <= 66:\n        return [276, length - 59, 3];break;\n      case length <= 82:\n        return [277, length - 67, 4];break;\n      case length <= 98:\n        return [278, length - 83, 4];break;\n      case length <= 114:\n        return [279, length - 99, 4];break;\n      case length <= 130:\n        return [280, length - 115, 4];break;\n      case length <= 162:\n        return [281, length - 131, 5];break;\n      case length <= 194:\n        return [282, length - 163, 5];break;\n      case length <= 226:\n        return [283, length - 195, 5];break;\n      case length <= 257:\n        return [284, length - 227, 5];break;\n      case length === 258:\n        return [285, length - 258, 0];break;\n      default:\n        throw 'invalid length: ' + length;\n    }\n  }\n\n  return table;\n}());\n\n/**\n * 距離符号テーブル\n * @param {!number} dist 距離.\n * @return {!Array.<number>} コード、拡張ビット、拡張ビット長の配列.\n * @private\n */\nZlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function (dist) {\n  /** @type {!Array.<number>} distance code table. */\n  var r;\n\n  switch (true) {\n    case dist === 1:\n      r = [0, dist - 1, 0];break;\n    case dist === 2:\n      r = [1, dist - 2, 0];break;\n    case dist === 3:\n      r = [2, dist - 3, 0];break;\n    case dist === 4:\n      r = [3, dist - 4, 0];break;\n    case dist <= 6:\n      r = [4, dist - 5, 1];break;\n    case dist <= 8:\n      r = [5, dist - 7, 1];break;\n    case dist <= 12:\n      r = [6, dist - 9, 2];break;\n    case dist <= 16:\n      r = [7, dist - 13, 2];break;\n    case dist <= 24:\n      r = [8, dist - 17, 3];break;\n    case dist <= 32:\n      r = [9, dist - 25, 3];break;\n    case dist <= 48:\n      r = [10, dist - 33, 4];break;\n    case dist <= 64:\n      r = [11, dist - 49, 4];break;\n    case dist <= 96:\n      r = [12, dist - 65, 5];break;\n    case dist <= 128:\n      r = [13, dist - 97, 5];break;\n    case dist <= 192:\n      r = [14, dist - 129, 6];break;\n    case dist <= 256:\n      r = [15, dist - 193, 6];break;\n    case dist <= 384:\n      r = [16, dist - 257, 7];break;\n    case dist <= 512:\n      r = [17, dist - 385, 7];break;\n    case dist <= 768:\n      r = [18, dist - 513, 8];break;\n    case dist <= 1024:\n      r = [19, dist - 769, 8];break;\n    case dist <= 1536:\n      r = [20, dist - 1025, 9];break;\n    case dist <= 2048:\n      r = [21, dist - 1537, 9];break;\n    case dist <= 3072:\n      r = [22, dist - 2049, 10];break;\n    case dist <= 4096:\n      r = [23, dist - 3073, 10];break;\n    case dist <= 6144:\n      r = [24, dist - 4097, 11];break;\n    case dist <= 8192:\n      r = [25, dist - 6145, 11];break;\n    case dist <= 12288:\n      r = [26, dist - 8193, 12];break;\n    case dist <= 16384:\n      r = [27, dist - 12289, 12];break;\n    case dist <= 24576:\n      r = [28, dist - 16385, 13];break;\n    case dist <= 32768:\n      r = [29, dist - 24577, 13];break;\n    default:\n      throw 'invalid distance';\n  }\n\n  return r;\n};\n\n/**\n * マッチ情報を LZ77 符号化配列で返す.\n * なお、ここでは以下の内部仕様で符号化している\n * [ CODE, EXTRA-BIT-LEN, EXTRA, CODE, EXTRA-BIT-LEN, EXTRA ]\n * @return {!Array.<number>} LZ77 符号化 byte array.\n */\nZlib.RawDeflate.Lz77Match.prototype.toLz77Array = function () {\n  /** @type {number} */\n  var length = this.length;\n  /** @type {number} */\n  var dist = this.backwardDistance;\n  /** @type {Array} */\n  var codeArray = [];\n  /** @type {number} */\n  var pos = 0;\n  /** @type {!Array.<number>} */\n  var code;\n\n  // length\n  code = Zlib.RawDeflate.Lz77Match.LengthCodeTable[length];\n  codeArray[pos++] = code & 0xffff;\n  codeArray[pos++] = code >> 16 & 0xff;\n  codeArray[pos++] = code >> 24;\n\n  // distance\n  code = this.getDistanceCode_(dist);\n  codeArray[pos++] = code[0];\n  codeArray[pos++] = code[1];\n  codeArray[pos++] = code[2];\n\n  return codeArray;\n};\n\n/**\n * LZ77 実装\n * @param {!(Array.<number>|Uint8Array)} dataArray LZ77 符号化するバイト配列.\n * @return {!(Array.<number>|Uint16Array)} LZ77 符号化した配列.\n */\nZlib.RawDeflate.prototype.lz77 = function (dataArray) {\n  /** @type {number} input position */\n  var position;\n  /** @type {number} input length */\n  var length;\n  /** @type {number} loop counter */\n  var i;\n  /** @type {number} loop limiter */\n  var il;\n  /** @type {number} chained-hash-table key */\n  var matchKey;\n  /** @type {Object.<number, Array.<number>>} chained-hash-table */\n  var table = {};\n  /** @const @type {number} */\n  var windowSize = Zlib.RawDeflate.WindowSize;\n  /** @type {Array.<number>} match list */\n  var matchList;\n  /** @type {Zlib.RawDeflate.Lz77Match} longest match */\n  var longestMatch;\n  /** @type {Zlib.RawDeflate.Lz77Match} previous longest match */\n  var prevMatch;\n  /** @type {!(Array.<number>|Uint16Array)} lz77 buffer */\n  var lz77buf = USE_TYPEDARRAY ? new Uint16Array(dataArray.length * 2) : [];\n  /** @type {number} lz77 output buffer pointer */\n  var pos = 0;\n  /** @type {number} lz77 skip length */\n  var skipLength = 0;\n  /** @type {!(Array.<number>|Uint32Array)} */\n  var freqsLitLen = new (USE_TYPEDARRAY ? Uint32Array : Array)(286);\n  /** @type {!(Array.<number>|Uint32Array)} */\n  var freqsDist = new (USE_TYPEDARRAY ? Uint32Array : Array)(30);\n  /** @type {number} */\n  var lazy = this.lazy;\n  /** @type {*} temporary variable */\n  var tmp;\n\n  // 初期化\n  if (!USE_TYPEDARRAY) {\n    for (i = 0; i <= 285;) {\n      freqsLitLen[i++] = 0;\n    }\n    for (i = 0; i <= 29;) {\n      freqsDist[i++] = 0;\n    }\n  }\n  freqsLitLen[256] = 1; // EOB の最低出現回数は 1\n\n  /**\n   * マッチデータの書き込み\n   * @param {Zlib.RawDeflate.Lz77Match} match LZ77 Match data.\n   * @param {!number} offset スキップ開始位置(相対指定).\n   * @private\n   */\n  function writeMatch(match, offset) {\n    /** @type {Array.<number>} */\n    var lz77Array = match.toLz77Array();\n    /** @type {number} */\n    var i;\n    /** @type {number} */\n    var il;\n\n    for (i = 0, il = lz77Array.length; i < il; ++i) {\n      lz77buf[pos++] = lz77Array[i];\n    }\n    freqsLitLen[lz77Array[0]]++;\n    freqsDist[lz77Array[3]]++;\n    skipLength = match.length + offset - 1;\n    prevMatch = null;\n  }\n\n  // LZ77 符号化\n  for (position = 0, length = dataArray.length; position < length; ++position) {\n    // ハッシュキーの作成\n    for (matchKey = 0, i = 0, il = Zlib.RawDeflate.Lz77MinLength; i < il; ++i) {\n      if (position + i === length) {\n        break;\n      }\n      matchKey = matchKey << 8 | dataArray[position + i];\n    }\n\n    // テーブルが未定義だったら作成する\n    if (table[matchKey] === void 0) {\n      table[matchKey] = [];\n    }\n    matchList = table[matchKey];\n\n    // skip\n    if (skipLength-- > 0) {\n      matchList.push(position);\n      continue;\n    }\n\n    // マッチテーブルの更新 (最大戻り距離を超えているものを削除する)\n    while (matchList.length > 0 && position - matchList[0] > windowSize) {\n      matchList.shift();\n    }\n\n    // データ末尾でマッチしようがない場合はそのまま流しこむ\n    if (position + Zlib.RawDeflate.Lz77MinLength >= length) {\n      if (prevMatch) {\n        writeMatch(prevMatch, -1);\n      }\n\n      for (i = 0, il = length - position; i < il; ++i) {\n        tmp = dataArray[position + i];\n        lz77buf[pos++] = tmp;\n        ++freqsLitLen[tmp];\n      }\n      break;\n    }\n\n    // マッチ候補から最長のものを探す\n    if (matchList.length > 0) {\n      longestMatch = this.searchLongestMatch_(dataArray, position, matchList);\n\n      if (prevMatch) {\n        // 現在のマッチの方が前回のマッチよりも長い\n        if (prevMatch.length < longestMatch.length) {\n          // write previous literal\n          tmp = dataArray[position - 1];\n          lz77buf[pos++] = tmp;\n          ++freqsLitLen[tmp];\n\n          // write current match\n          writeMatch(longestMatch, 0);\n        } else {\n          // write previous match\n          writeMatch(prevMatch, -1);\n        }\n      } else if (longestMatch.length < lazy) {\n        prevMatch = longestMatch;\n      } else {\n        writeMatch(longestMatch, 0);\n      }\n      // 前回マッチしていて今回マッチがなかったら前回のを採用\n    } else if (prevMatch) {\n      writeMatch(prevMatch, -1);\n    } else {\n      tmp = dataArray[position];\n      lz77buf[pos++] = tmp;\n      ++freqsLitLen[tmp];\n    }\n\n    matchList.push(position); // マッチテーブルに現在の位置を保存\n  }\n\n  // 終端処理\n  lz77buf[pos++] = 256;\n  freqsLitLen[256]++;\n  this.freqsLitLen = freqsLitLen;\n  this.freqsDist = freqsDist;\n\n  return (/** @type {!(Uint16Array|Array.<number>)} */USE_TYPEDARRAY ? lz77buf.subarray(0, pos) : lz77buf\n  );\n};\n\n/**\n * マッチした候補の中から最長一致を探す\n * @param {!Object} data plain data byte array.\n * @param {!number} position plain data byte array position.\n * @param {!Array.<number>} matchList 候補となる位置の配列.\n * @return {!Zlib.RawDeflate.Lz77Match} 最長かつ最短距離のマッチオブジェクト.\n * @private\n */\nZlib.RawDeflate.prototype.searchLongestMatch_ = function (data, position, matchList) {\n  var match,\n      currentMatch,\n      matchMax = 0,\n      matchLength,\n      i,\n      j,\n      l,\n      dl = data.length;\n\n  // 候補を後ろから 1 つずつ絞り込んでゆく\n  permatch: for (i = 0, l = matchList.length; i < l; i++) {\n    match = matchList[l - i - 1];\n    matchLength = Zlib.RawDeflate.Lz77MinLength;\n\n    // 前回までの最長一致を末尾から一致検索する\n    if (matchMax > Zlib.RawDeflate.Lz77MinLength) {\n      for (j = matchMax; j > Zlib.RawDeflate.Lz77MinLength; j--) {\n        if (data[match + j - 1] !== data[position + j - 1]) {\n          continue permatch;\n        }\n      }\n      matchLength = matchMax;\n    }\n\n    // 最長一致探索\n    while (matchLength < Zlib.RawDeflate.Lz77MaxLength && position + matchLength < dl && data[match + matchLength] === data[position + matchLength]) {\n      ++matchLength;\n    }\n\n    // マッチ長が同じ場合は後方を優先\n    if (matchLength > matchMax) {\n      currentMatch = match;\n      matchMax = matchLength;\n    }\n\n    // 最長が確定したら後の処理は省略\n    if (matchLength === Zlib.RawDeflate.Lz77MaxLength) {\n      break;\n    }\n  }\n\n  return new Zlib.RawDeflate.Lz77Match(matchMax, position - currentMatch);\n};\n\n/**\n * Tree-Transmit Symbols の算出\n * reference: PuTTY Deflate implementation\n * @param {number} hlit HLIT.\n * @param {!(Array.<number>|Uint8Array)} litlenLengths リテラルと長さ符号の符号長配列.\n * @param {number} hdist HDIST.\n * @param {!(Array.<number>|Uint8Array)} distLengths 距離符号の符号長配列.\n * @return {{\n *   codes: !(Array.<number>|Uint32Array),\n *   freqs: !(Array.<number>|Uint8Array)\n * }} Tree-Transmit Symbols.\n */\nZlib.RawDeflate.prototype.getTreeSymbols_ = function (hlit, litlenLengths, hdist, distLengths) {\n  var src = new (USE_TYPEDARRAY ? Uint32Array : Array)(hlit + hdist),\n      i,\n      j,\n      runLength,\n      l,\n      result = new (USE_TYPEDARRAY ? Uint32Array : Array)(286 + 30),\n      nResult,\n      rpt,\n      freqs = new (USE_TYPEDARRAY ? Uint8Array : Array)(19);\n\n  j = 0;\n  for (i = 0; i < hlit; i++) {\n    src[j++] = litlenLengths[i];\n  }\n  for (i = 0; i < hdist; i++) {\n    src[j++] = distLengths[i];\n  }\n\n  // 初期化\n  if (!USE_TYPEDARRAY) {\n    for (i = 0, l = freqs.length; i < l; ++i) {\n      freqs[i] = 0;\n    }\n  }\n\n  // 符号化\n  nResult = 0;\n  for (i = 0, l = src.length; i < l; i += j) {\n    // Run Length Encoding\n    for (j = 1; i + j < l && src[i + j] === src[i]; ++j) {}\n\n    runLength = j;\n\n    if (src[i] === 0) {\n      // 0 の繰り返しが 3 回未満ならばそのまま\n      if (runLength < 3) {\n        while (runLength-- > 0) {\n          result[nResult++] = 0;\n          freqs[0]++;\n        }\n      } else {\n        while (runLength > 0) {\n          // 繰り返しは最大 138 までなので切り詰める\n          rpt = runLength < 138 ? runLength : 138;\n\n          if (rpt > runLength - 3 && rpt < runLength) {\n            rpt = runLength - 3;\n          }\n\n          // 3-10 回 -> 17\n          if (rpt <= 10) {\n            result[nResult++] = 17;\n            result[nResult++] = rpt - 3;\n            freqs[17]++;\n            // 11-138 回 -> 18\n          } else {\n            result[nResult++] = 18;\n            result[nResult++] = rpt - 11;\n            freqs[18]++;\n          }\n\n          runLength -= rpt;\n        }\n      }\n    } else {\n      result[nResult++] = src[i];\n      freqs[src[i]]++;\n      runLength--;\n\n      // 繰り返し回数が3回未満ならばランレングス符号は要らない\n      if (runLength < 3) {\n        while (runLength-- > 0) {\n          result[nResult++] = src[i];\n          freqs[src[i]]++;\n        }\n        // 3 回以上ならばランレングス符号化\n      } else {\n        while (runLength > 0) {\n          // runLengthを 3-6 で分割\n          rpt = runLength < 6 ? runLength : 6;\n\n          if (rpt > runLength - 3 && rpt < runLength) {\n            rpt = runLength - 3;\n          }\n\n          result[nResult++] = 16;\n          result[nResult++] = rpt - 3;\n          freqs[16]++;\n\n          runLength -= rpt;\n        }\n      }\n    }\n  }\n\n  return {\n    codes: USE_TYPEDARRAY ? result.subarray(0, nResult) : result.slice(0, nResult),\n    freqs: freqs\n  };\n};\n\n/**\n * ハフマン符号の長さを取得する\n * @param {!(Array.<number>|Uint8Array|Uint32Array)} freqs 出現カウント.\n * @param {number} limit 符号長の制限.\n * @return {!(Array.<number>|Uint8Array)} 符号長配列.\n * @private\n */\nZlib.RawDeflate.prototype.getLengths_ = function (freqs, limit) {\n  /** @type {number} */\n  var nSymbols = freqs.length;\n  /** @type {Zlib.Heap} */\n  var heap = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX);\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var length = new (USE_TYPEDARRAY ? Uint8Array : Array)(nSymbols);\n  /** @type {Array} */\n  var nodes;\n  /** @type {!(Array.<number>|Uint32Array)} */\n  var values;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var codeLength;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n\n  // 配列の初期化\n  if (!USE_TYPEDARRAY) {\n    for (i = 0; i < nSymbols; i++) {\n      length[i] = 0;\n    }\n  }\n\n  // ヒープの構築\n  for (i = 0; i < nSymbols; ++i) {\n    if (freqs[i] > 0) {\n      heap.push(i, freqs[i]);\n    }\n  }\n  nodes = new Array(heap.length / 2);\n  values = new (USE_TYPEDARRAY ? Uint32Array : Array)(heap.length / 2);\n\n  // 非 0 の要素が一つだけだった場合は、そのシンボルに符号長 1 を割り当てて終了\n  if (nodes.length === 1) {\n    length[heap.pop().index] = 1;\n    return length;\n  }\n\n  // Reverse Package Merge Algorithm による Canonical Huffman Code の符号長決定\n  for (i = 0, il = heap.length / 2; i < il; ++i) {\n    nodes[i] = heap.pop();\n    values[i] = nodes[i].value;\n  }\n  codeLength = this.reversePackageMerge_(values, values.length, limit);\n\n  for (i = 0, il = nodes.length; i < il; ++i) {\n    length[nodes[i].index] = codeLength[i];\n  }\n\n  return length;\n};\n\n/**\n * Reverse Package Merge Algorithm.\n * @param {!(Array.<number>|Uint32Array)} freqs sorted probability.\n * @param {number} symbols number of symbols.\n * @param {number} limit code length limit.\n * @return {!(Array.<number>|Uint8Array)} code lengths.\n */\nZlib.RawDeflate.prototype.reversePackageMerge_ = function (freqs, symbols, limit) {\n  /** @type {!(Array.<number>|Uint16Array)} */\n  var minimumCost = new (USE_TYPEDARRAY ? Uint16Array : Array)(limit);\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var flag = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var codeLength = new (USE_TYPEDARRAY ? Uint8Array : Array)(symbols);\n  /** @type {Array} */\n  var value = new Array(limit);\n  /** @type {Array} */\n  var type = new Array(limit);\n  /** @type {Array.<number>} */\n  var currentPosition = new Array(limit);\n  /** @type {number} */\n  var excess = (1 << limit) - symbols;\n  /** @type {number} */\n  var half = 1 << limit - 1;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var j;\n  /** @type {number} */\n  var t;\n  /** @type {number} */\n  var weight;\n  /** @type {number} */\n  var next;\n\n  /**\n   * @param {number} j\n   */\n  function takePackage(j) {\n    /** @type {number} */\n    var x = type[j][currentPosition[j]];\n\n    if (x === symbols) {\n      takePackage(j + 1);\n      takePackage(j + 1);\n    } else {\n      --codeLength[x];\n    }\n\n    ++currentPosition[j];\n  }\n\n  minimumCost[limit - 1] = symbols;\n\n  for (j = 0; j < limit; ++j) {\n    if (excess < half) {\n      flag[j] = 0;\n    } else {\n      flag[j] = 1;\n      excess -= half;\n    }\n    excess <<= 1;\n    minimumCost[limit - 2 - j] = (minimumCost[limit - 1 - j] / 2 | 0) + symbols;\n  }\n  minimumCost[0] = flag[0];\n\n  value[0] = new Array(minimumCost[0]);\n  type[0] = new Array(minimumCost[0]);\n  for (j = 1; j < limit; ++j) {\n    if (minimumCost[j] > 2 * minimumCost[j - 1] + flag[j]) {\n      minimumCost[j] = 2 * minimumCost[j - 1] + flag[j];\n    }\n    value[j] = new Array(minimumCost[j]);\n    type[j] = new Array(minimumCost[j]);\n  }\n\n  for (i = 0; i < symbols; ++i) {\n    codeLength[i] = limit;\n  }\n\n  for (t = 0; t < minimumCost[limit - 1]; ++t) {\n    value[limit - 1][t] = freqs[t];\n    type[limit - 1][t] = t;\n  }\n\n  for (i = 0; i < limit; ++i) {\n    currentPosition[i] = 0;\n  }\n  if (flag[limit - 1] === 1) {\n    --codeLength[0];\n    ++currentPosition[limit - 1];\n  }\n\n  for (j = limit - 2; j >= 0; --j) {\n    i = 0;\n    weight = 0;\n    next = currentPosition[j + 1];\n\n    for (t = 0; t < minimumCost[j]; t++) {\n      weight = value[j + 1][next] + value[j + 1][next + 1];\n\n      if (weight > freqs[i]) {\n        value[j][t] = weight;\n        type[j][t] = symbols;\n        next += 2;\n      } else {\n        value[j][t] = freqs[i];\n        type[j][t] = i;\n        ++i;\n      }\n    }\n\n    currentPosition[j] = 0;\n    if (flag[j] === 1) {\n      takePackage(j);\n    }\n  }\n\n  return codeLength;\n};\n\n/**\n * 符号長配列からハフマン符号を取得する\n * reference: PuTTY Deflate implementation\n * @param {!(Array.<number>|Uint8Array)} lengths 符号長配列.\n * @return {!(Array.<number>|Uint16Array)} ハフマン符号配列.\n * @private\n */\nZlib.RawDeflate.prototype.getCodesFromLengths_ = function (lengths) {\n  var codes = new (USE_TYPEDARRAY ? Uint16Array : Array)(lengths.length),\n      count = [],\n      startCode = [],\n      code = 0,\n      i,\n      il,\n      j,\n      m;\n\n  // Count the codes of each length.\n  for (i = 0, il = lengths.length; i < il; i++) {\n    count[lengths[i]] = (count[lengths[i]] | 0) + 1;\n  }\n\n  // Determine the starting code for each length block.\n  for (i = 1, il = Zlib.RawDeflate.MaxCodeLength; i <= il; i++) {\n    startCode[i] = code;\n    code += count[i] | 0;\n    code <<= 1;\n  }\n\n  // Determine the code for each symbol. Mirrored, of course.\n  for (i = 0, il = lengths.length; i < il; i++) {\n    code = startCode[lengths[i]];\n    startCode[lengths[i]] += 1;\n    codes[i] = 0;\n\n    for (j = 0, m = lengths[i]; j < m; j++) {\n      codes[i] = codes[i] << 1 | code & 1;\n      code >>>= 1;\n    }\n  }\n\n  return codes;\n};\n\n/**\n * @param {!(Array.<number>|Uint8Array)} input input buffer.\n * @param {Object=} opt_params options.\n * @constructor\n */\nZlib.Unzip = function (input, opt_params) {\n  opt_params = opt_params || {};\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.input = USE_TYPEDARRAY && input instanceof Array ? new Uint8Array(input) : input;\n  /** @type {number} */\n  this.ip = 0;\n  /** @type {number} */\n  this.eocdrOffset;\n  /** @type {number} */\n  this.numberOfThisDisk;\n  /** @type {number} */\n  this.startDisk;\n  /** @type {number} */\n  this.totalEntriesThisDisk;\n  /** @type {number} */\n  this.totalEntries;\n  /** @type {number} */\n  this.centralDirectorySize;\n  /** @type {number} */\n  this.centralDirectoryOffset;\n  /** @type {number} */\n  this.commentLength;\n  /** @type {(Array.<number>|Uint8Array)} */\n  this.comment;\n  /** @type {Array.<Zlib.Unzip.FileHeader>} */\n  this.fileHeaderList;\n  /** @type {Object.<string, number>} */\n  this.filenameToIndex;\n  /** @type {boolean} */\n  this.verify = opt_params['verify'] || false;\n  /** @type {(Array.<number>|Uint8Array)} */\n  this.password = opt_params['password'];\n};\n\nZlib.Unzip.CompressionMethod = Zlib.Zip.CompressionMethod;\n\n/**\n * @type {Array.<number>}\n * @const\n */\nZlib.Unzip.FileHeaderSignature = Zlib.Zip.FileHeaderSignature;\n\n/**\n * @type {Array.<number>}\n * @const\n */\nZlib.Unzip.LocalFileHeaderSignature = Zlib.Zip.LocalFileHeaderSignature;\n\n/**\n * @type {Array.<number>}\n * @const\n */\nZlib.Unzip.CentralDirectorySignature = Zlib.Zip.CentralDirectorySignature;\n\n/**\n * @param {!(Array.<number>|Uint8Array)} input input buffer.\n * @param {number} ip input position.\n * @constructor\n */\nZlib.Unzip.FileHeader = function (input, ip) {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.input = input;\n  /** @type {number} */\n  this.offset = ip;\n  /** @type {number} */\n  this.length;\n  /** @type {number} */\n  this.version;\n  /** @type {number} */\n  this.os;\n  /** @type {number} */\n  this.needVersion;\n  /** @type {number} */\n  this.flags;\n  /** @type {number} */\n  this.compression;\n  /** @type {number} */\n  this.time;\n  /** @type {number} */\n  this.date;\n  /** @type {number} */\n  this.crc32;\n  /** @type {number} */\n  this.compressedSize;\n  /** @type {number} */\n  this.plainSize;\n  /** @type {number} */\n  this.fileNameLength;\n  /** @type {number} */\n  this.extraFieldLength;\n  /** @type {number} */\n  this.fileCommentLength;\n  /** @type {number} */\n  this.diskNumberStart;\n  /** @type {number} */\n  this.internalFileAttributes;\n  /** @type {number} */\n  this.externalFileAttributes;\n  /** @type {number} */\n  this.relativeOffset;\n  /** @type {string} */\n  this.filename;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.extraField;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.comment;\n};\n\nZlib.Unzip.FileHeader.prototype.parse = function () {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var input = this.input;\n  /** @type {number} */\n  var ip = this.offset;\n\n  // central file header signature\n  if (input[ip++] !== Zlib.Unzip.FileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[3]) {\n    throw new Error('invalid file header signature');\n  }\n\n  // version made by\n  this.version = input[ip++];\n  this.os = input[ip++];\n\n  // version needed to extract\n  this.needVersion = input[ip++] | input[ip++] << 8;\n\n  // general purpose bit flag\n  this.flags = input[ip++] | input[ip++] << 8;\n\n  // compression method\n  this.compression = input[ip++] | input[ip++] << 8;\n\n  // last mod file time\n  this.time = input[ip++] | input[ip++] << 8;\n\n  //last mod file date\n  this.date = input[ip++] | input[ip++] << 8;\n\n  // crc-32\n  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // compressed size\n  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // uncompressed size\n  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // file name length\n  this.fileNameLength = input[ip++] | input[ip++] << 8;\n\n  // extra field length\n  this.extraFieldLength = input[ip++] | input[ip++] << 8;\n\n  // file comment length\n  this.fileCommentLength = input[ip++] | input[ip++] << 8;\n\n  // disk number start\n  this.diskNumberStart = input[ip++] | input[ip++] << 8;\n\n  // internal file attributes\n  this.internalFileAttributes = input[ip++] | input[ip++] << 8;\n\n  // external file attributes\n  this.externalFileAttributes = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24;\n\n  // relative offset of local header\n  this.relativeOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // file name\n  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? input.subarray(ip, ip += this.fileNameLength) : input.slice(ip, ip += this.fileNameLength));\n\n  // extra field\n  this.extraField = USE_TYPEDARRAY ? input.subarray(ip, ip += this.extraFieldLength) : input.slice(ip, ip += this.extraFieldLength);\n\n  // file comment\n  this.comment = USE_TYPEDARRAY ? input.subarray(ip, ip + this.fileCommentLength) : input.slice(ip, ip + this.fileCommentLength);\n\n  this.length = ip - this.offset;\n};\n\n/**\n * @param {!(Array.<number>|Uint8Array)} input input buffer.\n * @param {number} ip input position.\n * @constructor\n */\nZlib.Unzip.LocalFileHeader = function (input, ip) {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.input = input;\n  /** @type {number} */\n  this.offset = ip;\n  /** @type {number} */\n  this.length;\n  /** @type {number} */\n  this.needVersion;\n  /** @type {number} */\n  this.flags;\n  /** @type {number} */\n  this.compression;\n  /** @type {number} */\n  this.time;\n  /** @type {number} */\n  this.date;\n  /** @type {number} */\n  this.crc32;\n  /** @type {number} */\n  this.compressedSize;\n  /** @type {number} */\n  this.plainSize;\n  /** @type {number} */\n  this.fileNameLength;\n  /** @type {number} */\n  this.extraFieldLength;\n  /** @type {string} */\n  this.filename;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  this.extraField;\n};\n\nZlib.Unzip.LocalFileHeader.Flags = Zlib.Zip.Flags;\n\nZlib.Unzip.LocalFileHeader.prototype.parse = function () {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var input = this.input;\n  /** @type {number} */\n  var ip = this.offset;\n\n  // local file header signature\n  if (input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[3]) {\n    throw new Error('invalid local file header signature');\n  }\n\n  // version needed to extract\n  this.needVersion = input[ip++] | input[ip++] << 8;\n\n  // general purpose bit flag\n  this.flags = input[ip++] | input[ip++] << 8;\n\n  // compression method\n  this.compression = input[ip++] | input[ip++] << 8;\n\n  // last mod file time\n  this.time = input[ip++] | input[ip++] << 8;\n\n  //last mod file date\n  this.date = input[ip++] | input[ip++] << 8;\n\n  // crc-32\n  this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // compressed size\n  this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // uncompressed size\n  this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // file name length\n  this.fileNameLength = input[ip++] | input[ip++] << 8;\n\n  // extra field length\n  this.extraFieldLength = input[ip++] | input[ip++] << 8;\n\n  // file name\n  this.filename = String.fromCharCode.apply(null, USE_TYPEDARRAY ? input.subarray(ip, ip += this.fileNameLength) : input.slice(ip, ip += this.fileNameLength));\n\n  // extra field\n  this.extraField = USE_TYPEDARRAY ? input.subarray(ip, ip += this.extraFieldLength) : input.slice(ip, ip += this.extraFieldLength);\n\n  this.length = ip - this.offset;\n};\n\nZlib.Unzip.prototype.searchEndOfCentralDirectoryRecord = function () {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var input = this.input;\n  /** @type {number} */\n  var ip;\n\n  for (ip = input.length - 12; ip > 0; --ip) {\n    if (input[ip] === Zlib.Unzip.CentralDirectorySignature[0] && input[ip + 1] === Zlib.Unzip.CentralDirectorySignature[1] && input[ip + 2] === Zlib.Unzip.CentralDirectorySignature[2] && input[ip + 3] === Zlib.Unzip.CentralDirectorySignature[3]) {\n      this.eocdrOffset = ip;\n      return;\n    }\n  }\n\n  throw new Error('End of Central Directory Record not found');\n};\n\nZlib.Unzip.prototype.parseEndOfCentralDirectoryRecord = function () {\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var input = this.input;\n  /** @type {number} */\n  var ip;\n\n  if (!this.eocdrOffset) {\n    this.searchEndOfCentralDirectoryRecord();\n  }\n  ip = this.eocdrOffset;\n\n  // signature\n  if (input[ip++] !== Zlib.Unzip.CentralDirectorySignature[0] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[1] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[2] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[3]) {\n    throw new Error('invalid signature');\n  }\n\n  // number of this disk\n  this.numberOfThisDisk = input[ip++] | input[ip++] << 8;\n\n  // number of the disk with the start of the central directory\n  this.startDisk = input[ip++] | input[ip++] << 8;\n\n  // total number of entries in the central directory on this disk\n  this.totalEntriesThisDisk = input[ip++] | input[ip++] << 8;\n\n  // total number of entries in the central directory\n  this.totalEntries = input[ip++] | input[ip++] << 8;\n\n  // size of the central directory\n  this.centralDirectorySize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // offset of start of central directory with respect to the starting disk number\n  this.centralDirectoryOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;\n\n  // .ZIP file comment length\n  this.commentLength = input[ip++] | input[ip++] << 8;\n\n  // .ZIP file comment\n  this.comment = USE_TYPEDARRAY ? input.subarray(ip, ip + this.commentLength) : input.slice(ip, ip + this.commentLength);\n};\n\nZlib.Unzip.prototype.parseFileHeader = function () {\n  /** @type {Array.<Zlib.Unzip.FileHeader>} */\n  var filelist = [];\n  /** @type {Object.<string, number>} */\n  var filetable = {};\n  /** @type {number} */\n  var ip;\n  /** @type {Zlib.Unzip.FileHeader} */\n  var fileHeader;\n  /*: @type {number} */\n  var i;\n  /*: @type {number} */\n  var il;\n\n  if (this.fileHeaderList) {\n    return;\n  }\n\n  if (this.centralDirectoryOffset === void 0) {\n    this.parseEndOfCentralDirectoryRecord();\n  }\n  ip = this.centralDirectoryOffset;\n\n  for (i = 0, il = this.totalEntries; i < il; ++i) {\n    fileHeader = new Zlib.Unzip.FileHeader(this.input, ip);\n    fileHeader.parse();\n    ip += fileHeader.length;\n    filelist[i] = fileHeader;\n    filetable[fileHeader.filename] = i;\n  }\n\n  if (this.centralDirectorySize < ip - this.centralDirectoryOffset) {\n    throw new Error('invalid file header size');\n  }\n\n  this.fileHeaderList = filelist;\n  this.filenameToIndex = filetable;\n};\n\n/**\n * @param {number} index file header index.\n * @param {Object=} opt_params\n * @return {!(Array.<number>|Uint8Array)} file data.\n */\nZlib.Unzip.prototype.getFileData = function (index, opt_params) {\n  opt_params = opt_params || {};\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var input = this.input;\n  /** @type {Array.<Zlib.Unzip.FileHeader>} */\n  var fileHeaderList = this.fileHeaderList;\n  /** @type {Zlib.Unzip.LocalFileHeader} */\n  var localFileHeader;\n  /** @type {number} */\n  var offset;\n  /** @type {number} */\n  var length;\n  /** @type {!(Array.<number>|Uint8Array)} */\n  var buffer;\n  /** @type {number} */\n  var crc32;\n  /** @type {Array.<number>|Uint32Array|Object} */\n  var key;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n\n  if (!fileHeaderList) {\n    this.parseFileHeader();\n  }\n\n  if (fileHeaderList[index] === void 0) {\n    throw new Error('wrong index');\n  }\n\n  offset = fileHeaderList[index].relativeOffset;\n  localFileHeader = new Zlib.Unzip.LocalFileHeader(this.input, offset);\n  localFileHeader.parse();\n  offset += localFileHeader.length;\n  length = localFileHeader.compressedSize;\n\n  // decryption\n  if ((localFileHeader.flags & Zlib.Unzip.LocalFileHeader.Flags.ENCRYPT) !== 0) {\n    if (!(opt_params['password'] || this.password)) {\n      throw new Error('please set password');\n    }\n    key = this.createDecryptionKey(opt_params['password'] || this.password);\n\n    // encryption header\n    for (i = offset, il = offset + 12; i < il; ++i) {\n      this.decode(key, input[i]);\n    }\n    offset += 12;\n    length -= 12;\n\n    // decryption\n    for (i = offset, il = offset + length; i < il; ++i) {\n      input[i] = this.decode(key, input[i]);\n    }\n  }\n\n  switch (localFileHeader.compression) {\n    case Zlib.Unzip.CompressionMethod.STORE:\n      buffer = USE_TYPEDARRAY ? this.input.subarray(offset, offset + length) : this.input.slice(offset, offset + length);\n      break;\n    case Zlib.Unzip.CompressionMethod.DEFLATE:\n      buffer = new Zlib.RawInflate(this.input, {\n        'index': offset,\n        'bufferSize': localFileHeader.plainSize\n      }).decompress();\n      break;\n    default:\n      throw new Error('unknown compression type');\n  }\n\n  if (this.verify) {\n    crc32 = Zlib.CRC32.calc(buffer);\n    if (localFileHeader.crc32 !== crc32) {\n      throw new Error('wrong crc: file=0x' + localFileHeader.crc32.toString(16) + ', data=0x' + crc32.toString(16));\n    }\n  }\n\n  return buffer;\n};\n\n/**\n * @return {Array.<string>}\n */\nZlib.Unzip.prototype.getFilenames = function () {\n  /** @type {Array.<string>} */\n  var filenameList = [];\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n  /** @type {Array.<Zlib.Unzip.FileHeader>} */\n  var fileHeaderList;\n\n  if (!this.fileHeaderList) {\n    this.parseFileHeader();\n  }\n  fileHeaderList = this.fileHeaderList;\n\n  for (i = 0, il = fileHeaderList.length; i < il; ++i) {\n    filenameList[i] = fileHeaderList[i].filename;\n  }\n\n  return filenameList;\n};\n\n/**\n * @param {string} filename extract filename.\n * @param {Object=} opt_params\n * @return {!(Array.<number>|Uint8Array)} decompressed data.\n */\nZlib.Unzip.prototype.decompress = function (filename, opt_params) {\n  /** @type {number} */\n  var index;\n\n  if (!this.filenameToIndex) {\n    this.parseFileHeader();\n  }\n  index = this.filenameToIndex[filename];\n\n  if (index === void 0) {\n    throw new Error(filename + ' not found');\n  }\n\n  return this.getFileData(index, opt_params);\n};\n\n/**\n * @param {(Array.<number>|Uint8Array)} password\n */\nZlib.Unzip.prototype.setPassword = function (password) {\n  this.password = password;\n};\n\n/**\n * @param {(Array.<number>|Uint32Array|Object)} key\n * @param {number} n\n * @return {number}\n */\nZlib.Unzip.prototype.decode = function (key, n) {\n  n ^= this.getByte( /** @type {(Array.<number>|Uint32Array)} */key);\n  this.updateKeys( /** @type {(Array.<number>|Uint32Array)} */key, n);\n\n  return n;\n};\n\n// common method\nZlib.Unzip.prototype.updateKeys = Zlib.Zip.prototype.updateKeys;\nZlib.Unzip.prototype.createDecryptionKey = Zlib.Zip.prototype.createEncryptionKey;\nZlib.Unzip.prototype.getByte = Zlib.Zip.prototype.getByte;\n\n/**\n * @fileoverview 雑多な関数群をまとめたモジュール実装.\n */\n\n/**\n * Byte String から Byte Array に変換.\n * @param {!string} str byte string.\n * @return {!Array.<number>} byte array.\n */\nZlib.Util.stringToByteArray = function (str) {\n  /** @type {!Array.<(string|number)>} */\n  var tmp = str.split('');\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var il;\n\n  for (i = 0, il = tmp.length; i < il; i++) {\n    tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;\n  }\n\n  return tmp;\n};\n\n/**\n * @fileoverview Adler32 checksum 実装.\n */\n\n/**\n * Adler32 ハッシュ値の作成\n * @param {!(Array|Uint8Array|string)} array 算出に使用する byte array.\n * @return {number} Adler32 ハッシュ値.\n */\nZlib.Adler32 = function (array) {\n  if (typeof array === 'string') {\n    array = Zlib.Util.stringToByteArray(array);\n  }\n  return Zlib.Adler32.update(1, array);\n};\n\n/**\n * Adler32 ハッシュ値の更新\n * @param {number} adler 現在のハッシュ値.\n * @param {!(Array|Uint8Array)} array 更新に使用する byte array.\n * @return {number} Adler32 ハッシュ値.\n */\nZlib.Adler32.update = function (adler, array) {\n  /** @type {number} */\n  var s1 = adler & 0xffff;\n  /** @type {number} */\n  var s2 = adler >>> 16 & 0xffff;\n  /** @type {number} array length */\n  var len = array.length;\n  /** @type {number} loop length (don't overflow) */\n  var tlen;\n  /** @type {number} array index */\n  var i = 0;\n\n  while (len > 0) {\n    tlen = len > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : len;\n    len -= tlen;\n    do {\n      s1 += array[i++];\n      s2 += s1;\n    } while (--tlen);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s2 << 16 | s1) >>> 0;\n};\n\n/**\n * Adler32 最適化パラメータ\n * 現状では 1024 程度が最適.\n * @see http://jsperf.com/adler-32-simple-vs-optimized/3\n * @define {number}\n */\nZlib.Adler32.OptimizationParameter = 1024;\n\n/**\n * ビットストリーム\n * @constructor\n * @param {!(Array|Uint8Array)=} buffer output buffer.\n * @param {number=} bufferPosition start buffer pointer.\n */\nZlib.BitStream = function (buffer, bufferPosition) {\n  /** @type {number} buffer index. */\n  this.index = typeof bufferPosition === 'number' ? bufferPosition : 0;\n  /** @type {number} bit index. */\n  this.bitindex = 0;\n  /** @type {!(Array|Uint8Array)} bit-stream output buffer. */\n  this.buffer = buffer instanceof (USE_TYPEDARRAY ? Uint8Array : Array) ? buffer : new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.BitStream.DefaultBlockSize);\n\n  // 入力された index が足りなかったら拡張するが、倍にしてもダメなら不正とする\n  if (this.buffer.length * 2 <= this.index) {\n    throw new Error(\"invalid index\");\n  } else if (this.buffer.length <= this.index) {\n    this.expandBuffer();\n  }\n};\n\n/**\n * デフォルトブロックサイズ.\n * @const\n * @type {number}\n */\nZlib.BitStream.DefaultBlockSize = 0x8000;\n\n/**\n * expand buffer.\n * @return {!(Array|Uint8Array)} new buffer.\n */\nZlib.BitStream.prototype.expandBuffer = function () {\n  /** @type {!(Array|Uint8Array)} old buffer. */\n  var oldbuf = this.buffer;\n  /** @type {number} loop counter. */\n  var i;\n  /** @type {number} loop limiter. */\n  var il = oldbuf.length;\n  /** @type {!(Array|Uint8Array)} new buffer. */\n  var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(il << 1);\n\n  // copy buffer\n  if (USE_TYPEDARRAY) {\n    buffer.set(oldbuf);\n  } else {\n    // XXX: loop unrolling\n    for (i = 0; i < il; ++i) {\n      buffer[i] = oldbuf[i];\n    }\n  }\n\n  return this.buffer = buffer;\n};\n\n/**\n * 数値をビットで指定した数だけ書き込む.\n * @param {number} number 書き込む数値.\n * @param {number} n 書き込むビット数.\n * @param {boolean=} reverse 逆順に書き込むならば true.\n */\nZlib.BitStream.prototype.writeBits = function (number, n, reverse) {\n  var buffer = this.buffer;\n  var index = this.index;\n  var bitindex = this.bitindex;\n\n  /** @type {number} current octet. */\n  var current = buffer[index];\n  /** @type {number} loop counter. */\n  var i;\n\n  /**\n   * 32-bit 整数のビット順を逆にする\n   * @param {number} n 32-bit integer.\n   * @return {number} reversed 32-bit integer.\n   * @private\n   */\n  function rev32_(n) {\n    return Zlib.BitStream.ReverseTable[n & 0xFF] << 24 | Zlib.BitStream.ReverseTable[n >>> 8 & 0xFF] << 16 | Zlib.BitStream.ReverseTable[n >>> 16 & 0xFF] << 8 | Zlib.BitStream.ReverseTable[n >>> 24 & 0xFF];\n  }\n\n  if (reverse && n > 1) {\n    number = n > 8 ? rev32_(number) >> 32 - n : Zlib.BitStream.ReverseTable[number] >> 8 - n;\n  }\n\n  // Byte 境界を超えないとき\n  if (n + bitindex < 8) {\n    current = current << n | number;\n    bitindex += n;\n    // Byte 境界を超えるとき\n  } else {\n    for (i = 0; i < n; ++i) {\n      current = current << 1 | number >> n - i - 1 & 1;\n\n      // next byte\n      if (++bitindex === 8) {\n        bitindex = 0;\n        buffer[index++] = Zlib.BitStream.ReverseTable[current];\n        current = 0;\n\n        // expand\n        if (index === buffer.length) {\n          buffer = this.expandBuffer();\n        }\n      }\n    }\n  }\n  buffer[index] = current;\n\n  this.buffer = buffer;\n  this.bitindex = bitindex;\n  this.index = index;\n};\n\n/**\n * ストリームの終端処理を行う\n * @return {!(Array|Uint8Array)} 終端処理後のバッファを byte array で返す.\n */\nZlib.BitStream.prototype.finish = function () {\n  var buffer = this.buffer;\n  var index = this.index;\n\n  /** @type {!(Array|Uint8Array)} output buffer. */\n  var output;\n\n  // bitindex が 0 の時は余分に index が進んでいる状態\n  if (this.bitindex > 0) {\n    buffer[index] <<= 8 - this.bitindex;\n    buffer[index] = Zlib.BitStream.ReverseTable[buffer[index]];\n    index++;\n  }\n\n  // array truncation\n  if (USE_TYPEDARRAY) {\n    output = buffer.subarray(0, index);\n  } else {\n    buffer.length = index;\n    output = buffer;\n  }\n\n  return output;\n};\n\n/**\n * 0-255 のビット順を反転したテーブル\n * @const\n * @type {!(Uint8Array|Array.<number>)}\n */\nZlib.BitStream.ReverseTable = function (table) {\n  return table;\n}(function () {\n  /** @type {!(Array|Uint8Array)} reverse table. */\n  var table = new (USE_TYPEDARRAY ? Uint8Array : Array)(256);\n  /** @type {number} loop counter. */\n  var i;\n\n  // generate\n  for (i = 0; i < 256; ++i) {\n    table[i] = function (n) {\n      var r = n;\n      var s = 7;\n\n      for (n >>>= 1; n; n >>>= 1) {\n        r <<= 1;\n        r |= n & 1;\n        --s;\n      }\n\n      return (r << s & 0xff) >>> 0;\n    }(i);\n  }\n\n  return table;\n}());\n\n/**\n * @fileoverview CRC32 実装.\n */\n\n/** @define {boolean} */\nvar ZLIB_CRC32_COMPACT = false;\n\n/**\n * CRC32 ハッシュ値を取得\n * @param {!(Array.<number>|Uint8Array)} data data byte array.\n * @param {number=} pos data position.\n * @param {number=} length data length.\n * @return {number} CRC32.\n */\nZlib.CRC32.calc = function (data, pos, length) {\n  return Zlib.CRC32.update(data, 0, pos, length);\n};\n\n/**\n * CRC32ハッシュ値を更新\n * @param {!(Array.<number>|Uint8Array)} data data byte array.\n * @param {number} crc CRC32.\n * @param {number=} pos data position.\n * @param {number=} length data length.\n * @return {number} CRC32.\n */\nZlib.CRC32.update = function (data, crc, pos, length) {\n  var table = Zlib.CRC32.Table;\n  var i = typeof pos === 'number' ? pos : pos = 0;\n  var il = typeof length === 'number' ? length : data.length;\n\n  crc ^= 0xffffffff;\n\n  // loop unrolling for performance\n  for (i = il & 7; i--; ++pos) {\n    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];\n  }\n  for (i = il >> 3; i--; pos += 8) {\n    crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 1]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 2]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 3]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 4]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 5]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 6]) & 0xff];\n    crc = crc >>> 8 ^ table[(crc ^ data[pos + 7]) & 0xff];\n  }\n\n  return (crc ^ 0xffffffff) >>> 0;\n};\n\n/**\n * @param {number} num\n * @param {number} crc\n * @returns {number}\n */\nZlib.CRC32.single = function (num, crc) {\n  return (Zlib.CRC32.Table[(num ^ crc) & 0xff] ^ num >>> 8) >>> 0;\n};\n\n/**\n * @type {Array.<number>}\n * @const\n * @private\n */\nZlib.CRC32.Table_ = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];\n\n/**\n * @type {!(Array.<number>|Uint32Array)} CRC-32 Table.\n * @const\n */\nZlib.CRC32.Table = ZLIB_CRC32_COMPACT ? function () {\n  /** @type {!(Array.<number>|Uint32Array)} */\n  var table = new (USE_TYPEDARRAY ? Uint32Array : Array)(256);\n  /** @type {number} */\n  var c;\n  /** @type {number} */\n  var i;\n  /** @type {number} */\n  var j;\n\n  for (i = 0; i < 256; ++i) {\n    c = i;\n    for (j = 0; j < 8; ++j) {\n      c = c & 1 ? 0xedB88320 ^ c >>> 1 : c >>> 1;\n    }\n    table[i] = c >>> 0;\n  }\n\n  return table;\n}() : USE_TYPEDARRAY ? new Uint32Array(Zlib.CRC32.Table_) : Zlib.CRC32.Table_;\n\n/**\n * @fileoverview Deflate (RFC1951) 実装.\n * Deflateアルゴリズム本体は Zlib.RawDeflate で実装されている.\n */\n\n/**\n * Zlib Deflate\n * @constructor\n * @param {!(Array|Uint8Array)} input 符号化する対象の byte array.\n * @param {Object=} opt_params option parameters.\n */\nZlib.Deflate = function (input, opt_params) {\n  /** @type {!(Array|Uint8Array)} */\n  this.input = input;\n  /** @type {!(Array|Uint8Array)} */\n  this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(Zlib.Deflate.DefaultBufferSize);\n  /** @type {Zlib.Deflate.CompressionType} */\n  this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;\n  /** @type {Zlib.RawDeflate} */\n  this.rawDeflate;\n  /** @type {Object} */\n  var rawDeflateOption = {};\n  /** @type {string} */\n  var prop;\n\n  // option parameters\n  if (opt_params || !(opt_params = {})) {\n    if (typeof opt_params['compressionType'] === 'number') {\n      this.compressionType = opt_params['compressionType'];\n    }\n  }\n\n  // copy options\n  for (prop in opt_params) {\n    rawDeflateOption[prop] = opt_params[prop];\n  }\n\n  // set raw-deflate output buffer\n  rawDeflateOption['outputBuffer'] = this.output;\n\n  this.rawDeflate = new Zlib.RawDeflate(this.input, rawDeflateOption);\n};\n\n/**\n * @const\n * @type {number} デフォルトバッファサイズ.\n */\nZlib.Deflate.DefaultBufferSize = 0x8000;\n\n/**\n * @enum {number}\n */\nZlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;\n\n/**\n * 直接圧縮に掛ける.\n * @param {!(Array|Uint8Array)} input target buffer.\n * @param {Object=} opt_params option parameters.\n * @return {!(Array|Uint8Array)} compressed data byte array.\n */\nZlib.Deflate.compress = function (input, opt_params) {\n  return new Zlib.Deflate(input, opt_params).compress();\n};\n\n/**\n * Deflate Compression.\n * @return {!(Array|Uint8Array)} compressed data byte array.\n */\nZlib.Deflate.prototype.compress = function () {\n  /** @type {Zlib.CompressionMethod} */\n  var cm;\n  /** @type {number} */\n  var cinfo;\n  /** @type {number} */\n  var cmf;\n  /** @type {number} */\n  var flg;\n  /** @type {number} */\n  var fcheck;\n  /** @type {number} */\n  var fdict;\n  /** @type {number} */\n  var flevel;\n  /** @type {number} */\n  var clevel;\n  /** @type {number} */\n  var adler;\n  /** @type {boolean} */\n  var error = false;\n  /** @type {!(Array|Uint8Array)} */\n  var output;\n  /** @type {number} */\n  var pos = 0;\n\n  output = this.output;\n\n  // Compression Method and Flags\n  cm = Zlib.CompressionMethod.DEFLATE;\n  switch (cm) {\n    case Zlib.CompressionMethod.DEFLATE:\n      cinfo = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;\n      break;\n    default:\n      throw new Error('invalid compression method');\n  }\n  cmf = cinfo << 4 | cm;\n  output[pos++] = cmf;\n\n  // Flags\n  fdict = 0;\n  switch (cm) {\n    case Zlib.CompressionMethod.DEFLATE:\n      switch (this.compressionType) {\n        case Zlib.Deflate.CompressionType.NONE:\n          flevel = 0;break;\n        case Zlib.Deflate.CompressionType.FIXED:\n          flevel = 1;break;\n        case Zlib.Deflate.CompressionType.DYNAMIC:\n          flevel = 2;break;\n        default:\n          throw new Error('unsupported compression type');\n      }\n      break;\n    default:\n      throw new Error('invalid compression method');\n  }\n  flg = flevel << 6 | fdict << 5;\n  fcheck = 31 - (cmf * 256 + flg) % 31;\n  flg |= fcheck;\n  output[pos++] = flg;\n\n  // Adler-32 checksum\n  adler = Zlib.Adler32(this.input);\n\n  this.rawDeflate.op = pos;\n  output = this.rawDeflate.compress();\n  pos = output.length;\n\n  if (USE_TYPEDARRAY) {\n    // subarray 分を元にもどす\n    output = new Uint8Array(output.buffer);\n    // expand buffer\n    if (output.length <= pos + 4) {\n      this.output = new Uint8Array(output.length + 4);\n      this.output.set(output);\n      output = this.output;\n    }\n    output = output.subarray(0, pos + 4);\n  }\n\n  // adler32\n  output[pos++] = adler >> 24 & 0xff;\n  output[pos++] = adler >> 16 & 0xff;\n  output[pos++] = adler >> 8 & 0xff;\n  output[pos++] = adler & 0xff;\n\n  return output;\n};\n\nexports.Zlib = Zlib;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../MLVPanel/src/vendor/zlib_and_gzip.js\n");

/***/ }),

/***/ "./lanceotron/src/capture_compare_track.js":
/*!*************************************************!*\
  !*** ./lanceotron/src/capture_compare_track.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.CaptureCompareTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _feature = __webpack_require__(/*! ../../../MLVPanel/src/feature.js */ \"../MLVPanel/src/feature.js\");\n\nvar _tracks = __webpack_require__(/*! ../../../MLVPanel/src/tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction getDecodeFunction(sample_size) {\n\tvar max = sample_size * 2;\n\treturn function (tokens, feature) {\n\t\tfeature.data = [];\n\t\tfor (var i = 0; i < max; i += 2) {\n\t\t\tfeature.data.push([parseFloat(tokens[i]), parseFloat(tokens[i + 1])]);\n\t\t}\n\t};\n}\n\nvar CaptureCompareTrack = function (_MLVBedTrack) {\n\t_inherits(CaptureCompareTrack, _MLVBedTrack);\n\n\tfunction CaptureCompareTrack(config) {\n\t\t_classCallCheck(this, CaptureCompareTrack);\n\n\t\tconfig.format = \"feature\";\n\t\tif (!config.colors) {\n\t\t\tconfig.colors = [\"#FF0000\", \"#0000FF\", \"#008000\"];\n\t\t}\n\t\treturn _possibleConstructorReturn(this, (CaptureCompareTrack.__proto__ || Object.getPrototypeOf(CaptureCompareTrack)).call(this, config));\n\t}\n\n\t_createClass(CaptureCompareTrack, [{\n\t\tkey: \"_setFeatureSource\",\n\t\tvalue: function _setFeatureSource() {\n\t\t\tif (this.config.url && this.config.url.endsWith(\".gz\")) {\n\t\t\t\tthis.feature_source = new _feature.TabixBedFeatureSource(this.config, getDecodeFunction(this.config.conditions.length));\n\t\t\t} else {\n\t\t\t\tthis.feature_source = new _feature.BigBedFeatureSource(this.config, getDecodeFunction(this.config.conditions.length));\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"addExtraControls\",\n\t\tvalue: function addExtraControls(dialog) {\n\t\t\tvar self = this;\n\t\t\tdialog.div.empty();\n\t\t\tvar max = this.config.initial_y_max * 4;\n\t\t\tvar min = this.config.initial_y_max / 6;\n\t\t\tvar val = this.config.y_max ? this.config.y_max : this.config.initial_y_max;\n\t\t\tvar feature_div = $(\"<div>\");\n\t\t\tdialog.fixed_scale_check = $(\"<input>\").attr({ type: \"checkbox\" }).prop(\"checked\", !dialog.config.dynamic_scale).click(function (e) {\n\t\t\t\tvar dyn = true;\n\t\t\t\tif ($(this).prop(\"checked\")) {\n\t\t\t\t\tdyn = false;\n\t\t\t\t}\n\t\t\t\tdialog.config.dynamic_scale = dyn;\n\t\t\t\tif (dialog.panel) {\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"dynamic_scale\", dyn);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t\tdialog.scale_slider.slider(dyn ? \"disable\" : \"enable\");\n\t\t\t\tdialog.max_y_input.attr(\"disabled\", dyn);\n\t\t\t});\n\n\t\t\tfeature_div.append(dialog.fixed_scale_check).append(\"<label>Fixed Scale</label><br>\");\n\t\t\tdialog.scale_slider = $(\"<div>\").slider({\n\t\t\t\tmax: max,\n\t\t\t\tmin: min,\n\t\t\t\tstep: (max - min) / 100,\n\t\t\t\tvalue: val,\n\t\t\t\tslide: function slide(e, ui) {\n\t\t\t\t\tdialog.config.y_max = ui.value;\n\t\t\t\t\tif (dialog.panel) {\n\t\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"y_max\", ui.value);\n\t\t\t\t\t\tdialog.panel.update();\n\t\t\t\t\t}\n\t\t\t\t\tdialog.max_y_input.val(ui.value);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdialog.max_y_input = $(\"<input>\").on(\"blur keypress\", function (e) {\n\t\t\t\tif (e.type === \"keypress\" && !(e.which === 13)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar y = dialog.max_y_input.val();\n\t\t\t\ty = parseFloat(y);\n\t\t\t\tvar s = dialog.scale_slider;\n\t\t\t\tvar max = s.slider(\"option\", \"max\");\n\t\t\t\tvar min = s.slider(\"option\", \"min\");\n\t\t\t\tif (y > max) {\n\t\t\t\t\ts.slider(\"option\", \"max\", y);\n\t\t\t\t} else if (y < min) {\n\t\t\t\t\ts.slider(\"option\", \"min\", y);\n\t\t\t\t}\n\n\t\t\t\ts.slider(\"option\", \"step\", (max - min) / 100);\n\t\t\t\ts.slider(\"option\", \"value\", y);\n\t\t\t\tif (dialog.panel) {\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"y_max\", y);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t}).width(50).val(val);\n\n\t\t\tvar height_div = $(\"<div class='t-d-div'></div>\");\n\n\t\t\theight_div.append(\"<label>Track Height:</label>\").appendTo(dialog.div);\n\n\t\t\tvar height_slider = $(\"<div>\").slider({\n\t\t\t\tmin: 10,\n\t\t\t\tmax: 500,\n\t\t\t\tvalue: dialog.config.height,\n\t\t\t\tslide: function slide(event, ui) {\n\t\t\t\t\tdialog.config.height = ui.value;\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"height\", dialog.config.height);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t}).css({ \"margin\": \"5px 3px\" });\n\n\t\t\theight_slider.appendTo(height_div);\n\n\t\t\tdialog.div.append(\"<hr>\");\n\t\t\tfeature_div.append(dialog.scale_slider.css(\"margin-bottom\", \"4px\")).append(\"<span>Max Y:</span>\").append(dialog.max_y_input).appendTo(dialog.div);\n\t\t\tdialog.div.append(\"<hr>\");\n\t\t\tvar sd_name = \"sd-ra-name-\" + dialog.id;\n\t\t\tvar sd_div = $(\"<div>\").append(\"<label>Display SD as:</label><br>\");\n\t\t\tvar is_box = false;\n\t\t\tif (!this.config.display_sd || this.config.display_sd == \"box\") {\n\t\t\t\tis_box = true;\n\t\t\t}\n\t\t\tsd_div.append($(\"<input>\").attr({ type: \"radio\", value: \"box\", checked: is_box, name: sd_name }));\n\t\t\tsd_div.append($(\"<span>\").text(\"Box\"));\n\t\t\tsd_div.append($(\"<input>\").attr({ type: \"radio\", value: \"bar\", checked: this.config.display_sd === \"bar\", name: sd_name }));\n\t\t\tsd_div.append($(\"<span>\").text(\"Bar\"));\n\t\t\tsd_div.appendTo(dialog.div);\n\n\t\t\t$(\"input[name='\" + sd_name + \"']\").click(function (e) {\n\t\t\t\tvar display_sd = $(\"input[name='\" + sd_name + \"']:checked\").val();\n\t\t\t\tdialog.config.display_sd = display_sd;\n\t\t\t\tif (dialog.panel) {\n\t\t\t\t\tdialog.panel.setTrackAttribute(self.config.track_id, \"display_sd\", display_sd);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t});\n\t\t\tdialog.div.append(\"<hr>\");\n\t\t\tvar color_div = $(\"<div class='t-d-div'></div>\").appendTo(dialog.div);\n\t\t\tcolor_div.append(\"<label>Sample Colors</label><br>\");\n\n\t\t\tfor (var x = 0; x < this.config.conditions.length; x++) {\n\t\t\t\tvar d = $(\"<div>\");\n\t\t\t\tvar color_input = $(\"<input>\").attr({ type: \"color\" }).data(\"index\", x).val(this.config.colors[x]).height(20).width(20).css({ \"margin-right\": \"3px\", \"padding\": \"0px\" }).change(function (e) {\n\t\t\t\t\tvar color = $(this).val();\n\t\t\t\t\tdialog.config.colors[$(this).data(\"index\")] = color;\n\t\t\t\t\tif (dialog.panel) {\n\t\t\t\t\t\tdialog.panel.setTrackAttribute(self.config.track_id, \"colors\", dialog.config.colors);\n\t\t\t\t\t\tdialog.panel.update();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\td.append(color_input).append($(\"<span>\").text(this.config.conditions[x])).appendTo(color_div);\n\t\t\t}\n\n\t\t\tif (dialog.config.dynamic_scale) {\n\t\t\t\tdialog.scale_slider.slider(\"disable\");\n\t\t\t\tdialog.max_y_input.slider(\"disable\");\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"calculateMaxY\",\n\t\tvalue: function calculateMaxY(options) {\n\t\t\tvar count = 0;\n\t\t\tvar y_max = 0;\n\t\t\tvar s_s = this.config.conditions.length;\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = options.features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar feature = _step.value;\n\n\t\t\t\t\tvar len = feature.end - feature.start;\n\t\t\t\t\tvar x_pos = (feature.start + len / 2 - options.bpStart) / options.bpPerPixel;\n\t\t\t\t\tif (x_pos > count) {\n\t\t\t\t\t\tcount = Math.floor(x_pos) + 1;\n\t\t\t\t\t\tfor (var i = 0; i < s_s; i++) {\n\t\t\t\t\t\t\tvar y = feature.data[i][0] + feature.data[i][1];\n\t\t\t\t\t\t\tif (y > y_max) {\n\t\t\t\t\t\t\t\ty_max = y;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn y_max;\n\t\t}\n\t}, {\n\t\tkey: \"drawFeatures\",\n\t\tvalue: function drawFeatures(options) {\n\t\t\tvar features = options.features;\n\t\t\tvar sparse = false;\n\t\t\tvar interval = 1;\n\t\t\t/*if (features.length> 1.5*options.pixelWidth){\r\n   \tinterval += Math.floor(features.length/options.pixelWidth)\r\n   }*/\n\n\t\t\tvar top = this.config.discrete ? options.top : 0;\n\t\t\tvar bot = this.config.discrete ? parseInt(top) + parseInt(this.config.height) : options.pixelHeight;\n\t\t\tif (this.config.display_difference) {}\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bot;\n\t\t\tvar ctx = options.context;\n\t\t\tvar prev_x = null;\n\t\t\tvar prev_y = [];\n\t\t\tvar colors = this.config.colors;\n\t\t\tvar y_max = this.config.y_max ? this.config.y_max : this.config.initial_y_max;\n\t\t\tif (this.config.dynamic_scale) {\n\t\t\t\ty_max = this.calculateMaxY(options);\n\t\t\t}\n\t\t\tvar wig_height = this.config.discrete ? this.config.height : options.pixelHeight;\n\t\t\tvar s_s = this.config.conditions.length;\n\t\t\tvar display_bar = false;\n\t\t\tvar display_box = true;\n\t\t\tif (this.config.display_sd === \"bar\") {\n\t\t\t\tdisplay_box = false;\n\t\t\t\tif (options.bpPerPixel < 100) {\n\t\t\t\t\tdisplay_bar = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar count = 0;\n\t\t\tvar drawn = 0;\n\n\t\t\tfor (var x = 0; x < features.length; x += interval) {\n\n\t\t\t\tvar feature = features[x];\n\n\t\t\t\tvar len = feature.end - feature.start;\n\t\t\t\tvar x_pos = (feature.start + len / 2 - options.bpStart) / options.bpPerPixel;\n\t\t\t\tif (x_pos > count) {\n\t\t\t\t\tcount = Math.floor(x_pos) + 1;\n\t\t\t\t\tdrawn++;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlen = len / options.bpPerPixel;\n\t\t\t\tif (len < 1) {\n\t\t\t\t\tlen = 1;\n\t\t\t\t}\n\t\t\t\tvar t_y = [];\n\t\t\t\tfor (var i = 0; i < s_s; i++) {\n\t\t\t\t\tvar y_pos = wig_height - feature.data[i][0] / y_max * wig_height + top;\n\t\t\t\t\ty_pos = y_pos;\n\t\t\t\t\tif (this.config.asline && prev_x != null) {\n\t\t\t\t\t\tctx.strokeStyle = colors[i];\n\t\t\t\t\t\tctx.fillStyle = colors[i];\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(prev_x, prev_y[i]);\n\t\t\t\t\t\tctx.lineWidth = 1;\n\t\t\t\t\t\tctx.lineTo(x_pos, y_pos);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.fillStyle = colors[i];\n\t\t\t\t\t\tctx.strokeStyle = colors[i];\n\t\t\t\t\t\tctx.globalAlpha = 0.4;\n\t\t\t\t\t\tctx.fillRect(x_pos - len / 2, y_pos, len, this.bottom - y_pos);\n\n\t\t\t\t\t\tctx.globalAlpha = 1.0;\n\t\t\t\t\t}\n\t\t\t\t\tvar sd = feature.data[i][1] / y_max * wig_height;\n\n\t\t\t\t\tif (display_box) {\n\t\t\t\t\t\tctx.globalAlpha = 0.4;\n\t\t\t\t\t\tctx.fillRect(x_pos - len / 2, y_pos - sd, len, 2 * sd);\n\t\t\t\t\t\tctx.globalAlpha = 1.0;\n\t\t\t\t\t} else if (display_bar) {\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(x_pos - 4, y_pos - sd);\n\t\t\t\t\t\tctx.lineTo(x_pos + 4, y_pos - sd);\n\t\t\t\t\t\tctx.moveTo(x_pos, y_pos - sd);\n\t\t\t\t\t\tctx.lineTo(x_pos, y_pos + sd);\n\t\t\t\t\t\tctx.moveTo(x_pos - 4, y_pos + sd);\n\t\t\t\t\t\tctx.lineTo(x_pos + 4, y_pos + sd);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t\tt_y.push(y_pos);\n\t\t\t\t}\n\t\t\t\tprev_y = t_y;\n\t\t\t\tprev_x = x_pos;\n\t\t\t}\n\n\t\t\tif (this.config.exclusion_zone) {\n\t\t\t\tvar bpStart = options.bpStart;\n\t\t\t\tvar bpEnd = options.bpStart + options.bpPerPixel * options.pixelWidth;\n\t\t\t\tvar ex = this.config.exclusion_zone;\n\n\t\t\t\tif (ex[0] > bpStart && ex[0] < bpEnd || ex[1] > bpStart && ex[1] < bpEnd) {\n\t\t\t\t\tvar ex_st = (ex[0] - bpStart) / options.bpPerPixel;\n\t\t\t\t\tex_st = ex_st < 0 ? 0 : ex_st;\n\t\t\t\t\tvar ex_en = (ex[1] - bpStart) / options.bpPerPixel;\n\t\t\t\t\tex_en = ex_en > options.pixelWidth ? options.pixelWidth : ex_en;\n\t\t\t\t\tctx.fillStyle = \"white\";\n\t\t\t\t\tctx.strokeStyle = \"grey\";\n\n\t\t\t\t\tctx.rect(ex_st, this.top + 1, ex_en - ex_st, this.config.height - 1);\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t\tex = this.config.viewpoint;\n\t\t\t\tif (ex) {\n\t\t\t\t\tif (ex[0] > bpStart && ex[0] < bpEnd || ex[1] > bpStart && ex[1] < bpEnd) {\n\t\t\t\t\t\tvar _ex_st = (ex[0] - bpStart) / options.bpPerPixel;\n\t\t\t\t\t\t_ex_st = _ex_st < 0 ? 0 : _ex_st;\n\t\t\t\t\t\tvar _ex_en = (ex[1] - bpStart) / options.bpPerPixel;\n\t\t\t\t\t\t_ex_en = _ex_en > options.pixelWidth ? options.pixelWidth : _ex_en;\n\t\t\t\t\t\tctx.fillStyle = \"grey\";\n\t\t\t\t\t\tctx.fillRect(_ex_st, this.top + 1, _ex_en - _ex_st, this.config.height - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.max_y = y_max;\n\n\t\t\treturn this.config.discrete ? bot : null;\n\t\t}\n\t}, {\n\t\tkey: \"drawScale\",\n\t\tvalue: function drawScale(pixel_height, ctx) {\n\t\t\tvar bot = this.bottom;\n\t\t\tvar top = this.top;\n\t\t\tctx.save();\n\t\t\tctx.rect(0, top, 120, bot - top);\n\t\t\tctx.clip();\n\t\t\tvar max_y = this.max_y;\n\t\t\tvar min_y = 0;\n\t\t\tvar range = max_y - min_y;\n\t\t\tctx.fillStyle = \"black\";\n\t\t\tctx.textAlign = \"left\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(0, top);\n\t\t\tctx.lineTo(0, bot);\n\t\t\tctx.moveTo(0, top);\n\t\t\tctx.lineTo(20, top);\n\t\t\tctx.moveTo(0, bot);\n\t\t\tctx.lineTo(20, bot);\n\t\t\tctx.font = \"12px Arial\";\n\t\t\tctx.stroke();\n\t\t\tctx.textBaseline = \"top\";\n\t\t\tctx.fillText(max_y.toFixed(2), 20, top);\n\t\t\tctx.textBaseline = \"alphabetic\";\n\t\t\tctx.fillText(min_y, 20, bot);\n\t\t\tctx.font = \"14px Arial\";\n\t\t\tvar text = this.config.legend_label ? this.config.legend_label : \"Condition\";\n\t\t\tctx.fillText(text, 10, top + 30);\n\t\t\tctx.font = \"12px Arial\";\n\t\t\tvar colors = this.config.colors;\n\t\t\tfor (var i = 0; i < this.config.conditions.length; i++) {\n\t\t\t\tctx.fillStyle = colors[i];\n\t\t\t\tctx.globalAlpha = 0.4;\n\t\t\t\tctx.fillRect(10, top + 40 + i * 30, 20, 20);\n\t\t\t\tctx.globalAlpha = 1.0;\n\t\t\t\tctx.fillRect(10, top + 49 + i * 30, 20, 2);\n\t\t\t\tctx.fillStyle = \"black\";\n\t\t\t\tctx.fillText(this.config.conditions[i], 31, top + 55 + i * 30);\n\t\t\t}\n\t\t\tctx.restore();\n\t\t}\n\t}]);\n\n\treturn CaptureCompareTrack;\n}(_tracks.MLVBedTrack);\n\n_tracks.MLVTrack.custom_tracks[\"capture_compare\"] = CaptureCompareTrack;\n_tracks.MLVTrack.track_types[\"capture_compare\"] = {\n\t\"class\": CaptureCompareTrack\n};\n\nexports.CaptureCompareTrack = CaptureCompareTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lanceotron/src/capture_compare_track.js\n");

/***/ }),

/***/ "./lanceotron/src/custom_annotation_track.js":
/*!***************************************************!*\
  !*** ./lanceotron/src/custom_annotation_track.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.CustomAnnotationTrack = exports.PeakModelTrack = exports.MLVSmoothWigTrack = undefined;\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _feature = __webpack_require__(/*! ../../../MLVPanel/src/feature.js */ \"../MLVPanel/src/feature.js\");\n\nvar _tracks = __webpack_require__(/*! ../../../MLVPanel/src/tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CustomGeneFeatureSource = function (_FeatureSource) {\n\t_inherits(CustomGeneFeatureSource, _FeatureSource);\n\n\tfunction CustomGeneFeatureSource(config) {\n\t\t_classCallCheck(this, CustomGeneFeatureSource);\n\n\t\tconfig.sourceType = \"custom\";\n\t\tconfig.featureHeight = config.featureHeight ? config.featureHeight : 12;\n\n\t\tvar _this = _possibleConstructorReturn(this, (CustomGeneFeatureSource.__proto__ || Object.getPrototypeOf(CustomGeneFeatureSource)).call(this, config));\n\n\t\t_this.header = true;\n\t\treturn _this;\n\t}\n\n\t_createClass(CustomGeneFeatureSource, [{\n\t\tkey: \"retrieveFeatures\",\n\t\tvalue: function retrieveFeatures(chr, bpStart, bpEnd, force, data) {\n\t\t\tvar self = this;\n\t\t\treturn new Promise(function (fulfill, reject) {\n\t\t\t\tvar url = self.config.url + \"/\" + chr + \"/\" + bpStart + \"/\" + bpEnd;\n\t\t\t\t$.ajax({\n\t\t\t\t\turl: url,\n\t\t\t\t\tdataType: \"json\"\n\t\t\t\t}).done(function (features) {\n\t\t\t\t\tfulfill(features);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn CustomGeneFeatureSource;\n}(_feature.FeatureSource);\n\nvar CustomAnnotationTrack = function (_MLVBedTrack) {\n\t_inherits(CustomAnnotationTrack, _MLVBedTrack);\n\n\tfunction CustomAnnotationTrack(config) {\n\t\t_classCallCheck(this, CustomAnnotationTrack);\n\n\t\tconfig.format = \"feature\";\n\t\treturn _possibleConstructorReturn(this, (CustomAnnotationTrack.__proto__ || Object.getPrototypeOf(CustomAnnotationTrack)).call(this, config));\n\t}\n\n\t_createClass(CustomAnnotationTrack, [{\n\t\tkey: \"_setFeatureSource\",\n\t\tvalue: function _setFeatureSource() {\n\t\t\tthis.feature_source = new CustomGeneFeatureSource(this.config);\n\t\t}\n\t}]);\n\n\treturn CustomAnnotationTrack;\n}(_tracks.MLVBedTrack);\n\n_tracks.MLVTrack.custom_tracks['custom_annotation'] = CustomAnnotationTrack;\n_tracks.MLVTrack.track_types['custom_annotation'] = {\n\t\"class\": CustomAnnotationTrack\n};\n\nvar decode_function = function decode_function(tokens, feature) {\n\tfeature.id = parseInt(tokens[0]);\n};\n\nvar PeakModelTrack = function (_MLVBedTrack2) {\n\t_inherits(PeakModelTrack, _MLVBedTrack2);\n\n\tfunction PeakModelTrack(config) {\n\t\t_classCallCheck(this, PeakModelTrack);\n\n\t\tconfig.format = \"feature\";\n\t\treturn _possibleConstructorReturn(this, (PeakModelTrack.__proto__ || Object.getPrototypeOf(PeakModelTrack)).call(this, config));\n\t}\n\n\t_createClass(PeakModelTrack, [{\n\t\tkey: \"_setFeatureSource\",\n\t\tvalue: function _setFeatureSource() {\n\t\t\tthis.feature_source = new _feature.BigBedFeatureSource(this.config, decode_function);\n\t\t}\n\t}]);\n\n\treturn PeakModelTrack;\n}(_tracks.MLVBedTrack);\n\n_tracks.MLVTrack.custom_tracks[\"peak_model_track\"] = PeakModelTrack;\n_tracks.MLVTrack.track_types[\"peak_model_track\"] = {\n\t\"class\": PeakModelTrack\n};\n\nvar MLVFeatureTrack = function (_MLVBedTrack3) {\n\t_inherits(MLVFeatureTrack, _MLVBedTrack3);\n\n\tfunction MLVFeatureTrack() {\n\t\t_classCallCheck(this, MLVFeatureTrack);\n\n\t\treturn _possibleConstructorReturn(this, (MLVFeatureTrack.__proto__ || Object.getPrototypeOf(MLVFeatureTrack)).apply(this, arguments));\n\t}\n\n\t_createClass(MLVFeatureTrack, [{\n\t\tkey: \"_setFeatureSource\",\n\t\tvalue: function _setFeatureSource() {\n\t\t\tvar url = this.config.url;\n\t\t\tif (url.endsWith(\".bb\") || url.endsWith(\".bigbed\")) {\n\t\t\t\tthis.feature_source = new _feature.BigBedFeatureSource(this.config, decode_function);\n\t\t\t} else {\n\t\t\t\tthis.feature_source = new _feature.TabixBedFeatureSource(this.config, decode_function);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"setYField\",\n\t\tvalue: function setYField(view, y_field) {\n\t\t\tthis.data_view = view;\n\t\t\tthis.config.featureHeight = 5;\n\t\t\tthis.config.displayMode = \"EXPANDED\";\n\t\t\tthis.y_field = y_field;\n\t\t\tif (view) {\n\t\t\t\tthis.min_max = view.getMinMax(y_field.field);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"getFeatureAt\",\n\t\tvalue: function getFeatureAt(genomicLocation, chr, coord, bpPerPixel, ctx) {\n\t\t\tif (!this.y_field) {\n\t\t\t\treturn _get(MLVFeatureTrack.prototype.__proto__ || Object.getPrototypeOf(MLVFeatureTrack.prototype), \"getFeatureAt\", this).call(this, genomicLocation, chr, coord, bpPerPixel, ctx);\n\t\t\t}\n\n\t\t\tvar tolerance = 2 * bpPerPixel;\n\t\t\tvar featureList = this.feature_source.featureCache.queryFeatures(chr, genomicLocation - tolerance, genomicLocation + tolerance);\n\t\t\tvar height = this.config.height - 12;\n\t\t\tvar range = this.min_max[1] - this.min_max[0];\n\t\t\tvar field = this.y_field.field;\n\t\t\tvar bot = this.bottom - 12;\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar feature = _step.value;\n\n\t\t\t\t\tvar item = this.data_view.getItemById(feature.id);\n\t\t\t\t\tif (!item) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar y_val = bot - (item[field] - this.min_max[0]) / range * height;\n\t\t\t\t\tif (coord.y >= y_val && coord.y <= y_val + 5) {\n\t\t\t\t\t\treturn feature;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}, {\n\t\tkey: \"drawScale\",\n\t\tvalue: function drawScale(pixel_height, ctx) {\n\t\t\tif (!this.y_field) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar bot = this.bottom - 12;\n\t\t\tvar top = this.top;\n\n\t\t\tctx.save();\n\t\t\tctx.rect(0, top, 120, bot - top);\n\t\t\tctx.clip();\n\n\t\t\tctx.fillStyle = \"black\";\n\t\t\tctx.textAlign = \"left\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(0, top);\n\t\t\tctx.lineTo(0, bot);\n\n\t\t\tctx.moveTo(0, top);\n\t\t\tctx.lineTo(20, top);\n\t\t\tctx.textBaseline = \"top\";\n\t\t\tctx.fillText(this.min_max[1].toFixed(2), 20, this.top);\n\n\t\t\tctx.moveTo(0, bot);\n\t\t\tctx.lineTo(20, bot);\n\n\t\t\tctx.textBaseline = \"alphabetic\";\n\t\t\tctx.fillText(this.min_max[0], 20, bot);\n\n\t\t\tctx.textBaseLine = \"middle\";\n\t\t\tctx.fillText(this.y_field.name, 3, top + this.config.height / 2);\n\n\t\t\tctx.stroke();\n\t\t\tctx.restore();\n\t\t}\n\t}, {\n\t\tkey: \"drawFeatures\",\n\t\tvalue: function drawFeatures(options) {\n\n\t\t\tif (!this.y_field) {\n\t\t\t\t_get(MLVFeatureTrack.prototype.__proto__ || Object.getPrototypeOf(MLVFeatureTrack.prototype), \"drawFeatures\", this).call(this, options);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar range = this.min_max[1] - this.min_max[0];\n\t\t\tvar field = this.y_field.field;\n\t\t\tvar ctx = options.context;\n\t\t\tthis.top = options.top;\n\n\t\t\tthis.bottom = this.top + this.config.height;\n\t\t\tvar bottom = this.bottom - 12;\n\t\t\tvar height = bottom - this.top;\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = options.features[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar feature = _step2.value;\n\n\t\t\t\t\tif (this.filter_function && !this.filter_function(feature)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar x_pos = (feature.start - options.bpStart) / options.bpPerPixel;\n\n\t\t\t\t\tvar len = (feature.end - feature.start) / options.bpPerPixel;\n\n\t\t\t\t\tif (len < 2) {\n\t\t\t\t\t\tlen = 2;\n\t\t\t\t\t}\n\t\t\t\t\tvar item = this.data_view.getItemById(feature.id);\n\t\t\t\t\tif (!item) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar y_val = (item[field] - this.min_max[0]) / range * height;\n\t\t\t\t\tfeature.color = this.config.color;\n\t\t\t\t\tif (this.color_function) {\n\t\t\t\t\t\tfeature.color = this.color_function(feature);\n\t\t\t\t\t}\n\t\t\t\t\tvar y_pos = bottom - y_val;\n\t\t\t\t\tctx.fillStyle = feature.color;\n\t\t\t\t\tctx.fillRect(x_pos, y_pos, len, 4);\n\t\t\t\t\tthis.renderFeatureLabel(ctx, feature, x_pos, x_pos + len, y_pos, 0, options.pixelWidth);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.bottom;\n\t\t}\n\t}]);\n\n\treturn MLVFeatureTrack;\n}(_tracks.MLVBedTrack);\n\n_tracks.MLVTrack.track_types[\"mlv_feature_track\"] = {\n\t\"class\": MLVFeatureTrack\n};\n\nvar MLVSmoothWigTrack = function (_MLVWigTrack) {\n\t_inherits(MLVSmoothWigTrack, _MLVWigTrack);\n\n\tfunction MLVSmoothWigTrack() {\n\t\t_classCallCheck(this, MLVSmoothWigTrack);\n\n\t\treturn _possibleConstructorReturn(this, (MLVSmoothWigTrack.__proto__ || Object.getPrototypeOf(MLVSmoothWigTrack)).apply(this, arguments));\n\t}\n\n\t_createClass(MLVSmoothWigTrack, [{\n\t\tkey: \"drawFeatures\",\n\t\tvalue: function drawFeatures(options) {\n\t\t\tvar self = this,\n\t\t\t    features = options.features,\n\t\t\t    color = self.config.color,\n\t\t\t    ctx = options.context,\n\t\t\t    bpPerPixel = options.bpPerPixel,\n\t\t\t    bpStart = options.bpStart,\n\t\t\t    pixelWidth = options.pixelWidth,\n\t\t\t    pixelHeight = options.pixelHeight,\n\t\t\t    y_offset = this.config.discrete ? options.top : 0,\n\t\t\t    bpEnd = bpStart + pixelWidth * bpPerPixel + 1,\n\t\t\t    featureValueMinimum = void 0,\n\t\t\t    featureValueMaximum = void 0,\n\t\t\t    featureValueRange = void 0,\n\t\t\t    $dataRangeTrackLabel = void 0,\n\t\t\t    str = void 0,\n\t\t\t    min = void 0,\n\t\t\t    max = void 0;\n\t\t\tif (this.config.group) {\n\t\t\t\tpixelHeight = options.height;\n\t\t\t} else if (this.config.discrete) {\n\t\t\t\tpixelHeight = this.config.height;\n\t\t\t}\n\n\t\t\tif (!color) {\n\t\t\t\tcolor = \"black\";\n\t\t\t}\n\t\t\tself.prev_coords = { x: 0, y: 0 };\n\n\t\t\tif (features) {\n\t\t\t\tif (self.scale_link_to) {\n\t\t\t\t\tvar t = self.scale_link_to.config;\n\t\t\t\t\tif (t) {\n\t\t\t\t\t\tself.config.scale = t.scale;\n\t\t\t\t\t\tself.max_y = self.scale_link_to.max_y;\n\t\t\t\t\t\tself.min_y = self.scale_link_to.min_y;\n\t\t\t\t\t}\n\t\t\t\t} else if (self.set_scale) {\n\t\t\t\t\tself.min_y = self.set_scale.min;\n\t\t\t\t\tself.max_y = self.set_scale.max;\n\t\t\t\t} else if (self.max_y === undefined && self.config.scale === \"automatic\" || self.config.scale === \"dynamic\") {\n\t\t\t\t\tvar s = autoscale(features);\n\t\t\t\t\tself.min_y = s.min;\n\t\t\t\t\tself.max_y = s.max;\n\t\t\t\t} else if (self.config.scale === \"fixed\") {\n\t\t\t\t\tself.min_y = self.config.min_y;\n\t\t\t\t\tself.max_y = self.config.max_y;\n\t\t\t\t}\n\n\t\t\t\tfeatureValueRange = self.max_y - self.min_y;\n\n\t\t\t\t//$dataRangeTrackLabel = $(this.trackView.trackDiv).find('.igv-data-range-track-label');\n\t\t\t\t//\n\t\t\t\t//min = (Math.floor(track.dataRange.min) === track.dataRange.min) ? track.dataRange.min : track.dataRange.min.toFixed(2);\n\t\t\t\t//max = (Math.floor(track.dataRange.max) === track.dataRange.max) ? track.dataRange.max : track.dataRange.max.toFixed(2);\n\t\t\t\t//str = '[' + min + ' - ' + max + ']';\n\t\t\t\t//\n\t\t\t\t//$dataRangeTrackLabel.text(str);\n\t\t\t\tvar prev_x = 0;\n\t\t\t\tvar prev_y = 0;\n\t\t\t\tctx.globalAlpha = this.config.opacity ? this.config.opacity : 1;\n\t\t\t\tif (self.config.smooth) {\n\t\t\t\t\tvar b = y_offset + pixelHeight;\n\t\t\t\t\tself.smooths = Array(pixelWidth).fill(b);\n\t\t\t\t}\n\t\t\t\tif (self.is_line) {\n\t\t\t\t\tvar y = (1.0 - self.config.value / featureValueRange) * pixelHeight;\n\t\t\t\t\t_tracks.Graphics.strokeLine(ctx, 0, y, pixelWidth, y, { \"strokeStyle\": self.config.color, \"lineWidth\": self.config.width ? self.config.width : 1 });\n\t\t\t\t} else {\n\t\t\t\t\tfeatures.forEach(renderFeature);\n\t\t\t\t}\n\t\t\t\tif (self.config.smooth) {\n\t\t\t\t\tvar win_pixels = Math.round(self.config.smooth / bpPerPixel);\n\t\t\t\t\tvar h_win = win_pixels / 2;\n\t\t\t\t\tvar total = 0;\n\t\t\t\t\tfor (var n = 0; n < win_pixels; n++) {\n\t\t\t\t\t\ttotal = total + self.smooths[n];\n\t\t\t\t\t}\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(h_win, total / win_pixels);\n\t\t\t\t\tfor (var _n = h_win + 1; _n < pixelWidth - h_win; _n++) {\n\t\t\t\t\t\ttotal = total - self.smooths[_n - h_win - 1] + self.smooths[_n + h_win];\n\t\t\t\t\t\t//console.log(n+\":\"+self.smooths[n]);\n\t\t\t\t\t\tctx.lineTo(_n, total / win_pixels);\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.strokeStyle = \"red\";\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\tif (self.config.thresholds) {\n\t\t\t\t\tvar _y = y_offset + (1.0 - self.config.thresholds[options.chr] / featureValueRange) * pixelHeight;\n\t\t\t\t\t_tracks.Graphics.strokeLine(ctx, 0, _y, pixelWidth, _y, { \"strokeStyle\": \"black\", \"lineWidth\": 1 });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction renderFeature(feature, index, featureList) {\n\n\t\t\t\tvar yUnitless, heightUnitLess, x, y, width, height, rectEnd, rectBaseline;\n\n\t\t\t\tif (feature.end < bpStart) return;\n\t\t\t\tif (feature.start > bpEnd) return;\n\n\t\t\t\tx = Math.floor((feature.start - bpStart) / bpPerPixel);\n\t\t\t\trectEnd = Math.floor((feature.end - bpStart) / bpPerPixel);\n\t\t\t\twidth = Math.max(0, rectEnd - x);\n\n\t\t\t\t//height = ((feature.value - featureValueMinimum) / featureValueRange) * pixelHeight;\n\t\t\t\t//rectBaseline = pixelHeight - height;\n\t\t\t\t//canvas.fillRect(rectOrigin, rectBaseline, rectWidth, rectHeight, {fillStyle: track.color});\n\n\t\t\t\tif (signsDiffer(self.min_y, self.max_y)) {\n\n\t\t\t\t\tif (feature.value < 0) {\n\t\t\t\t\t\tyUnitless = self.max_y / featureValueRange;\n\t\t\t\t\t\theightUnitLess = -feature.value / featureValueRange;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tyUnitless = (self.max_y - feature.value) / featureValueRange;\n\t\t\t\t\t\theightUnitLess = feature.value / featureValueRange;\n\t\t\t\t\t}\n\t\t\t\t} else if (self.min_y < 0) {\n\t\t\t\t\tyUnitless = 0;\n\t\t\t\t\theightUnitLess = -feature.value / featureValueRange;\n\t\t\t\t} else {\n\t\t\t\t\tyUnitless = 1.0 - (feature.value - self.min_y) / featureValueRange;\n\t\t\t\t\theightUnitLess = (feature.value + self.min_y) / featureValueRange;\n\t\t\t\t}\n\n\t\t\t\ty = yUnitless * pixelHeight + y_offset;\n\t\t\t\ty = y < y_offset ? y_offset : y;\n\t\t\t\theight = heightUnitLess * pixelHeight;\n\t\t\t\theight = height > pixelHeight ? pixelHeight : height;\n\n\t\t\t\t//canvas.fillRect(x, yUnitless * pixelHeight, width, heightUnitLess * pixelHeight, { fillStyle: igv.randomRGB(64, 255) });\n\t\t\t\tif (self.config.display === 'line') {\n\t\t\t\t\tif (self.prev_coords.x) {\n\t\t\t\t\t\t_tracks.Graphics.strokeLine(ctx, x, y, self.prev_coords.x, self.prev_coords.y, { \"strokeStyle\": color, \"lineWidth\": 3 });\n\t\t\t\t\t}\n\t\t\t\t\tself.prev_coords.x = x;\n\t\t\t\t\tself.prev_coords.y = y;\n\t\t\t\t} else {\n\t\t\t\t\t_tracks.Graphics.fillRect(ctx, x, y, width, height, { fillStyle: color });\n\t\t\t\t}\n\n\t\t\t\tif (self.config.smooth) {\n\t\t\t\t\tfor (var a = x; a < x + width; a++) {\n\t\t\t\t\t\tself.smooths[a] = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction autoscale(features) {\n\t\t\t\tvar min = 0,\n\t\t\t\t    max = -Number.MAX_VALUE;\n\t\t\t\tfeatures.forEach(function (f) {\n\t\t\t\t\tmin = Math.min(min, f.value);\n\t\t\t\t\tmax = Math.max(max, f.value);\n\t\t\t\t});\n\t\t\t\treturn { min: min, max: max };\n\t\t\t}\n\n\t\t\tfunction signsDiffer(a, b) {\n\t\t\t\treturn a > 0 && b < 0 || a < 0 && b > 0;\n\t\t\t}\n\t\t\tthis.top = y_offset;\n\t\t\tthis.bottom = y_offset + pixelHeight;\n\t\t\tif (this.config.discrete) {\n\t\t\t\treturn this.bottom;\n\t\t\t} else {\n\t\t\t\tthis.top = 0;\n\t\t\t\tthis.bottom = 0;\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn MLVSmoothWigTrack;\n}(_tracks.MLVWigTrack);\n\n_tracks.MLVTrack.track_types[\"mlv_smooth_wig_track\"] = {\n\t\"class\": MLVSmoothWigTrack\n};\n\nexports.MLVSmoothWigTrack = MLVSmoothWigTrack;\nexports.PeakModelTrack = PeakModelTrack;\nexports.CustomAnnotationTrack = CustomAnnotationTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lanceotron/src/custom_annotation_track.js\n");

/***/ }),

/***/ "./lanceotron/src/deseq_track.js":
/*!***************************************!*\
  !*** ./lanceotron/src/deseq_track.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.DESeqTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _tracks = __webpack_require__(/*! ../../../MLVPanel/src/tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DESeqTrack = function (_MLVBigBedTrack) {\n\t_inherits(DESeqTrack, _MLVBigBedTrack);\n\n\tfunction DESeqTrack(config) {\n\t\t_classCallCheck(this, DESeqTrack);\n\n\t\tif (!config.featureHeight) {\n\t\t\tconfig.featureHeight = 12;\n\t\t}\n\t\tconfig.height = 5 + config.deseq_labels.length * (config.featureHeight + 1);\n\t\treturn _possibleConstructorReturn(this, (DESeqTrack.__proto__ || Object.getPrototypeOf(DESeqTrack)).call(this, config));\n\t}\n\n\t_createClass(DESeqTrack, [{\n\t\tkey: \"renderFeature\",\n\t\tvalue: function renderFeature(feature, coord, tc, info) {\n\t\t\tcoord.py = coord.py + (feature.score - 1) * (this.config.featureHeight + 1);\n\t\t\t_get(DESeqTrack.prototype.__proto__ || Object.getPrototypeOf(DESeqTrack.prototype), \"renderFeature\", this).call(this, feature, coord, tc, info);\n\t\t}\n\t}, {\n\t\tkey: \"renderFeatureLabel\",\n\t\tvalue: function renderFeatureLabel() {}\n\t}, {\n\t\tkey: \"getFeatureAt\",\n\t\tvalue: function getFeatureAt(genomicLocation, chr, coord, bpPerPixel) {\n\t\t\tvar yOffset = coord.y - this.top - 5;\n\t\t\tif (this.feature_source.featureCache) {\n\t\t\t\tvar tolerance = 2 * bpPerPixel,\n\t\t\t\t    featureList = this.feature_source.featureCache.queryFeatures(chr, genomicLocation - tolerance, genomicLocation + tolerance);\n\t\t\t\tvar row = Math.floor(yOffset / this.config.featureHeight);\n\t\t\t\tif (featureList && featureList.length > 0) {\n\t\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\t\tvar _didIteratorError = false;\n\t\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\t\tvar feature = _step.value;\n\n\t\t\t\t\t\t\tif (feature.end >= genomicLocation - tolerance && !feature.start <= genomicLocation + tolerance) {\n\t\t\t\t\t\t\t\tif (row == feature.score - 1 && feature.display) {\n\t\t\t\t\t\t\t\t\treturn feature;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t\t_iteratorError = err;\n\t\t\t\t\t} finally {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}, {\n\t\tkey: \"drawScale\",\n\t\tvalue: function drawScale(pixelHeight, ctx) {\n\t\t\tvar y = this.top + 5;\n\t\t\tctx.font = \"12px Arial\";\n\n\t\t\tctx.textBaseline = \"top\";\n\t\t\tctx.fillStyle = \"black\";\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = this.config.deseq_labels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar text = _step2.value;\n\n\n\t\t\t\t\tctx.fillText(text, 3, y);\n\t\t\t\t\ty += this.config.featureHeight + 1;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn DESeqTrack;\n}(_tracks.MLVBigBedTrack);\n\n_tracks.MLVTrack.custom_tracks[\"deseq_track\"] = DESeqTrack;\n_tracks.MLVTrack.track_types[\"deseq_track\"] = {\n\t\"class\": DESeqTrack\n};\n\nexports.DESeqTrack = DESeqTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9sYW5jZW90cm9uL3NyYy9kZXNlcV90cmFjay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9sYW5jZW90cm9uL3NyYy9kZXNlcV90cmFjay5qcz81NGY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TUxWQmlnQmVkVHJhY2ssTUxWVHJhY2t9IGZyb20gXCIuLi8uLi8uLi9NTFZQYW5lbC9zcmMvdHJhY2tzLmpzXCI7XHJcblxyXG5jbGFzcyBERVNlcVRyYWNrIGV4dGVuZHMgTUxWQmlnQmVkVHJhY2t7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGNvbmZpZyl7XHJcblx0XHRpZiAoIWNvbmZpZy5mZWF0dXJlSGVpZ2h0KXtcclxuXHRcdFx0Y29uZmlnLmZlYXR1cmVIZWlnaHQ9MTI7XHJcblx0XHR9XHJcblx0XHRjb25maWcuaGVpZ2h0PTUrKGNvbmZpZy5kZXNlcV9sYWJlbHMubGVuZ3RoKihjb25maWcuZmVhdHVyZUhlaWdodCsxKSk7XHJcblx0XHRzdXBlcihjb25maWcpO1xyXG5cdH1cclxuXHJcblxyXG5cdHJlbmRlckZlYXR1cmUoZmVhdHVyZSxjb29yZCx0YyxpbmZvKXtcclxuXHRcdGNvb3JkLnB5ID0gY29vcmQucHkrKChmZWF0dXJlLnNjb3JlLTEpKih0aGlzLmNvbmZpZy5mZWF0dXJlSGVpZ2h0KzEpKTtcclxuXHRcdHN1cGVyLnJlbmRlckZlYXR1cmUoZmVhdHVyZSxjb29yZCx0YyxpbmZvKTtcclxuXHR9XHJcblx0cmVuZGVyRmVhdHVyZUxhYmVsKCl7XHJcblx0XHRcclxuXHR9XHJcblxyXG5cdGdldEZlYXR1cmVBdChnZW5vbWljTG9jYXRpb24sIGNociwgY29vcmQsIGJwUGVyUGl4ZWwpIHtcclxuXHRcdGxldCB5T2Zmc2V0PWNvb3JkLnktdGhpcy50b3AtNTtcclxuXHRcdGlmICh0aGlzLmZlYXR1cmVfc291cmNlLmZlYXR1cmVDYWNoZSkge1xyXG4gICAgICAgXHRcdHZhciB0b2xlcmFuY2UgPSAyICogYnBQZXJQaXhlbCwgIFxyXG4gICAgICAgIFx0ZmVhdHVyZUxpc3QgPSB0aGlzLmZlYXR1cmVfc291cmNlLmZlYXR1cmVDYWNoZS5xdWVyeUZlYXR1cmVzKGNociwgZ2Vub21pY0xvY2F0aW9uIC0gdG9sZXJhbmNlLCBnZW5vbWljTG9jYXRpb24gKyB0b2xlcmFuY2UpO1xyXG4gICAgICAgIFx0bGV0IHJvdyA9IE1hdGguZmxvb3IoeU9mZnNldC90aGlzLmNvbmZpZy5mZWF0dXJlSGVpZ2h0KTtcclxuICAgIFx0XHRpZiAoZmVhdHVyZUxpc3QgJiYgZmVhdHVyZUxpc3QubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdGZvciAobGV0IGZlYXR1cmUgb2YgZmVhdHVyZUxpc3Qpe1xyXG4gICAgICAgICAgICBcdFx0aWYgKGZlYXR1cmUuZW5kID49IGdlbm9taWNMb2NhdGlvbiAtIHRvbGVyYW5jZSAmJiAhXHJcbiAgICAgICAgICAgICAgICBcdFx0ZmVhdHVyZS5zdGFydCA8PSBnZW5vbWljTG9jYXRpb24gKyB0b2xlcmFuY2UpIHtcclxuICAgICAgICAgICAgICAgIFx0XHRcdGlmIChyb3c9PWZlYXR1cmUuc2NvcmUtMSAmJiBmZWF0dXJlLmRpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHRyZXR1cm4gZmVhdHVyZTtcclxuICAgICAgICAgICAgICAgIFx0XHRcdH1cclxuICAgICAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0fVxyXG5cclxuICAgIFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cclxuXHRkcmF3U2NhbGUocGl4ZWxIZWlnaHQsY3R4KXtcclxuXHRcdGxldCB5ID0gdGhpcy50b3ArNTtcclxuXHRcdGN0eC5mb250PVwiMTJweCBBcmlhbFwiO1xyXG5cdFx0XHRcclxuXHRcdGN0eC50ZXh0QmFzZWxpbmU9XCJ0b3BcIjtcclxuXHRcdGN0eC5maWxsU3R5bGU9XCJibGFja1wiO1xyXG5cdFx0Zm9yIChsZXQgdGV4dCBvZiB0aGlzLmNvbmZpZy5kZXNlcV9sYWJlbHMpe1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmZpbGxUZXh0KHRleHQsMyx5KTtcclxuXHRcdFx0eSs9dGhpcy5jb25maWcuZmVhdHVyZUhlaWdodCsxO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0fVxyXG59XHJcbk1MVlRyYWNrLmN1c3RvbV90cmFja3NbXCJkZXNlcV90cmFja1wiXT1ERVNlcVRyYWNrO1xyXG5NTFZUcmFjay50cmFja190eXBlc1tcImRlc2VxX3RyYWNrXCJdPXtcclxuXHRcImNsYXNzXCI6REVTZXFUcmFja1xyXG59XHJcblxyXG5leHBvcnQge0RFU2VxVHJhY2t9OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOzs7Ozs7O0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVQTtBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBVkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVlBOzs7O0FBckRBO0FBQ0E7QUFzREE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lanceotron/src/deseq_track.js\n");

/***/ }),

/***/ "./lanceotron/src/lanceotron_tracks_index.js":
/*!***************************************************!*\
  !*** ./lanceotron/src/lanceotron_tracks_index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _panel = __webpack_require__(/*! ../../../MLVPanel/src/panel.js */ \"../MLVPanel/src/panel.js\");\n\nvar _simple_browser = __webpack_require__(/*! ../../../MLVPanel/src/extra/simple_browser.js */ \"../MLVPanel/src/extra/simple_browser.js\");\n\n__webpack_require__(/*! ./custom_annotation_track.js */ \"./lanceotron/src/custom_annotation_track.js\");\n\n__webpack_require__(/*! ./capture_compare_track.js */ \"./lanceotron/src/capture_compare_track.js\");\n\n__webpack_require__(/*! ./mlv_deseq_track.js */ \"./lanceotron/src/mlv_deseq_track.js\");\n\n__webpack_require__(/*! ./deseq_track.js */ \"./lanceotron/src/deseq_track.js\");\n\n__webpack_require__(/*! ./mlv_peaky_track.js */ \"./lanceotron/src/mlv_peaky_track.js\");\n\nvar _tracks = __webpack_require__(/*! ../../../MLVPanel/src/tracks.js */ \"../MLVPanel/src/tracks.js\");\n\n__webpack_require__(/*! ../../../MLVPanel/src/extra/ucsc_track.js */ \"../MLVPanel/src/extra/ucsc_track.js\");\n\n__webpack_require__(/*! ../../../MLVPanel/src/extra/tiled_image_track.js */ \"../MLVPanel/src/extra/tiled_image_track.js\");\n\n__webpack_require__(/*! ../../../MLVPanel/css/mlv_panel.css */ \"../MLVPanel/css/mlv_panel.css\");\n\n__webpack_require__(/*! ../../../MLVPanel/src/bam_track.js */ \"../MLVPanel/src/bam_track.js\");\n\n__webpack_require__(/*! ../../../MLVPanel/src/extra/sca_bam_track.js */ \"../MLVPanel/src/extra/sca_bam_track.js\");\n\nwindow.MLVPanel = _panel.MLVPanel;\nwindow.SimpleBrowser = _simple_browser.SimpleBrowser;\nwindow.SinglePanelBrowser = _simple_browser.SinglePanelBrowser;\nwindow.MLVTrack = _tracks.MLVTrack;\nwindow.MLVBedTrack = _tracks.MLVBedTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9sYW5jZW90cm9uL3NyYy9sYW5jZW90cm9uX3RyYWNrc19pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9sYW5jZW90cm9uL3NyYy9sYW5jZW90cm9uX3RyYWNrc19pbmRleC5qcz8xMjFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TUxWUGFuZWx9IGZyb20gXCIuLi8uLi8uLi9NTFZQYW5lbC9zcmMvcGFuZWwuanNcIjtcclxuaW1wb3J0IHtTaW1wbGVCcm93c2VyLFNpbmdsZVBhbmVsQnJvd3Nlcn0gZnJvbSBcIi4uLy4uLy4uL01MVlBhbmVsL3NyYy9leHRyYS9zaW1wbGVfYnJvd3Nlci5qc1wiO1xyXG5pbXBvcnQgXCIuL2N1c3RvbV9hbm5vdGF0aW9uX3RyYWNrLmpzXCI7XHJcbmltcG9ydCBcIi4vY2FwdHVyZV9jb21wYXJlX3RyYWNrLmpzXCI7XHJcbmltcG9ydCBcIi4vbWx2X2Rlc2VxX3RyYWNrLmpzXCI7XHJcbmltcG9ydCBcIi4vZGVzZXFfdHJhY2suanNcIjtcclxuaW1wb3J0IFwiLi9tbHZfcGVha3lfdHJhY2suanNcIjtcclxuaW1wb3J0IHtNTFZUcmFjayxNTFZCZWRUcmFja30gZnJvbSBcIi4uLy4uLy4uL01MVlBhbmVsL3NyYy90cmFja3MuanNcIjtcclxuaW1wb3J0IFwiLi4vLi4vLi4vTUxWUGFuZWwvc3JjL2V4dHJhL3Vjc2NfdHJhY2suanNcIjtcclxuaW1wb3J0IFwiLi4vLi4vLi4vTUxWUGFuZWwvc3JjL2V4dHJhL3RpbGVkX2ltYWdlX3RyYWNrLmpzXCI7XHJcbmltcG9ydCBcIi4uLy4uLy4uL01MVlBhbmVsL2Nzcy9tbHZfcGFuZWwuY3NzXCI7XHJcbmltcG9ydCBcIi4uLy4uLy4uL01MVlBhbmVsL3NyYy9iYW1fdHJhY2suanNcIjtcclxuaW1wb3J0IFwiLi4vLi4vLi4vTUxWUGFuZWwvc3JjL2V4dHJhL3NjYV9iYW1fdHJhY2suanNcIjtcclxuXHJcbndpbmRvdy5NTFZQYW5lbD1NTFZQYW5lbDtcclxud2luZG93LlNpbXBsZUJyb3dzZXI9U2ltcGxlQnJvd3Nlcjtcclxud2luZG93LlNpbmdsZVBhbmVsQnJvd3NlciA9IFNpbmdsZVBhbmVsQnJvd3Nlcjtcclxud2luZG93Lk1MVlRyYWNrPU1MVlRyYWNrO1xyXG53aW5kb3cuTUxWQmVkVHJhY2sgPSBNTFZCZWRUcmFjazsiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lanceotron/src/lanceotron_tracks_index.js\n");

/***/ }),

/***/ "./lanceotron/src/mlv_deseq_track.js":
/*!*******************************************!*\
  !*** ./lanceotron/src/mlv_deseq_track.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.MLVDESeqTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _feature2 = __webpack_require__(/*! ../../../MLVPanel/src/feature.js */ \"../MLVPanel/src/feature.js\");\n\nvar _tracks = __webpack_require__(/*! ../../../MLVPanel/src/tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction getDecodeFunction(sample_size) {\n\tvar max = sample_size * 3;\n\treturn function (tokens, feature) {\n\t\tfeature.data = [];\n\t\tfor (var i = 0; i < max; i += 3) {\n\t\t\tfeature.data.push([parseFloat(tokens[i]), parseFloat(tokens[i + 1]), parseFloat(tokens[i + 2])]);\n\t\t}\n\t};\n}\n\nvar MLVDESeqTrack = function (_MLVBedTrack) {\n\t_inherits(MLVDESeqTrack, _MLVBedTrack);\n\n\tfunction MLVDESeqTrack(config) {\n\t\t_classCallCheck(this, MLVDESeqTrack);\n\n\t\tconfig.format = \"feature\";\n\t\tif (!config.colors) {\n\t\t\tconfig.colors = [\"#FF0000\", \"#0000FF\", \"#008000\"];\n\t\t}\n\t\tif (!config.pvalue_cutoff) {\n\t\t\tconfig.pvalue_cutoff = 0.05;\n\t\t}\n\t\treturn _possibleConstructorReturn(this, (MLVDESeqTrack.__proto__ || Object.getPrototypeOf(MLVDESeqTrack)).call(this, config));\n\t}\n\n\t_createClass(MLVDESeqTrack, [{\n\t\tkey: \"_setFeatureSource\",\n\t\tvalue: function _setFeatureSource() {\n\t\t\tif (this.config.url && this.config.url.endsWith(\".gz\")) {\n\t\t\t\tthis.feature_source = new _feature2.TabixBedFeatureSource(this.config, getDecodeFunction(this.config.samples.length));\n\t\t\t} else {\n\t\t\t\tthis.feature_source = new _feature2.BigBedFeatureSource(this.config, getDecodeFunction(this.config.samples.length));\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"addExtraControls\",\n\t\tvalue: function addExtraControls(dialog) {\n\t\t\tvar self = this;\n\t\t\tdialog.div.empty();\n\n\t\t\tvar height_div = $(\"<div class='t-d-div'></div>\");\n\n\t\t\theight_div.append(\"<label>height:</label>\").appendTo(dialog.div);\n\n\t\t\tvar height_slider = $(\"<div>\").slider({\n\t\t\t\tmin: 10,\n\t\t\t\tmax: 500,\n\t\t\t\tvalue: dialog.config.height,\n\t\t\t\tslide: function slide(event, ui) {\n\t\t\t\t\tdialog.config.height = ui.value;\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"height\", dialog.config.height);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t}).css({ \"margin\": \"5px 3px\" });\n\t\t\theight_slider.appendTo(height_div);\n\n\t\t\tvar pval_div = $(\"<div class='t-d-div'></div>\").append(\"<label>pValue:</label>\").appendTo(dialog.div);\n\t\t\tdialog.pval_slider = $(\"<div>\").slider({\n\t\t\t\tmax: 1,\n\t\t\t\tmin: 0,\n\t\t\t\tstep: 0.01,\n\t\t\t\tvalue: dialog.config.pvalue_cutoff,\n\t\t\t\tslide: function slide(e, ui) {\n\t\t\t\t\tdialog.config.pvalue_cutoff = ui.value;\n\t\t\t\t\tif (dialog.panel) {\n\t\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"pvalue_cutoff\", ui.value);\n\t\t\t\t\t\tdialog.panel.update();\n\t\t\t\t\t}\n\t\t\t\t\tdialog.pval_input.val(ui.value);\n\t\t\t\t}\n\t\t\t}).css({ \"margin\": \"5px 3px\" }).appendTo(pval_div);\n\t\t\tdialog.pval_input = $(\"<input>\").on(\"blur keypress\", function (e) {\n\t\t\t\tif (e.type === \"keypress\" && !(e.which === 13)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar y = dialog.pval_input.val();\n\t\t\t\ty = parseFloat(y);\n\t\t\t\tif (isNaN(y) || y < 0 || y > 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar s = dialog.pval_slider;\n\n\t\t\t\ts.slider(\"option\", \"value\", y);\n\t\t\t\tif (dialog.panel) {\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"pvalue_cutoff\", y);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t}).width(50).val(dialog.config.pvalue_cutoff).appendTo(pval_div);\n\t\t}\n\t}, {\n\t\tkey: \"drawFeatures\",\n\t\tvalue: function drawFeatures(options) {\n\t\t\tvar features = options.features;\n\t\t\tvar pval = this.config.pvalue_cutoff;\n\n\t\t\tvar top = options.top;\n\t\t\tvar bot = parseInt(top) + parseInt(this.config.height);\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bot;\n\t\t\tvar ctx = options.context;\n\t\t\tvar colors = this.config.colors;\n\t\t\tvar y_max = this.config.y_max ? this.config.y_max : this.config.initial_y_max;\n\t\t\tvar wig_height = this.config.height;\n\t\t\tvar s_s = this.config.samples.length;\n\t\t\tvar count = 0;\n\t\t\tvar drawn = 0;\n\n\t\t\tvar display_features = [];\n\t\t\tthis.max_y_vals = [];\n\t\t\tthis.min_y_vals = [];\n\t\t\tfor (var n = 0; n < s_s; n++) {\n\t\t\t\tthis.max_y_vals.push(0);\n\t\t\t\tthis.min_y_vals.push(0);\n\t\t\t}\n\t\t\t//first parse collecting info\n\t\t\tfor (var x = 0; x < features.length; x++) {\n\t\t\t\tvar feature = features[x];\n\n\t\t\t\tvar len = feature.end - feature.start;\n\t\t\t\tvar x_pos = (feature.start + len / 2 - options.bpStart) / options.bpPerPixel;\n\t\t\t\tif (x_pos > count) {\n\t\t\t\t\tcount = Math.floor(x_pos) + 1;\n\t\t\t\t\tdrawn++;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlen = len / options.bpPerPixel;\n\t\t\t\tif (len < 1) {\n\t\t\t\t\tlen = 1;\n\t\t\t\t}\n\t\t\t\tvar t_y = [];\n\t\t\t\tvar filtered_vals = 0;\n\t\t\t\tvar disp_feature = { x_pos: x_pos, len: len, y_vals: [], pvals: [] };\n\t\t\t\tfor (var i = 0; i < s_s; i++) {\n\t\t\t\t\tif (this.filter_function) {\n\t\t\t\t\t\tfeature.id = feature.data[i][0];\n\t\t\t\t\t\tif (!this.filter_function(feature)) {\n\t\t\t\t\t\t\tfiltered_vals++;\n\t\t\t\t\t\t\tdisp_feature.y_vals.push(false);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar y_val = feature.data[i][1];\n\n\t\t\t\t\tif (y_val > this.max_y_vals[i]) {\n\t\t\t\t\t\tthis.max_y_vals[i] = y_val;\n\t\t\t\t\t} else if (y_val < this.min_y_vals[i]) {\n\t\t\t\t\t\tthis.min_y_vals[i] = y_val;\n\t\t\t\t\t}\n\t\t\t\t\tdisp_feature.y_vals.push(y_val);\n\t\t\t\t\tdisp_feature.pvals.push(feature.data[i][2]);\n\t\t\t\t}\n\t\t\t\tif (filtered_vals !== s_s) {\n\t\t\t\t\tdisplay_features.push(disp_feature);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.centers = [];\n\t\t\tvar y_tops = [];\n\t\t\tvar scale_factors = [];\n\t\t\tvar each = wig_height / s_s;\n\t\t\tfor (var _i = 0; _i < s_s; _i++) {\n\t\t\t\tvar center = this.max_y_vals[_i] / (this.max_y_vals[_i] - this.min_y_vals[_i]) * each + _i * each;\n\t\t\t\tthis.centers.push(center + top);\n\t\t\t\ty_tops.push(top + each * _i);\n\t\t\t\tscale_factors.push(each / (this.max_y_vals[_i] - this.min_y_vals[_i]));\n\t\t\t}\n\t\t\t//ctx.fillStyle=colors[i];\n\t\t\t//ctx.strokeStyle=colors[i];\n\t\t\t//ctx.globalAlpha=0.4;\n\t\t\tctx.globalAlpha = 1.0;\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = display_features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar _feature = _step.value;\n\n\n\t\t\t\t\tfor (var _i2 = 0; _i2 < s_s; _i2++) {\n\t\t\t\t\t\tvar _y_val = _feature.y_vals[_i2];\n\t\t\t\t\t\tif (_y_val === false) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_y_val = _y_val * scale_factors[_i2];\n\t\t\t\t\t\tctx.fillStyle = this.colorScale(_feature.pvals[_i2]);\n\t\t\t\t\t\tif (_y_val > 0) {\n\t\t\t\t\t\t\tvar y_pos = this.centers[_i2] - _y_val;\n\t\t\t\t\t\t\tvar color = this.config.sample_colors[_i2][0];\n\t\t\t\t\t\t\tif (_feature.pvals[_i2] > pval) {\n\t\t\t\t\t\t\t\tcolor = \"lightgray\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.fillStyle = color;\n\t\t\t\t\t\t\tctx.fillRect(_feature.x_pos - _feature.len / 2, y_pos, _feature.len, _y_val);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _color = this.config.sample_colors[_i2][1];\n\t\t\t\t\t\t\tif (_feature.pvals[_i2] > pval) {\n\t\t\t\t\t\t\t\t_color = \"lightgray\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.fillStyle = _color;\n\t\t\t\t\t\t\tctx.fillRect(_feature.x_pos - _feature.len / 2, this.centers[_i2], _feature.len, -_y_val);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn bot;\n\t\t}\n\t}, {\n\t\tkey: \"getFeatureAt\",\n\t\tvalue: function getFeatureAt(genomicLocation, chr, coord, bpPerPixel, ctx, offset) {\n\n\t\t\tvar tolerance = 2 * bpPerPixel;\n\t\t\tvar featureList = this.feature_source.featureCache.queryFeatures(chr, genomicLocation - tolerance, genomicLocation + tolerance);\n\t\t\tif (featureList[0]) {\n\t\t\t\tvar p = ctx.getImageData(coord.x, coord.y + offset, 1, 1).data;\n\t\t\t\tif (p[0] === 0 && p[1] === 0 && p[2] === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tvar feature = featureList[0];\n\t\t\t\tvar each = this.config.height / this.config.samples.length;\n\t\t\t\tvar sample = Math.floor((coord.y - this.top) / each);\n\t\t\t\tvar id = feature.data[sample][0];\n\t\t\t\tfeature.id = id;\n\t\t\t\treturn feature;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}, {\n\t\tkey: \"colorScale\",\n\t\tvalue: function colorScale(val, max) {\n\t\t\tvar perc = val / 40 * 100;\n\t\t\tperc = perc > 100 ? 100 : perc;\n\t\t\tvar r,\n\t\t\t    g,\n\t\t\t    b = 0;\n\t\t\tif (perc < 50) {\n\t\t\t\tg = 255;\n\t\t\t\tr = Math.round(5.1 * perc);\n\t\t\t} else {\n\t\t\t\tr = 255;\n\t\t\t\tg = Math.round(510 - 5.10 * perc);\n\t\t\t}\n\t\t\tvar h = r * 0x10000 + g * 0x100 + b * 0x1;\n\t\t\treturn '#' + ('000000' + h.toString(16)).slice(-6);\n\t\t}\n\t}, {\n\t\tkey: \"drawScale\",\n\t\tvalue: function drawScale(pixel_height, ctx) {\n\t\t\tvar bot = this.bottom;\n\t\t\tvar top = this.top;\n\t\t\tvar each = (bot - top) / this.config.samples.length;\n\t\t\tctx.save();\n\t\t\tctx.rect(0, top, 120, bot - top);\n\t\t\tctx.clip();\n\n\t\t\tctx.fillStyle = \"black\";\n\t\t\tctx.textAlign = \"left\";\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(0, top);\n\t\t\tctx.lineTo(0, bot);\n\t\t\tfor (var x = 0; x < this.config.samples.length; x++) {\n\t\t\t\tif (!this.max_y_vals[x]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar y_pos = top + x * each;\n\t\t\t\tctx.moveTo(0, y_pos);\n\t\t\t\tctx.lineTo(20, y_pos);\n\t\t\t\tctx.textBaseline = \"top\";\n\t\t\t\tctx.fillText(this.max_y_vals[x].toFixed(2), 20, y_pos);\n\n\t\t\t\tctx.moveTo(0, this.centers[x]);\n\t\t\t\tctx.lineTo(20, this.centers[x]);\n\t\t\t\tctx.textBaseLine = \"middle\";\n\t\t\t\tctx.fillText(this.config.samples[x], 3, y_pos + each / 2);\n\n\t\t\t\ty_pos = y_pos + each;\n\t\t\t\tctx.moveTo(0, y_pos);\n\t\t\t\tctx.lineTo(20, y_pos);\n\t\t\t\tctx.textBaseline = \"alphabetic\";\n\t\t\t\tctx.fillText(this.min_y_vals[x], 20, y_pos);\n\t\t\t}\n\n\t\t\tctx.stroke();\n\t\t\tctx.restore();\n\t\t}\n\t}]);\n\n\treturn MLVDESeqTrack;\n}(_tracks.MLVBedTrack);\n\n_tracks.MLVTrack.track_types[\"mlv_deseq_track\"] = {\n\t\"class\": MLVDESeqTrack\n};\n\nexports.MLVDESeqTrack = MLVDESeqTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lanceotron/src/mlv_deseq_track.js\n");

/***/ }),

/***/ "./lanceotron/src/mlv_peaky_track.js":
/*!*******************************************!*\
  !*** ./lanceotron/src/mlv_peaky_track.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.MLVPeakyTrack = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _feature = __webpack_require__(/*! ../../../MLVPanel/src/feature.js */ \"../MLVPanel/src/feature.js\");\n\nvar _tracks = __webpack_require__(/*! ../../../MLVPanel/src/tracks.js */ \"../MLVPanel/src/tracks.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar decode_function = function decode_function(tokens, feature) {\n\tfeature.rjmcmc = parseFloat(tokens[0]);\n\tfeature.id = parseInt(tokens[1]);\n};\n\nvar MLVPeakyTrack = function (_MLVBedTrack) {\n\t_inherits(MLVPeakyTrack, _MLVBedTrack);\n\n\tfunction MLVPeakyTrack() {\n\t\t_classCallCheck(this, MLVPeakyTrack);\n\n\t\treturn _possibleConstructorReturn(this, (MLVPeakyTrack.__proto__ || Object.getPrototypeOf(MLVPeakyTrack)).apply(this, arguments));\n\t}\n\n\t_createClass(MLVPeakyTrack, [{\n\t\tkey: \"_setFeatureSource\",\n\t\tvalue: function _setFeatureSource() {\n\t\t\tvar url = this.config.url;\n\t\t\tif (url.endsWith(\".bb\") || url.endsWith(\".bigbed\")) {\n\t\t\t\tthis.feature_source = new _feature.BigBedFeatureSource(this.config, decode_function);\n\t\t\t} else {\n\t\t\t\tthis.feature_source = new _feature.TabixBedFeatureSource(this.config, decode_function);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"getFeatureAt\",\n\t\tvalue: function getFeatureAt(genomicLocation, chr, coord, bpPerPixel, ctx) {\n\t\t\tif (!this.y_field) {\n\t\t\t\treturn _get(MLVPeakyTrack.prototype.__proto__ || Object.getPrototypeOf(MLVPeakyTrack.prototype), \"getFeatureAt\", this).call(this, genomicLocation, chr, coord, bpPerPixel, ctx);\n\t\t\t}\n\n\t\t\tvar tolerance = 2 * bpPerPixel;\n\t\t\tvar featureList = this.feature_source.featureCache.queryFeatures(chr, genomicLocation - tolerance, genomicLocation + tolerance);\n\t\t\tvar height = this.config.height - 12;\n\t\t\tvar range = this.min_max[1] - this.min_max[0];\n\t\t\tvar field = this.y_field.field;\n\t\t\tvar bot = this.bottom - 12;\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar feature = _step.value;\n\n\t\t\t\t\tvar item = this.data_view.getItemById(feature.id);\n\t\t\t\t\tif (!item) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar y_val = bot - (item[field] - this.min_max[0]) / range * height;\n\t\t\t\t\tif (coord.y >= y_val && coord.y <= y_val + 5) {\n\t\t\t\t\t\treturn feature;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}, {\n\t\tkey: \"addExtraControls\",\n\t\tvalue: function addExtraControls(dialog) {\n\t\t\tvar self = this;\n\t\t\tdialog.div.empty();\n\n\t\t\tvar height_div = $(\"<div class='t-d-div'></div>\");\n\n\t\t\theight_div.append(\"<label>Track Height:</label>\").appendTo(dialog.div);\n\n\t\t\tvar height_slider = $(\"<div>\").slider({\n\t\t\t\tmin: 10,\n\t\t\t\tmax: 500,\n\t\t\t\tvalue: dialog.config.height,\n\t\t\t\tslide: function slide(event, ui) {\n\t\t\t\t\tdialog.config.height = ui.value;\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"height\", dialog.config.height);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t}\n\t\t\t}).css({ \"margin\": \"5px 3px\" });\n\t\t\theight_slider.appendTo(height_div);\n\n\t\t\tvar sig_div = $(\"<div class='t-d-div'></div>\");\n\n\t\t\tsig_div.append(\"<label>Significance Level:</label>\").appendTo(dialog.div);\n\n\t\t\tthis.sig_slider = $(\"<div>\").slider({\n\t\t\t\tmin: 0,\n\t\t\t\tmax: 1,\n\t\t\t\tstep: 0.01,\n\t\t\t\tvalue: dialog.config.sig_val,\n\t\t\t\tslide: function slide(event, ui) {\n\t\t\t\t\tdialog.config.sig_val = ui.value;\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"sig_val\", dialog.config.sig_val);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t\tself.sig_input.val(ui.value);\n\t\t\t\t}\n\t\t\t}).css({ \"margin\": \"5px 3px\" });\n\t\t\tthis.sig_slider.appendTo(sig_div);\n\t\t\tself.sig_input = $(\"<input>\").on(\"blur keypress\", function (e) {\n\t\t\t\tif (e.type === \"keypress\" && !(e.which === 13)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar sig = $(this).val();\n\t\t\t\tsig = parseFloat(sig);\n\t\t\t\tif (sig >= 0 && sig <= 1) {\n\t\t\t\t\tdialog.config.sig_val = sig;\n\t\t\t\t\tdialog.panel.setTrackAttribute(dialog.config.track_id, \"sig_val\", sig);\n\t\t\t\t\tdialog.panel.update();\n\t\t\t\t\tself.sig_slider.slider(\"option\", \"value\", sig);\n\t\t\t\t}\n\t\t\t}).appendTo(sig_div).width(40).val(self.config.sig_val);\n\t\t}\n\t}, {\n\t\tkey: \"drawScale\",\n\t\tvalue: function drawScale(pixel_height, ctx) {\n\n\t\t\t//ctx.save();\n\t\t\t//ctx.rect(0,top,120,this.bottom-this.top);\n\t\t\t//ctx.clip();\n\n\t\t\tvar sig_val = this.config.sig_val || this.config.sig_val === 0 ? this.config.sig_val : 0.1;\n\n\t\t\tvar bottom = this.bottom - 3;\n\t\t\tvar height = this.config.height / 2;\n\n\t\t\tvar sig_line_y = bottom - (sig_val - 0) / 1 * height;\n\n\t\t\tctx.textBaseline = \"alphabetic\";\n\t\t\tctx.fillText(sig_val, 20, sig_line_y - 2);\n\n\t\t\t//ctx.restore();\n\n\t\t}\n\t}, {\n\t\tkey: \"drawFeatures\",\n\t\tvalue: function drawFeatures(options) {\n\n\t\t\t/*if (!this.y_field){\r\n   \tsuper.drawFeatures(options);\r\n   \treturn;\r\n   */\n\t\t\tvar range = 1;\n\t\t\tvar ctx = options.context;\n\t\t\tthis.top = options.top;\n\t\t\tvar sig_val = this.config.sig_val || this.config.sig_val === 0 ? this.config.sig_val : 0.1;\n\n\t\t\tthis.bottom = this.top + this.config.height;\n\t\t\tvar bottom = this.bottom - 3;\n\t\t\tvar height = this.config.height / 2;\n\t\t\tvar bottom2 = this.bottom - height - 3;\n\n\t\t\tvar count = 0;\n\t\t\tvar vp_pos = (this.config.viewpoint - options.bpStart) / options.bpPerPixel;\n\t\t\tvar sig_line_y = bottom - (sig_val - 0) / range * height;\n\t\t\tctx.moveTo(0, sig_line_y);\n\t\t\tctx.strokeStyle = \"gray\";\n\t\t\tctx.lineTo(options.pixelWidth, sig_line_y);\n\t\t\tctx.stroke();\n\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = options.features[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar feature = _step2.value;\n\n\t\t\t\t\tvar sig = feature.rjmcmc >= sig_val;\n\t\t\t\t\tif (this.filter_function && !this.filter_function(feature)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar x_pos = (feature.start - options.bpStart) / options.bpPerPixel;\n\t\t\t\t\t/*if (x_pos>count){\r\n     count=Math.floor(x_pos)+1;\r\n     }\r\n     else{\r\n     continue;\r\n     }*/\n\n\t\t\t\t\tvar len = (feature.end - feature.start) / options.bpPerPixel;\n\n\t\t\t\t\tif (len < 2) {\n\t\t\t\t\t\tlen = 2;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar y_val = (feature.rjmcmc - 0) / range * height;\n\n\t\t\t\t\tvar y_pos = bottom - y_val;\n\t\t\t\t\tvar color = sig ? \"red\" : \"gray\";\n\t\t\t\t\tctx.fillStyle = color;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(x_pos, y_pos, 3, 0, 2 * Math.PI, false);\n\t\t\t\t\tctx.fill();\n\n\t\t\t\t\t//remember any features drawn\n\n\t\t\t\t\t//draw the curve\n\n\t\t\t\t\tif (sig) {\n\t\t\t\t\t\tctx.moveTo(x_pos, bottom2);\n\t\t\t\t\t\tctx.bezierCurveTo(x_pos, bottom2 - height, vp_pos, bottom2 - height, vp_pos, bottom2);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\n\t\t\t\t\t//this.renderFeatureLabel(ctx, feature, x_pos, x_pos+len,y_pos , 0, options.pixelWidth);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.bottom;\n\t\t}\n\t}]);\n\n\treturn MLVPeakyTrack;\n}(_tracks.MLVBedTrack);\n\n_tracks.MLVTrack.track_types[\"mlv_peaky_track\"] = {\n\t\"class\": MLVPeakyTrack\n};\nexports.MLVPeakyTrack = MLVPeakyTrack;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9sYW5jZW90cm9uL3NyYy9tbHZfcGVha3lfdHJhY2suanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbGFuY2VvdHJvbi9zcmMvbWx2X3BlYWt5X3RyYWNrLmpzP2MzMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGZWF0dXJlU291cmNlLEJpZ0JlZEZlYXR1cmVTb3VyY2UsVGFiaXhCZWRGZWF0dXJlU291cmNlfSBmcm9tIFwiLi4vLi4vLi4vTUxWUGFuZWwvc3JjL2ZlYXR1cmUuanNcIjtcclxuaW1wb3J0IHtNTFZCZWRUcmFjayxNTFZUcmFja30gZnJvbSBcIi4uLy4uLy4uL01MVlBhbmVsL3NyYy90cmFja3MuanNcIjtcclxuXHJcbmxldCBkZWNvZGVfZnVuY3Rpb249IGZ1bmN0aW9uKHRva2VucyxmZWF0dXJlKXtcclxuXHRmZWF0dXJlLnJqbWNtYz1wYXJzZUZsb2F0KHRva2Vuc1swXSk7XHJcblx0ZmVhdHVyZS5pZD0gcGFyc2VJbnQodG9rZW5zWzFdKTtcclxufTtcclxuXHJcblxyXG5jbGFzcyBNTFZQZWFreVRyYWNrIGV4dGVuZHMgTUxWQmVkVHJhY2t7XHJcblx0X3NldEZlYXR1cmVTb3VyY2UoKXtcclxuXHRcdGxldCB1cmwgPSB0aGlzLmNvbmZpZy51cmw7XHJcblx0XHRpZiAodXJsLmVuZHNXaXRoKFwiLmJiXCIpIHx8IHVybC5lbmRzV2l0aChcIi5iaWdiZWRcIikpe1xyXG5cdFx0XHR0aGlzLmZlYXR1cmVfc291cmNlID0gbmV3IEJpZ0JlZEZlYXR1cmVTb3VyY2UodGhpcy5jb25maWcsZGVjb2RlX2Z1bmN0aW9uKTtcclxuXHRcdFx0XHJcblx0XHR9XHJcblx0XHRlbHNle1xyXG5cdFx0XHR0aGlzLmZlYXR1cmVfc291cmNlID0gbmV3IFRhYml4QmVkRmVhdHVyZVNvdXJjZSh0aGlzLmNvbmZpZyxkZWNvZGVfZnVuY3Rpb24pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG5cclxuXHRnZXRGZWF0dXJlQXQoZ2Vub21pY0xvY2F0aW9uLCBjaHIsIGNvb3JkLCBicFBlclBpeGVsLGN0eCl7XHJcblx0XHRpZiAoIXRoaXMueV9maWVsZCl7XHJcblx0XHRcdHJldHVybiBzdXBlci5nZXRGZWF0dXJlQXQoZ2Vub21pY0xvY2F0aW9uLCBjaHIsIGNvb3JkLCBicFBlclBpeGVsLGN0eCk7XHJcblx0XHR9XHJcblx0XHRcclxuICAgICAgICBsZXQgdG9sZXJhbmNlID0gMiAqIGJwUGVyUGl4ZWw7XHJcbiAgICAgICAgbGV0IGZlYXR1cmVMaXN0ID0gdGhpcy5mZWF0dXJlX3NvdXJjZS5mZWF0dXJlQ2FjaGUucXVlcnlGZWF0dXJlcyhjaHIsIGdlbm9taWNMb2NhdGlvbiAtIHRvbGVyYW5jZSwgZ2Vub21pY0xvY2F0aW9uICsgdG9sZXJhbmNlKTtcclxuXHRcdGxldCBoZWlnaHQgPSB0aGlzLmNvbmZpZy5oZWlnaHQtMTI7XHJcblx0XHRsZXQgcmFuZ2UgPSB0aGlzLm1pbl9tYXhbMV0tdGhpcy5taW5fbWF4WzBdO1xyXG5cdFx0bGV0IGZpZWxkID0gdGhpcy55X2ZpZWxkLmZpZWxkO1xyXG5cdFx0bGV0IGJvdCA9dGhpcy5ib3R0b20tMTI7XHJcblx0XHRmb3IgKGxldCBmZWF0dXJlIG9mIGZlYXR1cmVMaXN0KXtcclxuXHRcdFx0bGV0IGl0ZW0gPSB0aGlzLmRhdGFfdmlldy5nZXRJdGVtQnlJZChmZWF0dXJlLmlkKTtcclxuXHRcdFx0aWYgKCFpdGVtKXtcclxuXHRcdFx0XHRjb250aW51ZVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgeV92YWwgPWJvdC0oKChpdGVtW2ZpZWxkXS10aGlzLm1pbl9tYXhbMF0pL3JhbmdlKSpoZWlnaHQpO1xyXG5cdFx0XHRpZiAoY29vcmQueSA+PXlfdmFsICYmIGNvb3JkLnk8PXlfdmFsKzUpe1xyXG5cdFx0XHRcdHJldHVybiBmZWF0dXJlO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cclxuXHRcdH1cclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHRhZGRFeHRyYUNvbnRyb2xzKGRpYWxvZyl7XHJcblx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblx0XHRkaWFsb2cuZGl2LmVtcHR5KCk7XHJcblx0XHRcclxuICAgIFx0XHRsZXQgaGVpZ2h0X2Rpdj0kKFwiPGRpdiBjbGFzcz0ndC1kLWRpdic+PC9kaXY+XCIpO1xyXG4gICAgICAgIFx0XHJcblx0XHRcdGhlaWdodF9kaXYuYXBwZW5kKFwiPGxhYmVsPlRyYWNrIEhlaWdodDo8L2xhYmVsPlwiKS5hcHBlbmRUbyhkaWFsb2cuZGl2KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBoZWlnaHRfc2xpZGVyID0kKFwiPGRpdj5cIikuc2xpZGVyKHtcclxuICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDUwMCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOmRpYWxvZy5jb25maWcuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nLmNvbmZpZy5oZWlnaHQ9IHVpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZy5wYW5lbC5zZXRUcmFja0F0dHJpYnV0ZShkaWFsb2cuY29uZmlnLnRyYWNrX2lkLFwiaGVpZ2h0XCIsZGlhbG9nLmNvbmZpZy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZy5wYW5lbC51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLmNzcyh7XCJtYXJnaW5cIjpcIjVweCAzcHhcIn0pO1xyXG4gICAgICAgICAgICBoZWlnaHRfc2xpZGVyLmFwcGVuZFRvKGhlaWdodF9kaXYpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNpZ19kaXY9JChcIjxkaXYgY2xhc3M9J3QtZC1kaXYnPjwvZGl2PlwiKTtcclxuICAgICAgICBcdFxyXG5cdFx0XHRzaWdfZGl2LmFwcGVuZChcIjxsYWJlbD5TaWduaWZpY2FuY2UgTGV2ZWw6PC9sYWJlbD5cIikuYXBwZW5kVG8oZGlhbG9nLmRpdik7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2lnX3NsaWRlciA9JChcIjxkaXY+XCIpLnNsaWRlcih7XHJcbiAgICAgICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDEsXHJcbiAgICAgICAgICAgICAgICBzdGVwOjAuMDEsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTpkaWFsb2cuY29uZmlnLnNpZ192YWwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcclxuICAgICAgICAgICAgICAgICAgICBkaWFsb2cuY29uZmlnLnNpZ192YWw9IHVpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZy5wYW5lbC5zZXRUcmFja0F0dHJpYnV0ZShkaWFsb2cuY29uZmlnLnRyYWNrX2lkLFwic2lnX3ZhbFwiLGRpYWxvZy5jb25maWcuc2lnX3ZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nLnBhbmVsLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2lnX2lucHV0LnZhbCh1aS52YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLmNzcyh7XCJtYXJnaW5cIjpcIjVweCAzcHhcIn0pO1xyXG4gICAgICAgICAgICB0aGlzLnNpZ19zbGlkZXIuYXBwZW5kVG8oc2lnX2Rpdik7XHJcbiAgICAgICAgICAgIHNlbGYuc2lnX2lucHV0PSQoXCI8aW5wdXQ+XCIpLm9uKFwiYmx1ciBrZXlwcmVzc1wiLGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZT09PVwia2V5cHJlc3NcIiAmJiAhKGUud2hpY2g9PT0xMykpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBzaWc9ICQodGhpcykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICBzaWc9cGFyc2VGbG9hdChzaWcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNpZz49MCAmJiBzaWc8PTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZy5jb25maWcuc2lnX3ZhbD0gc2lnO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZy5wYW5lbC5zZXRUcmFja0F0dHJpYnV0ZShkaWFsb2cuY29uZmlnLnRyYWNrX2lkLFwic2lnX3ZhbFwiLHNpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nLnBhbmVsLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2lnX3NsaWRlci5zbGlkZXIoXCJvcHRpb25cIixcInZhbHVlXCIsc2lnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSkuYXBwZW5kVG8oc2lnX2Rpdikud2lkdGgoNDApLnZhbChzZWxmLmNvbmZpZy5zaWdfdmFsKTtcclxuXHJcbiAgICAgICAgIFxyXG4gICBcclxuIFx0XHJcblx0XHRcdFx0XHJcblx0fVxyXG5cclxuXHJcblxyXG5cclxuXHRkcmF3U2NhbGUocGl4ZWxfaGVpZ2h0LGN0eCl7XHJcblx0XHJcblx0XHJcblx0XHQvL2N0eC5zYXZlKCk7XHJcblx0XHQvL2N0eC5yZWN0KDAsdG9wLDEyMCx0aGlzLmJvdHRvbS10aGlzLnRvcCk7XHJcblx0XHQvL2N0eC5jbGlwKCk7XHJcblxyXG5cdFx0bGV0IHNpZ192YWwgPSB0aGlzLmNvbmZpZy5zaWdfdmFsIHx8IHRoaXMuY29uZmlnLnNpZ192YWw9PT0wP3RoaXMuY29uZmlnLnNpZ192YWw6MC4xXHJcblxyXG5cdFxyXG5cclxuXHRcdFxyXG5cdFx0bGV0IGJvdHRvbSA9dGhpcy5ib3R0b20tM1xyXG5cdFx0bGV0IGhlaWdodCA9dGhpcy5jb25maWcuaGVpZ2h0LzI7XHJcblx0XHRcclxuXHJcblx0XHRcclxuXHRcdGxldCBzaWdfbGluZV95ID0gYm90dG9tLSgoKHNpZ192YWwtMCkvMSkqaGVpZ2h0KTtcclxuXHRcclxuXHRcclxuXHJcblx0XHRcclxuXHRcdGN0eC50ZXh0QmFzZWxpbmU9XCJhbHBoYWJldGljXCJcclxuXHRcdGN0eC5maWxsVGV4dChzaWdfdmFsLDIwLHNpZ19saW5lX3ktMik7XHJcblxyXG5cdFx0Ly9jdHgucmVzdG9yZSgpO1xyXG5cclxuXHRcclxuXHR9XHJcblxyXG5cclxuXHRkcmF3RmVhdHVyZXMob3B0aW9ucyl7XHJcblx0XHJcblx0XHQvKmlmICghdGhpcy55X2ZpZWxkKXtcclxuXHRcdFx0c3VwZXIuZHJhd0ZlYXR1cmVzKG9wdGlvbnMpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHQqL1xyXG5cdFx0bGV0IHJhbmdlID0gMTtcclxuXHRcdGxldCBjdHg9b3B0aW9ucy5jb250ZXh0O1xyXG5cdFx0dGhpcy50b3A9b3B0aW9ucy50b3A7XHJcblx0XHRsZXQgc2lnX3ZhbCA9IHRoaXMuY29uZmlnLnNpZ192YWwgfHwgdGhpcy5jb25maWcuc2lnX3ZhbD09PTA/dGhpcy5jb25maWcuc2lnX3ZhbDowLjFcclxuXHJcblx0XHJcblxyXG5cdFx0dGhpcy5ib3R0b209dGhpcy50b3ArdGhpcy5jb25maWcuaGVpZ2h0O1xyXG5cdFx0bGV0IGJvdHRvbSA9dGhpcy5ib3R0b20tM1xyXG5cdFx0bGV0IGhlaWdodCA9dGhpcy5jb25maWcuaGVpZ2h0LzI7XHJcblx0XHRsZXQgYm90dG9tMj0gdGhpcy5ib3R0b20taGVpZ2h0LTM7XHJcblxyXG5cdFx0bGV0IGNvdW50PTA7XHJcblx0XHRsZXQgdnBfcG9zID0gKHRoaXMuY29uZmlnLnZpZXdwb2ludC1vcHRpb25zLmJwU3RhcnQpL29wdGlvbnMuYnBQZXJQaXhlbDtcclxuXHRcdGxldCBzaWdfbGluZV95ID0gYm90dG9tLSgoKHNpZ192YWwtMCkvcmFuZ2UpKmhlaWdodCk7XHJcblx0XHRjdHgubW92ZVRvKDAsc2lnX2xpbmVfeSk7XHJcblx0XHRjdHguc3Ryb2tlU3R5bGU9XCJncmF5XCI7XHJcblx0XHRjdHgubGluZVRvKG9wdGlvbnMucGl4ZWxXaWR0aCxzaWdfbGluZV95KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHJcblx0XHRmb3IgKGxldCBmZWF0dXJlIG9mIG9wdGlvbnMuZmVhdHVyZXMpe1xyXG5cdFx0XHRsZXQgc2lnID0gZmVhdHVyZS5yam1jbWM+PXNpZ192YWw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcl9mdW5jdGlvbiAmJiAhdGhpcy5maWx0ZXJfZnVuY3Rpb24oZmVhdHVyZSkpe1xyXG4gICAgICAgICAgICBcdGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgeF9wb3MgPSAoZmVhdHVyZS5zdGFydC1vcHRpb25zLmJwU3RhcnQpL29wdGlvbnMuYnBQZXJQaXhlbDtcclxuICAgICAgICAgICAgLyppZiAoeF9wb3M+Y291bnQpe1xyXG5cdFx0XHRcdGNvdW50PU1hdGguZmxvb3IoeF9wb3MpKzE7XHJcblx0XHRcdFx0XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fSovXHJcblxyXG5cclxuXHRcdFx0bGV0IGxlbiA9IChmZWF0dXJlLmVuZC1mZWF0dXJlLnN0YXJ0KS9vcHRpb25zLmJwUGVyUGl4ZWw7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAobGVuPDIpe1xyXG5cdFx0XHRcdGxlbiA9IDI7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgeV92YWwgPSgoZmVhdHVyZS5yam1jbWMtMCkvcmFuZ2UpKmhlaWdodDtcclxuXHRcdFxyXG4gICAgXHRcdGxldCB5X3Bvcz1ib3R0b20teV92YWw7XHJcbiAgICBcdFx0bGV0IGNvbG9yICA9IHNpZz9cInJlZFwiOlwiZ3JheVwiXHJcblx0XHRcdGN0eC5maWxsU3R5bGU9Y29sb3I7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgXHRcdGN0eC5hcmMoeF9wb3MsIHlfcG9zLCAzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG4gICAgICBcdFx0Y3R4LmZpbGwoKVxyXG5cclxuICAgICAgXHRcdFxyXG5cdFx0XHQvL3JlbWVtYmVyIGFueSBmZWF0dXJlcyBkcmF3blxyXG5cdFx0XHRcclxuXHRcdFx0Ly9kcmF3IHRoZSBjdXJ2ZVxyXG5cclxuXHRcdFx0aWYgKHNpZyl7XHJcblx0XHRcdFx0Y3R4Lm1vdmVUbyh4X3Bvcyxib3R0b20yKTtcclxuXHRcdFx0XHRjdHguYmV6aWVyQ3VydmVUbyh4X3Bvcyxib3R0b20yLWhlaWdodCx2cF9wb3MsYm90dG9tMi1oZWlnaHQsdnBfcG9zLGJvdHRvbTIpO1xyXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0fVxyXG4gICAgXHJcblx0XHRcdC8vdGhpcy5yZW5kZXJGZWF0dXJlTGFiZWwoY3R4LCBmZWF0dXJlLCB4X3BvcywgeF9wb3MrbGVuLHlfcG9zICwgMCwgb3B0aW9ucy5waXhlbFdpZHRoKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cmV0dXJuIHRoaXMuYm90dG9tO1xyXG5cdH1cdFxyXG59XHJcblxyXG5NTFZUcmFjay50cmFja190eXBlc1tcIm1sdl9wZWFreV90cmFja1wiXT17XHJcblx0XCJjbGFzc1wiOk1MVlBlYWt5VHJhY2tcclxufVxyXG5leHBvcnQge01MVlBlYWt5VHJhY2t9OyBcclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQVdBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBdkJBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQXVCQTtBQUNBOzs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBWEE7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBTUE7OztBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF6QkE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQTBCQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUF1RUE7QUFDQTs7OztBQXROQTtBQUNBO0FBd05BO0FBQ0E7QUFEQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lanceotron/src/mlv_peaky_track.js\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!../MLVPanel/css/mlv_panel.css":
/*!**********************************************************!*\
  !*** ./node_modules/css-loader!.Panel/css/mlv_panel.css ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../MLV/node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \".mlv-track-legend{\\r\\n\\tposition:absolute !important;\\r\\n\\ttop:0px;\\r\\n\\tleft:calc(100% - 155px);\\r\\n\\tborder:0.5px solid black;\\r\\n\\tfont-size:14px;\\r\\n\\tz-index:90;\\r\\n}\\r\\n\\r\\n\\r\\n.mlv-track-legend span{\\r\\n\\tdisplay:inline-block;\\r\\n\\tcursor:pointer;\\r\\n\\tmargin-right:2px;\\r\\n}\\r\\n\\r\\n.mlv-track-legend li{\\r\\n\\twhite-space:nowrap;\\r\\n}\\r\\n\\r\\n.mlv-track-legend-text {\\r\\n\\twhite-space:nowrap;\\r\\n\\toverflow:hidden;\\r\\n\\ttext-overflow:ellipsis;\\r\\n\\twidth: 100px;\\r\\n}\\r\\n\\r\\n\\r\\n.mlv-track-dialog label {\\r\\n\\tfont-weight:bold;\\r\\n\\tmargin-bottom:4px;\\r\\n\\tmargin-top:0px;\\r\\n}\\r\\n\\r\\n.mlv-track-dialog input[type=checkbox] {\\r\\n\\theight: 17px;\\r\\n\\twidth: 17px;\\r\\n\\t vertical-align: bottom;\\r\\n  position: relative;\\r\\n  margin-left:2px;\\r\\n  margin-bottom:2px;\\r\\n}\\r\\n\\r\\n.mlv-track-dialog span{\\r\\n\\tmargin-right:4px;\\r\\n}\\r\\n\\r\\n.mlv-track-dialog .fas{\\r\\n\\tcursor:pointer;\\r\\n\\tfont-size:16px;\\r\\n}\\r\\n\\r\\n.mlv-track-dialog hr {\\r\\n\\tmargin-top:10px;\\r\\n\\tmargin-bottom:2px;\\r\\n\\r\\n}\\r\\n\\r\\n.add-track-dialog label{\\r\\n\\tdisplay:block;\\r\\n\\tfont-weight:bold;\\r\\n\\tmargin-top:5px;\\r\\n\\r\\n}\\r\\n\\r\\n.browser-menu-panel button{\\r\\n\\tpadding-top: 2px;\\r\\n    padding-bottom: 2px;\\r\\n    margin-left: 2px;\\r\\n    margin-right: 2px;\\r\\n\\r\\n}\\r\\n\\r\\n.browser-menu-panel{\\r\\n\\toverflow:hidden;\\r\\n\\twhite-space:nowrap;\\r\\n}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi9NTFZQYW5lbC9jc3MvbWx2X3BhbmVsLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uUGFuZWwvY3NzL21sdl9wYW5lbC5jc3M/YWY4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vTUxWL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubWx2LXRyYWNrLWxlZ2VuZHtcXHJcXG5cXHRwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O1xcclxcblxcdHRvcDowcHg7XFxyXFxuXFx0bGVmdDpjYWxjKDEwMCUgLSAxNTVweCk7XFxyXFxuXFx0Ym9yZGVyOjAuNXB4IHNvbGlkIGJsYWNrO1xcclxcblxcdGZvbnQtc2l6ZToxNHB4O1xcclxcblxcdHotaW5kZXg6OTA7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5tbHYtdHJhY2stbGVnZW5kIHNwYW57XFxyXFxuXFx0ZGlzcGxheTppbmxpbmUtYmxvY2s7XFxyXFxuXFx0Y3Vyc29yOnBvaW50ZXI7XFxyXFxuXFx0bWFyZ2luLXJpZ2h0OjJweDtcXHJcXG59XFxyXFxuXFxyXFxuLm1sdi10cmFjay1sZWdlbmQgbGl7XFxyXFxuXFx0d2hpdGUtc3BhY2U6bm93cmFwO1xcclxcbn1cXHJcXG5cXHJcXG4ubWx2LXRyYWNrLWxlZ2VuZC10ZXh0IHtcXHJcXG5cXHR3aGl0ZS1zcGFjZTpub3dyYXA7XFxyXFxuXFx0b3ZlcmZsb3c6aGlkZGVuO1xcclxcblxcdHRleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7XFxyXFxuXFx0d2lkdGg6IDEwMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4ubWx2LXRyYWNrLWRpYWxvZyBsYWJlbCB7XFxyXFxuXFx0Zm9udC13ZWlnaHQ6Ym9sZDtcXHJcXG5cXHRtYXJnaW4tYm90dG9tOjRweDtcXHJcXG5cXHRtYXJnaW4tdG9wOjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLm1sdi10cmFjay1kaWFsb2cgaW5wdXRbdHlwZT1jaGVja2JveF0ge1xcclxcblxcdGhlaWdodDogMTdweDtcXHJcXG5cXHR3aWR0aDogMTdweDtcXHJcXG5cXHQgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIG1hcmdpbi1sZWZ0OjJweDtcXHJcXG4gIG1hcmdpbi1ib3R0b206MnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubWx2LXRyYWNrLWRpYWxvZyBzcGFue1xcclxcblxcdG1hcmdpbi1yaWdodDo0cHg7XFxyXFxufVxcclxcblxcclxcbi5tbHYtdHJhY2stZGlhbG9nIC5mYXN7XFxyXFxuXFx0Y3Vyc29yOnBvaW50ZXI7XFxyXFxuXFx0Zm9udC1zaXplOjE2cHg7XFxyXFxufVxcclxcblxcclxcbi5tbHYtdHJhY2stZGlhbG9nIGhyIHtcXHJcXG5cXHRtYXJnaW4tdG9wOjEwcHg7XFxyXFxuXFx0bWFyZ2luLWJvdHRvbToycHg7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5hZGQtdHJhY2stZGlhbG9nIGxhYmVse1xcclxcblxcdGRpc3BsYXk6YmxvY2s7XFxyXFxuXFx0Zm9udC13ZWlnaHQ6Ym9sZDtcXHJcXG5cXHRtYXJnaW4tdG9wOjVweDtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLmJyb3dzZXItbWVudS1wYW5lbCBidXR0b257XFxyXFxuXFx0cGFkZGluZy10b3A6IDJweDtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDJweDtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDJweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAycHg7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5icm93c2VyLW1lbnUtcGFuZWx7XFxyXFxuXFx0b3ZlcmZsb3c6aGlkZGVuO1xcclxcblxcdHdoaXRlLXNwYWNlOm5vd3JhcDtcXHJcXG59XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!../MLVPanel/css/mlv_panel.css\n");

/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif (item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function (modules, mediaQuery) {\n\t\tif (typeof modules === \"string\") modules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif (typeof id === \"number\") alreadyImportedModules[id] = true;\n\t\t}\n\t\tfor (i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif (typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif (mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if (mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzPzRkYjkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/lib/css-base.js\n");

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"./node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/addStyles.js\n");

/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n\t// get current location\n\tvar location = typeof window !== \"undefined\" && window.location;\n\n\tif (!location) {\n\t\tthrow new Error(\"fixUrls requires window.location\");\n\t}\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t\treturn css;\n\t}\n\n\tvar baseUrl = location.protocol + \"//\" + location.host;\n\tvar currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n This regular expression is just a way to recursively match brackets within\n a string.\n \t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n    (  = Start a capturing group\n      (?:  = Start a non-capturing group\n          [^)(]  = Match anything that isn't a parentheses\n          |  = OR\n          \\(  = Match a start parentheses\n              (?:  = Start another non-capturing groups\n                  [^)(]+  = Match anything that isn't a parentheses\n                  |  = OR\n                  \\(  = Match a start parentheses\n                      [^)(]*  = Match anything that isn't a parentheses\n                  \\)  = Match a end parentheses\n              )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n  \\)  = Match a close parens\n \t /gi  = Get all matches, not the first.  Be case insensitive.\n  */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl.trim().replace(/^\"(.*)\"$/, function (o, $1) {\n\t\t\treturn $1;\n\t\t}).replace(/^'(.*)'$/, function (o, $1) {\n\t\t\treturn $1;\n\t\t});\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t\treturn fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t\t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanM/NmFmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7Ozs7Ozs7Ozs7OztBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/urls.js\n");

/***/ })

/******/ });